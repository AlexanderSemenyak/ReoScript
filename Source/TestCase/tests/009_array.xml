<?xml version="1.0" encoding="utf-8" ?>
<!--
/*****************************************************************************
 * 
 * ReoScript - .NET Script Language Engine
 * 
 * https://github.com/unvell/ReoScript
 *
 * THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
 * KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
 * PURPOSE.
 *
 * This software released under MIT license.
 * Copyright (c) 2012-2019 Jingwood, unvell.com, all rights reserved.
 * 
 ****************************************************************************/
-->

<test-suite id="009" name="array">
  
  <test-case id="001">
    <script>
      var t = debug.assert;

      var arr = [1,2,3,4,5,6,7];
      
      t( arr.length == 7 );
      t( arr[0] == 1 );
      t( arr[6] == 7 );

    </script>
  </test-case>

  <test-case id="002">
    <script>
      var t = debug.assert;

      var arr = [];
      
      arr.push(1);
      arr.push(2, 3, 4);
      arr.push(5, 6, 7);

      t( arr.length == 7 );
      t( arr[0] == 1 );
      t( arr[6] == 7 );

    </script>
  </test-case>

  <test-case id="003">
    <script>
      var t = debug.assert;

      var arr = [1,2,3,4,5];
      
      arr[0] = 9;
      t( arr[0] + arr[1] == 11 );

    </script>
  </test-case>

  <test-case id="004" name="remove element">
    <script>
      var t = debug.assert;

      var arr = [1,2,3,4,5];
      
      arr.splice(0,1);
      t(arr.length==4);
      
      arr.splice(1,1,10,11);
      t(arr.length==5);

      t(arr[0] == 2);
      t(arr[1] == 10);
      t(arr[2] == 11);
      t(arr[3] == 4);
      t(arr[4] == 5);

    </script>
  </test-case>

  <test-case id="005" name="remove in iteration">
    <script>
      var t = debug.assert;

      var arr = [1,2,3,4,5];

      for(e in arr)
        if(e==3) arr.splice(2,1);
        
      t( arr.length == 4 );
      t( arr[0] == 1 );
      t( arr[1] == 2 );
      t( arr[2] == 4 );
      t( arr[3] == 5 );

    </script>
  </test-case>

  <test-case id="006" name="constructor">
    <script>
      var t = debug.assert;

      var arr = new Array(1,2,3,4,5,6,7);
      
      t( arr.length == 7 );
      t( arr[0] == 1 );
      t( arr[6] == 7 );

    </script>
  </test-case>

  <test-case id="007" name="indexOf">
    <script>
      var t = debug.assert;

      var fun = function() { };
      var arr = new Array(null, 3, "hello", function() { }, fun, 7);
      
      t( arr.indexOf(3) == 1 );
      t( arr.indexOf(fun) == 4 );
      t( arr.indexOf('hello') == 2 );

    </script>
  </test-case>

  <test-case id="008" name="join">
    <script>
      var t = debug.assert;

      var arr = ['apple', 'banana', 'orange'];
      var str = arr.join();
      
      t(str, 'apple,banana,orange');
      
      arr = [1,2,3,4,5];
      str = arr.join(':');
      t(str, '1:2:3:4:5');

    </script>
  </test-case>
  
  <test-case id="010" name="call from array">
    <script>
      var t = debug.assert;

      var a = 1, b = 2, c = 3;
      var arr = [ a, b, c, b * c, a + c];

      t( arr[0] == 1 );
      t( arr[1] == 2 );
      t( arr[2] == 3 );
      t( arr[3] == 6 );
      t( arr[4] == 4 );

      arr[0] = function() { 
        return (a + b) * 2;
      };
      
      t( arr[0]() == 6 );

      a = 15;
      b = 5;
      t( arr[0]() == 40 );
      
    </script>
  </test-case>

  <test-case id="011" name="auto resize">
    <script>
      var t = debug.assert;

      var arr = [ 1,2,3 ];
      t( arr.length, 3 );
      
      arr[9] = 10;
      t( arr.length === 10 );
      
    </script>
  </test-case>

	<test-case id="100" name="where">
		<![CDATA[
      var t = debug.assert;

			var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
			var brr = arr.where(n => n < 5);
			
			t( brr.equals([1, 2, 3, 4]) );

	]]>
	</test-case>

	<test-case id="101" name="first">
		<![CDATA[
		
	]]>
	</test-case>

	<test-case id="102" name="last">
		<![CDATA[
		
	]]>
	</test-case>

	<test-case id="103" name="map">
		<![CDATA[
	    var t = debug.assert;
			var teq = (no, a, b) => t(a.equals(b), true, "failed at #" + no);

			/////////////////////////////////

			var array1 = [1, 4, 9, 16];

			teq(1, array1.map(x => x * 2), [2, 8, 18, 32]);
			teq(2, array1, [1, 4, 9, 16]);

			teq(3, [1, 4, 9].map(num => Math.sqrt(num)), [1, 2, 3]);

			/////////////////////////////////
			
			var kvArray = [{key: 1, value: 10}, 
										 {key: 2, value: 20}, 
										 {key: 3, value: 30}];

			var reformattedArray = kvArray.map(obj => {
				 var rObj = {};
				 rObj[obj.key] = obj.value;
				 return rObj;
			});
			
			t( reformattedArray[0][1], 10 );
			t( reformattedArray[1][2], 20 );
			t( reformattedArray[2][3], 30 );
		
			/////////////////////////////////
		
			var map = Array.prototype.map;
			var a = map.call('Hello World', function(x) {
				return x.charCodeAt(0);
			});
			
			teq(4, a, [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100] );
	]]>
	</test-case>

	<test-case id="104" name="reduce">
		<![CDATA[
			var t = debug.assert;
			var teq = (no, a, b) => t(a.equals(b), true, "failed at #" + no);

			// Test code refer to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
			
			var reducer = (accumulator, currentValue) => accumulator + currentValue;
			t( [1, 2, 3, 4].reduce(reducer), 10 );
			t( [1, 2, 3, 4].reduce(reducer, 5), 15 );
			
			t( [0, 1, 2, 3].reduce((a, c) => a + c), 6);
			t( [{x: 1}, {x: 2}, {x: 3}].reduce((a, c) => a + c.x), 6);
			
			teq(1, [[0, 1], [2, 3], [4, 5]].reduce((a, c) => a.concat(c), []), [0, 1, 2, 3, 4, 5]);
			
			/////////////////////////////////
			
			var names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];

			var countedNames = names.reduce(function(allNames, name) { 
				if (allNames.hasOwnProperty(name)) {    // if (a in b) 
					allNames[name]++;
				}
				else {
					allNames[name] = 1;
				}
				return allNames;
			}, {});
			
			// expect: { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }
			t( countedNames["Alice"], 2 );
			t( countedNames["Bob"], 1 );
			t( countedNames["Tiff"], 1 );
			t( countedNames["Bruce"], 1 );
			
			/////////////////////////////////
			
			var people = [
				{ name: 'Alice', age: 21 },
				{ name: 'Max', age: 20 },
				{ name: 'Jane', age: 20 }
			];

			function groupBy(objectArray, property) {
				return objectArray.reduce(function (acc, obj) {
					var key = obj[property];
					if (!acc[key]) {
						acc[key] = [];
					}
					acc[key].push(obj);
					return acc;
				}, {});
			}

			// Exception happen - can't access outer variable from closure function
			// var groupedPeople = groupBy(people, 'age');
			
			// groupedPeople is:
			// { 
			//   20: [
			//     { name: 'Max', age: 20 }, 
			//     { name: 'Jane', age: 20 }
			//   ], 
			//   21: [{ name: 'Alice', age: 21 }] 
			// }

			// t( groupedPeople["20"]["Max"], 20 );    // failed on this test 
			
	]]>
	</test-case>

	<test-case id="105" name="concat">
		<![CDATA[
      var t = debug.assert;
			var teq = (no, a, b) => t(a.equals(b), true, "failed at #" + no);
	
			teq(1, [1,2,3].concat([4,5,6], "abb"), [1,2,3,4,5,6,"abb"]);
			teq(2, [1,2,3].concat(4, 5, 6), [1,2,3,4,5,6]);
			teq(3, [1,2,3].concat([4, 5], null), [1,2,3,4,5,null]);
			teq(4, [1,2,3].concat([3, 3, null], 3, 4), [1,2,3,3,3,null,3,4] );

			teq(5, [].concat([]), [] );
			teq(6, [].concat([null]), [null] );
			teq(7, ["abc"].concat(["def"]), ["abc","def"] );
			teq(8, ["abc"].concat("def", ["ghi"], "j", "k"), ["abc","def", "ghi", "j", "k"] );
	]]>
	</test-case>

	<test-case id="106" name="">
		<![CDATA[
		
	]]>
	</test-case>

</test-suite>