//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\work\\ReoScript\\ReoScript.g 2013-03-24 10:26:20

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Unvell.ReoScript 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class ReoScriptParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "ANONYMOUS_FUNCTION", "ARGUMENT_LIST", "ARRAY_ACCESS", "ARRAY_LITERAL", "ASSIGNMENT", "ASSIGN_AND", "ASSIGN_DIV", "ASSIGN_LSHIFT", "ASSIGN_MINUS", "ASSIGN_MUL", "ASSIGN_OR", "ASSIGN_PLUS", "ASSIGN_REM", "ASSIGN_REV", "ASSIGN_RSHIFT", "BINARY_LITERATE", "BLOCK", "BREAK", "CLASS", "COLON", "COMBINE_OBJECT", "COMMA", "COMMENT", "CONDITION", "CONTINUE", "CREATE", "DECLARATION", "DECREMENT", "DELETE", "DIV", "DOT", "ELSE", "EQUALS", "ESCAPE_SEQUENCE", "FALSE", "FOREACH_STATEMENT", "FOR_BODY", "FOR_CONDITION", "FOR_INIT", "FOR_ITERATOR", "FOR_STATEMENT", "FUNCTION_CALL", "FUNCTION_DEFINE", "GREAT_EQUALS", "GREAT_THAN", "HEX_LITERATE", "IDENTIFIER", "IF_STATEMENT", "IMPORT", "INCREMENT", "INSTANCEOF", "LAMBDA_FUNCTION", "LBRACE", "LCURLY", "LESS_EQUALS", "LESS_THAN", "LINE_COMMENT", "LOCAL_DECLARE_ASSIGNMENT", "LOGICAL_AND", "LOGICAL_OR", "LPAREN", "LSHIFT", "MEMBER_DECLARATION", "MINUS", "MOD", "MUL", "NEWLINE", "NOT", "NOT_EQUALS", "NULL", "NUMBER_LITERATE", "OBJECT_LITERAL", "OR", "PARAMETER_DEFINES", "PLUS", "POST_UNARY_STEP", "PRE_UNARY", "PRE_UNARY_STEP", "PROPERTY_ACCESS", "RBRACE", "RCURLY", "RETURN", "RPAREN", "RSHIFT", "SCOPE_MODIFIER", "SEMI", "STRING_LITERATE", "SWITCH", "SWITCH_CASE", "SWITCH_CASE_ELSE", "TAG", "TAG_ATTR", "TAG_ATTR_LIST", "TAG_NAME", "THIS", "TRUE", "TYPE", "TYPEOF", "UNDEFINED", "WHILE_STATEMENT", "WS", "XOR", "'/>'", "'</'", "'=>'", "'break'", "'case'", "'class'", "'continue'", "'default'", "'delete'", "'for'", "'function'", "'if'", "'import'", "'in'", "'instanceof'", "'new'", "'return'", "'switch'", "'typeof'", "'while'", "'~'"
	};
	public const int EOF=-1;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int AND=4;
	public const int ANONYMOUS_FUNCTION=5;
	public const int ARGUMENT_LIST=6;
	public const int ARRAY_ACCESS=7;
	public const int ARRAY_LITERAL=8;
	public const int ASSIGNMENT=9;
	public const int ASSIGN_AND=10;
	public const int ASSIGN_DIV=11;
	public const int ASSIGN_LSHIFT=12;
	public const int ASSIGN_MINUS=13;
	public const int ASSIGN_MUL=14;
	public const int ASSIGN_OR=15;
	public const int ASSIGN_PLUS=16;
	public const int ASSIGN_REM=17;
	public const int ASSIGN_REV=18;
	public const int ASSIGN_RSHIFT=19;
	public const int BINARY_LITERATE=20;
	public const int BLOCK=21;
	public const int BREAK=22;
	public const int CLASS=23;
	public const int COLON=24;
	public const int COMBINE_OBJECT=25;
	public const int COMMA=26;
	public const int COMMENT=27;
	public const int CONDITION=28;
	public const int CONTINUE=29;
	public const int CREATE=30;
	public const int DECLARATION=31;
	public const int DECREMENT=32;
	public const int DELETE=33;
	public const int DIV=34;
	public const int DOT=35;
	public const int ELSE=36;
	public const int EQUALS=37;
	public const int ESCAPE_SEQUENCE=38;
	public const int FALSE=39;
	public const int FOREACH_STATEMENT=40;
	public const int FOR_BODY=41;
	public const int FOR_CONDITION=42;
	public const int FOR_INIT=43;
	public const int FOR_ITERATOR=44;
	public const int FOR_STATEMENT=45;
	public const int FUNCTION_CALL=46;
	public const int FUNCTION_DEFINE=47;
	public const int GREAT_EQUALS=48;
	public const int GREAT_THAN=49;
	public const int HEX_LITERATE=50;
	public const int IDENTIFIER=51;
	public const int IF_STATEMENT=52;
	public const int IMPORT=53;
	public const int INCREMENT=54;
	public const int INSTANCEOF=55;
	public const int LAMBDA_FUNCTION=56;
	public const int LBRACE=57;
	public const int LCURLY=58;
	public const int LESS_EQUALS=59;
	public const int LESS_THAN=60;
	public const int LINE_COMMENT=61;
	public const int LOCAL_DECLARE_ASSIGNMENT=62;
	public const int LOGICAL_AND=63;
	public const int LOGICAL_OR=64;
	public const int LPAREN=65;
	public const int LSHIFT=66;
	public const int MEMBER_DECLARATION=67;
	public const int MINUS=68;
	public const int MOD=69;
	public const int MUL=70;
	public const int NEWLINE=71;
	public const int NOT=72;
	public const int NOT_EQUALS=73;
	public const int NULL=74;
	public const int NUMBER_LITERATE=75;
	public const int OBJECT_LITERAL=76;
	public const int OR=77;
	public const int PARAMETER_DEFINES=78;
	public const int PLUS=79;
	public const int POST_UNARY_STEP=80;
	public const int PRE_UNARY=81;
	public const int PRE_UNARY_STEP=82;
	public const int PROPERTY_ACCESS=83;
	public const int RBRACE=84;
	public const int RCURLY=85;
	public const int RETURN=86;
	public const int RPAREN=87;
	public const int RSHIFT=88;
	public const int SCOPE_MODIFIER=89;
	public const int SEMI=90;
	public const int STRING_LITERATE=91;
	public const int SWITCH=92;
	public const int SWITCH_CASE=93;
	public const int SWITCH_CASE_ELSE=94;
	public const int TAG=95;
	public const int TAG_ATTR=96;
	public const int TAG_ATTR_LIST=97;
	public const int TAG_NAME=98;
	public const int THIS=99;
	public const int TRUE=100;
	public const int TYPE=101;
	public const int TYPEOF=102;
	public const int UNDEFINED=103;
	public const int WHILE_STATEMENT=104;
	public const int WS=105;
	public const int XOR=106;

	public ReoScriptParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ReoScriptParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ReoScriptParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\work\\ReoScript\\ReoScript.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_script();
	partial void LeaveRule_script();

	// $ANTLR start "script"
	// C:\\work\\ReoScript\\ReoScript.g:57:1: public script : ( statement )* ;
	[GrammarRule("script")]
	public AstParserRuleReturnScope<CommonTree, IToken> script()
	{
		EnterRule_script();
		EnterRule("script", 1);
		TraceIn("script", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> statement1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "script");
		DebugLocation(57, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:58:2: ( ( statement )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:59:2: ( statement )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(59, 2);
			// C:\\work\\ReoScript\\ReoScript.g:59:2: ( statement )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==BINARY_LITERATE||LA1_0==DECREMENT||LA1_0==FALSE||(LA1_0>=HEX_LITERATE && LA1_0<=IDENTIFIER)||LA1_0==INCREMENT||(LA1_0>=LBRACE && LA1_0<=LCURLY)||LA1_0==LPAREN||(LA1_0>=NULL && LA1_0<=NUMBER_LITERATE)||LA1_0==SCOPE_MODIFIER||LA1_0==STRING_LITERATE||(LA1_0>=THIS && LA1_0<=TYPE)||LA1_0==UNDEFINED||LA1_0==110||(LA1_0>=112 && LA1_0<=113)||(LA1_0>=115 && LA1_0<=119)||(LA1_0>=122 && LA1_0<=124)||LA1_0==126))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:59:2: statement
					{
					DebugLocation(59, 2);
					PushFollow(Follow._statement_in_script443);
					statement1=statement();
					PopFollow();

					adaptor.AddChild(root_0, statement1.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("script", 1);
			LeaveRule("script", 1);
			LeaveRule_script();
		}
		DebugLocation(60, 1);
		} finally { DebugExitRule(GrammarFileName, "script"); }
		return retval;

	}
	// $ANTLR end "script"

	partial void EnterRule_function_defines();
	partial void LeaveRule_function_defines();

	// $ANTLR start "function_defines"
	// C:\\work\\ReoScript\\ReoScript.g:62:1: function_defines : ( function_define )* ;
	[GrammarRule("function_defines")]
	private AstParserRuleReturnScope<CommonTree, IToken> function_defines()
	{
		EnterRule_function_defines();
		EnterRule("function_defines", 2);
		TraceIn("function_defines", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> function_define2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "function_defines");
		DebugLocation(62, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:63:2: ( ( function_define )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:63:4: ( function_define )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(63, 4);
			// C:\\work\\ReoScript\\ReoScript.g:63:4: ( function_define )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==SCOPE_MODIFIER||LA2_0==117))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:63:4: function_define
					{
					DebugLocation(63, 4);
					PushFollow(Follow._function_define_in_function_defines456);
					function_define2=function_define();
					PopFollow();

					adaptor.AddChild(root_0, function_define2.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function_defines", 2);
			LeaveRule("function_defines", 2);
			LeaveRule_function_defines();
		}
		DebugLocation(64, 1);
		} finally { DebugExitRule(GrammarFileName, "function_defines"); }
		return retval;

	}
	// $ANTLR end "function_defines"

	partial void EnterRule_function_define();
	partial void LeaveRule_function_define();

	// $ANTLR start "function_define"
	// C:\\work\\ReoScript\\ReoScript.g:66:1: function_define : ( SCOPE_MODIFIER )? 'function' id= IDENTIFIER '(' ( parameterDeclarationList )? ')' block -> ^( FUNCTION_DEFINE $id ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ( SCOPE_MODIFIER )? ) ;
	[GrammarRule("function_define")]
	private AstParserRuleReturnScope<CommonTree, IToken> function_define()
	{
		EnterRule_function_define();
		EnterRule("function_define", 3);
		TraceIn("function_define", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken id = default(IToken);
		IToken SCOPE_MODIFIER3 = default(IToken);
		IToken string_literal4 = default(IToken);
		IToken char_literal5 = default(IToken);
		IToken char_literal7 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationList6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block8 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree id_tree = default(CommonTree);
		CommonTree SCOPE_MODIFIER3_tree = default(CommonTree);
		CommonTree string_literal4_tree = default(CommonTree);
		CommonTree char_literal5_tree = default(CommonTree);
		CommonTree char_literal7_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_SCOPE_MODIFIER=new RewriteRuleITokenStream(adaptor,"token SCOPE_MODIFIER");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_parameterDeclarationList=new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclarationList");
		try { DebugEnterRule(GrammarFileName, "function_define");
		DebugLocation(66, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:67:2: ( ( SCOPE_MODIFIER )? 'function' id= IDENTIFIER '(' ( parameterDeclarationList )? ')' block -> ^( FUNCTION_DEFINE $id ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ( SCOPE_MODIFIER )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:67:4: ( SCOPE_MODIFIER )? 'function' id= IDENTIFIER '(' ( parameterDeclarationList )? ')' block
			{
			DebugLocation(67, 4);
			// C:\\work\\ReoScript\\ReoScript.g:67:4: ( SCOPE_MODIFIER )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==SCOPE_MODIFIER))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:67:4: SCOPE_MODIFIER
				{
				DebugLocation(67, 4);
				SCOPE_MODIFIER3=(IToken)Match(input,SCOPE_MODIFIER,Follow._SCOPE_MODIFIER_in_function_define468);  
				stream_SCOPE_MODIFIER.Add(SCOPE_MODIFIER3);


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(67, 20);
			string_literal4=(IToken)Match(input,117,Follow._117_in_function_define471);  
			stream_117.Add(string_literal4);

			DebugLocation(67, 33);
			id=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_function_define475);  
			stream_IDENTIFIER.Add(id);

			DebugLocation(67, 45);
			char_literal5=(IToken)Match(input,LPAREN,Follow._LPAREN_in_function_define477);  
			stream_LPAREN.Add(char_literal5);

			DebugLocation(67, 49);
			// C:\\work\\ReoScript\\ReoScript.g:67:49: ( parameterDeclarationList )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==IDENTIFIER))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:67:49: parameterDeclarationList
				{
				DebugLocation(67, 49);
				PushFollow(Follow._parameterDeclarationList_in_function_define479);
				parameterDeclarationList6=parameterDeclarationList();
				PopFollow();

				stream_parameterDeclarationList.Add(parameterDeclarationList6.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(67, 75);
			char_literal7=(IToken)Match(input,RPAREN,Follow._RPAREN_in_function_define482);  
			stream_RPAREN.Add(char_literal7);

			DebugLocation(67, 79);
			PushFollow(Follow._block_in_function_define484);
			block8=block();
			PopFollow();

			stream_block.Add(block8.Tree);


			{
			// AST REWRITE
			// elements: parameterDeclarationList, block, id, SCOPE_MODIFIER
			// token labels: id
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_id=new RewriteRuleITokenStream(adaptor,"token id",id);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 68:3: -> ^( FUNCTION_DEFINE $id ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ( SCOPE_MODIFIER )? )
			{
				DebugLocation(68, 6);
				// C:\\work\\ReoScript\\ReoScript.g:68:6: ^( FUNCTION_DEFINE $id ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ( SCOPE_MODIFIER )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(68, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_DEFINE, "FUNCTION_DEFINE"), root_1);

				DebugLocation(68, 25);
				adaptor.AddChild(root_1, stream_id.NextNode());
				DebugLocation(68, 28);
				// C:\\work\\ReoScript\\ReoScript.g:68:28: ^( PARAMETER_DEFINES ( parameterDeclarationList )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(68, 30);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

				DebugLocation(68, 48);
				// C:\\work\\ReoScript\\ReoScript.g:68:48: ( parameterDeclarationList )?
				if (stream_parameterDeclarationList.HasNext)
				{
					DebugLocation(68, 48);
					adaptor.AddChild(root_2, stream_parameterDeclarationList.NextTree());

				}
				stream_parameterDeclarationList.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(68, 75);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(68, 81);
				// C:\\work\\ReoScript\\ReoScript.g:68:81: ( SCOPE_MODIFIER )?
				if (stream_SCOPE_MODIFIER.HasNext)
				{
					DebugLocation(68, 81);
					adaptor.AddChild(root_1, stream_SCOPE_MODIFIER.NextNode());

				}
				stream_SCOPE_MODIFIER.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function_define", 3);
			LeaveRule("function_define", 3);
			LeaveRule_function_define();
		}
		DebugLocation(69, 1);
		} finally { DebugExitRule(GrammarFileName, "function_define"); }
		return retval;

	}
	// $ANTLR end "function_define"

	partial void EnterRule_anonymous_function_define();
	partial void LeaveRule_anonymous_function_define();

	// $ANTLR start "anonymous_function_define"
	// C:\\work\\ReoScript\\ReoScript.g:71:1: anonymous_function_define : ( 'function' '(' ( parameterDeclarationList )? ')' block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | '(' ( parameterDeclarationList )? ')' '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) ) ) | IDENTIFIER '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) ) ) );
	[GrammarRule("anonymous_function_define")]
	private AstParserRuleReturnScope<CommonTree, IToken> anonymous_function_define()
	{
		EnterRule_anonymous_function_define();
		EnterRule("anonymous_function_define", 4);
		TraceIn("anonymous_function_define", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal9 = default(IToken);
		IToken char_literal10 = default(IToken);
		IToken char_literal12 = default(IToken);
		IToken char_literal14 = default(IToken);
		IToken char_literal16 = default(IToken);
		IToken string_literal17 = default(IToken);
		IToken IDENTIFIER20 = default(IToken);
		IToken string_literal21 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationList11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block13 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationList15 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block18 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block22 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression23 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal9_tree = default(CommonTree);
		CommonTree char_literal10_tree = default(CommonTree);
		CommonTree char_literal12_tree = default(CommonTree);
		CommonTree char_literal14_tree = default(CommonTree);
		CommonTree char_literal16_tree = default(CommonTree);
		CommonTree string_literal17_tree = default(CommonTree);
		CommonTree IDENTIFIER20_tree = default(CommonTree);
		CommonTree string_literal21_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_parameterDeclarationList=new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclarationList");
		try { DebugEnterRule(GrammarFileName, "anonymous_function_define");
		DebugLocation(71, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:72:2: ( 'function' '(' ( parameterDeclarationList )? ')' block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | '(' ( parameterDeclarationList )? ')' '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) ) ) | IDENTIFIER '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) ) ) )
			int alt9=3;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case 117:
				{
				alt9 = 1;
				}
				break;
			case LPAREN:
				{
				alt9 = 2;
				}
				break;
			case IDENTIFIER:
				{
				alt9 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:72:4: 'function' '(' ( parameterDeclarationList )? ')' block
				{
				DebugLocation(72, 4);
				string_literal9=(IToken)Match(input,117,Follow._117_in_anonymous_function_define518);  
				stream_117.Add(string_literal9);

				DebugLocation(72, 15);
				char_literal10=(IToken)Match(input,LPAREN,Follow._LPAREN_in_anonymous_function_define520);  
				stream_LPAREN.Add(char_literal10);

				DebugLocation(72, 19);
				// C:\\work\\ReoScript\\ReoScript.g:72:19: ( parameterDeclarationList )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==IDENTIFIER))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:72:19: parameterDeclarationList
					{
					DebugLocation(72, 19);
					PushFollow(Follow._parameterDeclarationList_in_anonymous_function_define522);
					parameterDeclarationList11=parameterDeclarationList();
					PopFollow();

					stream_parameterDeclarationList.Add(parameterDeclarationList11.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(72, 45);
				char_literal12=(IToken)Match(input,RPAREN,Follow._RPAREN_in_anonymous_function_define525);  
				stream_RPAREN.Add(char_literal12);

				DebugLocation(72, 49);
				PushFollow(Follow._block_in_anonymous_function_define527);
				block13=block();
				PopFollow();

				stream_block.Add(block13.Tree);


				{
				// AST REWRITE
				// elements: block, parameterDeclarationList
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 73:3: -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
				{
					DebugLocation(73, 6);
					// C:\\work\\ReoScript\\ReoScript.g:73:6: ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(73, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANONYMOUS_FUNCTION, "ANONYMOUS_FUNCTION"), root_1);

					DebugLocation(73, 27);
					// C:\\work\\ReoScript\\ReoScript.g:73:27: ^( PARAMETER_DEFINES ( parameterDeclarationList )? )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(73, 29);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

					DebugLocation(73, 47);
					// C:\\work\\ReoScript\\ReoScript.g:73:47: ( parameterDeclarationList )?
					if (stream_parameterDeclarationList.HasNext)
					{
						DebugLocation(73, 47);
						adaptor.AddChild(root_2, stream_parameterDeclarationList.NextTree());

					}
					stream_parameterDeclarationList.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(73, 74);
					adaptor.AddChild(root_1, stream_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:74:4: '(' ( parameterDeclarationList )? ')' '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) ) )
				{
				DebugLocation(74, 4);
				char_literal14=(IToken)Match(input,LPAREN,Follow._LPAREN_in_anonymous_function_define549);  
				stream_LPAREN.Add(char_literal14);

				DebugLocation(74, 8);
				// C:\\work\\ReoScript\\ReoScript.g:74:8: ( parameterDeclarationList )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==IDENTIFIER))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:74:8: parameterDeclarationList
					{
					DebugLocation(74, 8);
					PushFollow(Follow._parameterDeclarationList_in_anonymous_function_define551);
					parameterDeclarationList15=parameterDeclarationList();
					PopFollow();

					stream_parameterDeclarationList.Add(parameterDeclarationList15.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(74, 34);
				char_literal16=(IToken)Match(input,RPAREN,Follow._RPAREN_in_anonymous_function_define554);  
				stream_RPAREN.Add(char_literal16);

				DebugLocation(74, 38);
				string_literal17=(IToken)Match(input,109,Follow._109_in_anonymous_function_define556);  
				stream_109.Add(string_literal17);

				DebugLocation(74, 43);
				// C:\\work\\ReoScript\\ReoScript.g:74:43: ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) ) )
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==LCURLY))
				{
					switch (input.LA(2))
					{
					case DECREMENT:
					case INCREMENT:
					case LBRACE:
					case LCURLY:
					case LPAREN:
					case SCOPE_MODIFIER:
					case TYPE:
					case 110:
					case 112:
					case 113:
					case 115:
					case 116:
					case 117:
					case 118:
					case 119:
					case 122:
					case 123:
					case 124:
					case 126:
						{
						alt7 = 1;
						}
						break;
					case IDENTIFIER:
						{
						int LA7_4 = input.LA(3);

						if (((LA7_4>=ASSIGNMENT && LA7_4<=ASSIGN_RSHIFT)||LA7_4==DECREMENT||LA7_4==DOT||LA7_4==INCREMENT||(LA7_4>=LBRACE && LA7_4<=LCURLY)||LA7_4==LPAREN||LA7_4==SEMI||LA7_4==109||LA7_4==121))
						{
							alt7 = 1;
						}
						else if ((LA7_4==COLON))
						{
							alt7 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 7, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case STRING_LITERATE:
						{
						int LA7_5 = input.LA(3);

						if (((LA7_5>=ASSIGNMENT && LA7_5<=ASSIGN_RSHIFT)||LA7_5==DECREMENT||LA7_5==DOT||LA7_5==INCREMENT||(LA7_5>=LBRACE && LA7_5<=LCURLY)||LA7_5==LPAREN||LA7_5==SEMI||LA7_5==121))
						{
							alt7 = 1;
						}
						else if ((LA7_5==COLON))
						{
							alt7 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 7, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case BINARY_LITERATE:
					case FALSE:
					case HEX_LITERATE:
					case NULL:
					case NUMBER_LITERATE:
					case RCURLY:
					case THIS:
					case TRUE:
					case UNDEFINED:
						{
						alt7 = 1;
						}
						break;
					case COMMA:
						{
						alt7 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 7, 1, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else if ((LA7_0==BINARY_LITERATE||LA7_0==DECREMENT||LA7_0==FALSE||(LA7_0>=HEX_LITERATE && LA7_0<=IDENTIFIER)||LA7_0==INCREMENT||LA7_0==LBRACE||LA7_0==LPAREN||LA7_0==MINUS||LA7_0==NOT||(LA7_0>=NULL && LA7_0<=NUMBER_LITERATE)||LA7_0==PLUS||LA7_0==STRING_LITERATE||(LA7_0>=THIS && LA7_0<=TRUE)||LA7_0==UNDEFINED||LA7_0==117||LA7_0==122||LA7_0==125||LA7_0==127))
				{
					alt7 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:75:5: block
					{
					DebugLocation(75, 5);
					PushFollow(Follow._block_in_anonymous_function_define564);
					block18=block();
					PopFollow();

					stream_block.Add(block18.Tree);


					{
					// AST REWRITE
					// elements: block, parameterDeclarationList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 76:4: -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
					{
						DebugLocation(76, 7);
						// C:\\work\\ReoScript\\ReoScript.g:76:7: ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(76, 9);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANONYMOUS_FUNCTION, "ANONYMOUS_FUNCTION"), root_1);

						DebugLocation(76, 28);
						// C:\\work\\ReoScript\\ReoScript.g:76:28: ^( PARAMETER_DEFINES ( parameterDeclarationList )? )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(76, 30);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

						DebugLocation(76, 48);
						// C:\\work\\ReoScript\\ReoScript.g:76:48: ( parameterDeclarationList )?
						if (stream_parameterDeclarationList.HasNext)
						{
							DebugLocation(76, 48);
							adaptor.AddChild(root_2, stream_parameterDeclarationList.NextTree());

						}
						stream_parameterDeclarationList.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(76, 75);
						adaptor.AddChild(root_1, stream_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:77:5: assignmentExpression
					{
					DebugLocation(77, 5);
					PushFollow(Follow._assignmentExpression_in_anonymous_function_define588);
					assignmentExpression19=assignmentExpression();
					PopFollow();

					stream_assignmentExpression.Add(assignmentExpression19.Tree);


					{
					// AST REWRITE
					// elements: assignmentExpression, parameterDeclarationList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 78:4: -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) )
					{
						DebugLocation(78, 7);
						// C:\\work\\ReoScript\\ReoScript.g:78:7: ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(78, 9);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANONYMOUS_FUNCTION, "ANONYMOUS_FUNCTION"), root_1);

						DebugLocation(78, 28);
						// C:\\work\\ReoScript\\ReoScript.g:78:28: ^( PARAMETER_DEFINES ( parameterDeclarationList )? )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(78, 30);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

						DebugLocation(78, 48);
						// C:\\work\\ReoScript\\ReoScript.g:78:48: ( parameterDeclarationList )?
						if (stream_parameterDeclarationList.HasNext)
						{
							DebugLocation(78, 48);
							adaptor.AddChild(root_2, stream_parameterDeclarationList.NextTree());

						}
						stream_parameterDeclarationList.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(78, 75);
						// C:\\work\\ReoScript\\ReoScript.g:78:75: ^( RETURN assignmentExpression )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(78, 77);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, "RETURN"), root_2);

						DebugLocation(78, 84);
						adaptor.AddChild(root_2, stream_assignmentExpression.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(7); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:80:4: IDENTIFIER '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) ) )
				{
				DebugLocation(80, 4);
				IDENTIFIER20=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_anonymous_function_define619);  
				stream_IDENTIFIER.Add(IDENTIFIER20);

				DebugLocation(80, 15);
				string_literal21=(IToken)Match(input,109,Follow._109_in_anonymous_function_define621);  
				stream_109.Add(string_literal21);

				DebugLocation(80, 20);
				// C:\\work\\ReoScript\\ReoScript.g:80:20: ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) ) )
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==LCURLY))
				{
					switch (input.LA(2))
					{
					case DECREMENT:
					case INCREMENT:
					case LBRACE:
					case LCURLY:
					case LPAREN:
					case SCOPE_MODIFIER:
					case TYPE:
					case 110:
					case 112:
					case 113:
					case 115:
					case 116:
					case 117:
					case 118:
					case 119:
					case 122:
					case 123:
					case 124:
					case 126:
						{
						alt8 = 1;
						}
						break;
					case IDENTIFIER:
						{
						int LA8_4 = input.LA(3);

						if (((LA8_4>=ASSIGNMENT && LA8_4<=ASSIGN_RSHIFT)||LA8_4==DECREMENT||LA8_4==DOT||LA8_4==INCREMENT||(LA8_4>=LBRACE && LA8_4<=LCURLY)||LA8_4==LPAREN||LA8_4==SEMI||LA8_4==109||LA8_4==121))
						{
							alt8 = 1;
						}
						else if ((LA8_4==COLON))
						{
							alt8 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 8, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case STRING_LITERATE:
						{
						int LA8_5 = input.LA(3);

						if (((LA8_5>=ASSIGNMENT && LA8_5<=ASSIGN_RSHIFT)||LA8_5==DECREMENT||LA8_5==DOT||LA8_5==INCREMENT||(LA8_5>=LBRACE && LA8_5<=LCURLY)||LA8_5==LPAREN||LA8_5==SEMI||LA8_5==121))
						{
							alt8 = 1;
						}
						else if ((LA8_5==COLON))
						{
							alt8 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 8, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case BINARY_LITERATE:
					case FALSE:
					case HEX_LITERATE:
					case NULL:
					case NUMBER_LITERATE:
					case RCURLY:
					case THIS:
					case TRUE:
					case UNDEFINED:
						{
						alt8 = 1;
						}
						break;
					case COMMA:
						{
						alt8 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 8, 1, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else if ((LA8_0==BINARY_LITERATE||LA8_0==DECREMENT||LA8_0==FALSE||(LA8_0>=HEX_LITERATE && LA8_0<=IDENTIFIER)||LA8_0==INCREMENT||LA8_0==LBRACE||LA8_0==LPAREN||LA8_0==MINUS||LA8_0==NOT||(LA8_0>=NULL && LA8_0<=NUMBER_LITERATE)||LA8_0==PLUS||LA8_0==STRING_LITERATE||(LA8_0>=THIS && LA8_0<=TRUE)||LA8_0==UNDEFINED||LA8_0==117||LA8_0==122||LA8_0==125||LA8_0==127))
				{
					alt8 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:81:5: block
					{
					DebugLocation(81, 5);
					PushFollow(Follow._block_in_anonymous_function_define629);
					block22=block();
					PopFollow();

					stream_block.Add(block22.Tree);


					{
					// AST REWRITE
					// elements: block, IDENTIFIER
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 82:4: -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block )
					{
						DebugLocation(82, 7);
						// C:\\work\\ReoScript\\ReoScript.g:82:7: ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(82, 9);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANONYMOUS_FUNCTION, "ANONYMOUS_FUNCTION"), root_1);

						DebugLocation(82, 28);
						// C:\\work\\ReoScript\\ReoScript.g:82:28: ^( PARAMETER_DEFINES IDENTIFIER )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(82, 30);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

						DebugLocation(82, 48);
						adaptor.AddChild(root_2, stream_IDENTIFIER.NextNode());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(82, 60);
						adaptor.AddChild(root_1, stream_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:83:5: assignmentExpression
					{
					DebugLocation(83, 5);
					PushFollow(Follow._assignmentExpression_in_anonymous_function_define652);
					assignmentExpression23=assignmentExpression();
					PopFollow();

					stream_assignmentExpression.Add(assignmentExpression23.Tree);


					{
					// AST REWRITE
					// elements: IDENTIFIER, assignmentExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 84:4: -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) )
					{
						DebugLocation(84, 7);
						// C:\\work\\ReoScript\\ReoScript.g:84:7: ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(84, 9);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANONYMOUS_FUNCTION, "ANONYMOUS_FUNCTION"), root_1);

						DebugLocation(84, 28);
						// C:\\work\\ReoScript\\ReoScript.g:84:28: ^( PARAMETER_DEFINES IDENTIFIER )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(84, 30);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

						DebugLocation(84, 48);
						adaptor.AddChild(root_2, stream_IDENTIFIER.NextNode());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(84, 60);
						// C:\\work\\ReoScript\\ReoScript.g:84:60: ^( RETURN assignmentExpression )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(84, 62);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, "RETURN"), root_2);

						DebugLocation(84, 69);
						adaptor.AddChild(root_2, stream_assignmentExpression.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(8); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_function_define", 4);
			LeaveRule("anonymous_function_define", 4);
			LeaveRule_anonymous_function_define();
		}
		DebugLocation(86, 1);
		} finally { DebugExitRule(GrammarFileName, "anonymous_function_define"); }
		return retval;

	}
	// $ANTLR end "anonymous_function_define"

	partial void EnterRule_parameterDeclarationList();
	partial void LeaveRule_parameterDeclarationList();

	// $ANTLR start "parameterDeclarationList"
	// C:\\work\\ReoScript\\ReoScript.g:88:1: parameterDeclarationList : IDENTIFIER ( COMMA ! IDENTIFIER )* ;
	[GrammarRule("parameterDeclarationList")]
	private AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationList()
	{
		EnterRule_parameterDeclarationList();
		EnterRule("parameterDeclarationList", 5);
		TraceIn("parameterDeclarationList", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER24 = default(IToken);
		IToken COMMA25 = default(IToken);
		IToken IDENTIFIER26 = default(IToken);

		CommonTree IDENTIFIER24_tree = default(CommonTree);
		CommonTree COMMA25_tree = default(CommonTree);
		CommonTree IDENTIFIER26_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "parameterDeclarationList");
		DebugLocation(88, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:89:2: ( IDENTIFIER ( COMMA ! IDENTIFIER )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:89:4: IDENTIFIER ( COMMA ! IDENTIFIER )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(89, 4);
			IDENTIFIER24=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_parameterDeclarationList688); 
			IDENTIFIER24_tree = (CommonTree)adaptor.Create(IDENTIFIER24);
			adaptor.AddChild(root_0, IDENTIFIER24_tree);
			DebugLocation(89, 15);
			// C:\\work\\ReoScript\\ReoScript.g:89:15: ( COMMA ! IDENTIFIER )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==COMMA))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:89:16: COMMA ! IDENTIFIER
					{
					DebugLocation(89, 21);
					COMMA25=(IToken)Match(input,COMMA,Follow._COMMA_in_parameterDeclarationList691); 
					DebugLocation(89, 23);
					IDENTIFIER26=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_parameterDeclarationList694); 
					IDENTIFIER26_tree = (CommonTree)adaptor.Create(IDENTIFIER26);
					adaptor.AddChild(root_0, IDENTIFIER26_tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameterDeclarationList", 5);
			LeaveRule("parameterDeclarationList", 5);
			LeaveRule_parameterDeclarationList();
		}
		DebugLocation(90, 1);
		} finally { DebugExitRule(GrammarFileName, "parameterDeclarationList"); }
		return retval;

	}
	// $ANTLR end "parameterDeclarationList"

	partial void EnterRule_block();
	partial void LeaveRule_block();

	// $ANTLR start "block"
	// C:\\work\\ReoScript\\ReoScript.g:92:1: block : '{' ( statement )* '}' -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 6);
		TraceIn("block", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal27 = default(IToken);
		IToken char_literal29 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> statement28 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal27_tree = default(CommonTree);
		CommonTree char_literal29_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(92, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:93:2: ( '{' ( statement )* '}' -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:93:4: '{' ( statement )* '}'
			{
			DebugLocation(93, 4);
			char_literal27=(IToken)Match(input,LCURLY,Follow._LCURLY_in_block707);  
			stream_LCURLY.Add(char_literal27);

			DebugLocation(93, 8);
			// C:\\work\\ReoScript\\ReoScript.g:93:8: ( statement )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==BINARY_LITERATE||LA11_0==DECREMENT||LA11_0==FALSE||(LA11_0>=HEX_LITERATE && LA11_0<=IDENTIFIER)||LA11_0==INCREMENT||(LA11_0>=LBRACE && LA11_0<=LCURLY)||LA11_0==LPAREN||(LA11_0>=NULL && LA11_0<=NUMBER_LITERATE)||LA11_0==SCOPE_MODIFIER||LA11_0==STRING_LITERATE||(LA11_0>=THIS && LA11_0<=TYPE)||LA11_0==UNDEFINED||LA11_0==110||(LA11_0>=112 && LA11_0<=113)||(LA11_0>=115 && LA11_0<=119)||(LA11_0>=122 && LA11_0<=124)||LA11_0==126))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:93:8: statement
					{
					DebugLocation(93, 8);
					PushFollow(Follow._statement_in_block709);
					statement28=statement();
					PopFollow();

					stream_statement.Add(statement28.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(93, 19);
			char_literal29=(IToken)Match(input,RCURLY,Follow._RCURLY_in_block712);  
			stream_RCURLY.Add(char_literal29);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 94:3: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(94, 6);
				// C:\\work\\ReoScript\\ReoScript.g:94:6: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(94, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(94, 14);
				// C:\\work\\ReoScript\\ReoScript.g:94:14: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(94, 14);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 6);
			LeaveRule("block", 6);
			LeaveRule_block();
		}
		DebugLocation(95, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_class_define();
	partial void LeaveRule_class_define();

	// $ANTLR start "class_define"
	// C:\\work\\ReoScript\\ReoScript.g:97:1: class_define : 'class' IDENTIFIER ( ':' ( IDENTIFIER ':' )? IDENTIFIER )? '{' ( localMemberVariableDeclaration SEMI !| function_define ( SEMI !)? )* '}' ;
	[GrammarRule("class_define")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_define()
	{
		EnterRule_class_define();
		EnterRule("class_define", 7);
		TraceIn("class_define", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal30 = default(IToken);
		IToken IDENTIFIER31 = default(IToken);
		IToken char_literal32 = default(IToken);
		IToken IDENTIFIER33 = default(IToken);
		IToken char_literal34 = default(IToken);
		IToken IDENTIFIER35 = default(IToken);
		IToken char_literal36 = default(IToken);
		IToken SEMI38 = default(IToken);
		IToken SEMI40 = default(IToken);
		IToken char_literal41 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localMemberVariableDeclaration37 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> function_define39 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal30_tree = default(CommonTree);
		CommonTree IDENTIFIER31_tree = default(CommonTree);
		CommonTree char_literal32_tree = default(CommonTree);
		CommonTree IDENTIFIER33_tree = default(CommonTree);
		CommonTree char_literal34_tree = default(CommonTree);
		CommonTree IDENTIFIER35_tree = default(CommonTree);
		CommonTree char_literal36_tree = default(CommonTree);
		CommonTree SEMI38_tree = default(CommonTree);
		CommonTree SEMI40_tree = default(CommonTree);
		CommonTree char_literal41_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "class_define");
		DebugLocation(97, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:98:2: ( 'class' IDENTIFIER ( ':' ( IDENTIFIER ':' )? IDENTIFIER )? '{' ( localMemberVariableDeclaration SEMI !| function_define ( SEMI !)? )* '}' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:98:4: 'class' IDENTIFIER ( ':' ( IDENTIFIER ':' )? IDENTIFIER )? '{' ( localMemberVariableDeclaration SEMI !| function_define ( SEMI !)? )* '}'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(98, 4);
			string_literal30=(IToken)Match(input,112,Follow._112_in_class_define735); 
			string_literal30_tree = (CommonTree)adaptor.Create(string_literal30);
			adaptor.AddChild(root_0, string_literal30_tree);
			DebugLocation(98, 12);
			IDENTIFIER31=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_class_define737); 
			IDENTIFIER31_tree = (CommonTree)adaptor.Create(IDENTIFIER31);
			adaptor.AddChild(root_0, IDENTIFIER31_tree);
			DebugLocation(98, 23);
			// C:\\work\\ReoScript\\ReoScript.g:98:23: ( ':' ( IDENTIFIER ':' )? IDENTIFIER )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==COLON))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:98:24: ':' ( IDENTIFIER ':' )? IDENTIFIER
				{
				DebugLocation(98, 24);
				char_literal32=(IToken)Match(input,COLON,Follow._COLON_in_class_define740); 
				char_literal32_tree = (CommonTree)adaptor.Create(char_literal32);
				adaptor.AddChild(root_0, char_literal32_tree);
				DebugLocation(98, 28);
				// C:\\work\\ReoScript\\ReoScript.g:98:28: ( IDENTIFIER ':' )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==IDENTIFIER))
				{
					int LA12_1 = input.LA(2);

					if ((LA12_1==COLON))
					{
						alt12 = 1;
					}
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:98:29: IDENTIFIER ':'
					{
					DebugLocation(98, 29);
					IDENTIFIER33=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_class_define743); 
					IDENTIFIER33_tree = (CommonTree)adaptor.Create(IDENTIFIER33);
					adaptor.AddChild(root_0, IDENTIFIER33_tree);
					DebugLocation(98, 40);
					char_literal34=(IToken)Match(input,COLON,Follow._COLON_in_class_define745); 
					char_literal34_tree = (CommonTree)adaptor.Create(char_literal34);
					adaptor.AddChild(root_0, char_literal34_tree);

					}
					break;

				}
				} finally { DebugExitSubRule(12); }

				DebugLocation(98, 46);
				IDENTIFIER35=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_class_define749); 
				IDENTIFIER35_tree = (CommonTree)adaptor.Create(IDENTIFIER35);
				adaptor.AddChild(root_0, IDENTIFIER35_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(99, 3);
			char_literal36=(IToken)Match(input,LCURLY,Follow._LCURLY_in_class_define755); 
			char_literal36_tree = (CommonTree)adaptor.Create(char_literal36);
			adaptor.AddChild(root_0, char_literal36_tree);
			DebugLocation(100, 4);
			// C:\\work\\ReoScript\\ReoScript.g:100:4: ( localMemberVariableDeclaration SEMI !| function_define ( SEMI !)? )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=3;
				try { DebugEnterDecision(15, false);
				switch (input.LA(1))
				{
				case SCOPE_MODIFIER:
					{
					int LA15_2 = input.LA(2);

					if ((LA15_2==TYPE))
					{
						alt15 = 1;
					}
					else if ((LA15_2==117))
					{
						alt15 = 2;
					}


					}
					break;
				case TYPE:
					{
					alt15 = 1;
					}
					break;
				case 117:
					{
					alt15 = 2;
					}
					break;
				}

				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:101:6: localMemberVariableDeclaration SEMI !
					{
					DebugLocation(101, 6);
					PushFollow(Follow._localMemberVariableDeclaration_in_class_define767);
					localMemberVariableDeclaration37=localMemberVariableDeclaration();
					PopFollow();

					adaptor.AddChild(root_0, localMemberVariableDeclaration37.Tree);
					DebugLocation(101, 41);
					SEMI38=(IToken)Match(input,SEMI,Follow._SEMI_in_class_define769); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:102:6: function_define ( SEMI !)?
					{
					DebugLocation(102, 6);
					PushFollow(Follow._function_define_in_class_define777);
					function_define39=function_define();
					PopFollow();

					adaptor.AddChild(root_0, function_define39.Tree);
					DebugLocation(102, 26);
					// C:\\work\\ReoScript\\ReoScript.g:102:26: ( SEMI !)?
					int alt14=2;
					try { DebugEnterSubRule(14);
					try { DebugEnterDecision(14, false);
					int LA14_0 = input.LA(1);

					if ((LA14_0==SEMI))
					{
						alt14 = 1;
					}
					} finally { DebugExitDecision(14); }
					switch (alt14)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\work\\ReoScript\\ReoScript.g:102:26: SEMI !
						{
						DebugLocation(102, 26);
						SEMI40=(IToken)Match(input,SEMI,Follow._SEMI_in_class_define779); 

						}
						break;

					}
					} finally { DebugExitSubRule(14); }


					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }

			DebugLocation(104, 3);
			char_literal41=(IToken)Match(input,RCURLY,Follow._RCURLY_in_class_define791); 
			char_literal41_tree = (CommonTree)adaptor.Create(char_literal41);
			adaptor.AddChild(root_0, char_literal41_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_define", 7);
			LeaveRule("class_define", 7);
			LeaveRule_class_define();
		}
		DebugLocation(105, 1);
		} finally { DebugExitRule(GrammarFileName, "class_define"); }
		return retval;

	}
	// $ANTLR end "class_define"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// C:\\work\\ReoScript\\ReoScript.g:108:1: public statement : ( importStatement SEMI !| localVariableDeclaration SEMI !| function_define ( SEMI !)? | class_define ( SEMI !)? | embeddedStatement );
	[GrammarRule("statement")]
	public AstParserRuleReturnScope<CommonTree, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 8);
		TraceIn("statement", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken SEMI43 = default(IToken);
		IToken SEMI45 = default(IToken);
		IToken SEMI47 = default(IToken);
		IToken SEMI49 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> importStatement42 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration44 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> function_define46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_define48 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI43_tree = default(CommonTree);
		CommonTree SEMI45_tree = default(CommonTree);
		CommonTree SEMI47_tree = default(CommonTree);
		CommonTree SEMI49_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(108, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:109:2: ( importStatement SEMI !| localVariableDeclaration SEMI !| function_define ( SEMI !)? | class_define ( SEMI !)? | embeddedStatement )
			int alt18=5;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case 119:
				{
				alt18 = 1;
				}
				break;
			case TYPE:
				{
				alt18 = 2;
				}
				break;
			case SCOPE_MODIFIER:
				{
				alt18 = 3;
				}
				break;
			case 117:
				{
				int LA18_4 = input.LA(2);

				if ((LA18_4==IDENTIFIER))
				{
					alt18 = 3;
				}
				else if ((LA18_4==LPAREN))
				{
					alt18 = 5;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 112:
				{
				alt18 = 4;
				}
				break;
			case BINARY_LITERATE:
			case DECREMENT:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case INCREMENT:
			case LBRACE:
			case LCURLY:
			case LPAREN:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case UNDEFINED:
			case 110:
			case 113:
			case 115:
			case 116:
			case 118:
			case 122:
			case 123:
			case 124:
			case 126:
				{
				alt18 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:110:4: importStatement SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(110, 4);
				PushFollow(Follow._importStatement_in_statement809);
				importStatement42=importStatement();
				PopFollow();

				adaptor.AddChild(root_0, importStatement42.Tree);
				DebugLocation(110, 24);
				SEMI43=(IToken)Match(input,SEMI,Follow._SEMI_in_statement811); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:111:4: localVariableDeclaration SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(111, 4);
				PushFollow(Follow._localVariableDeclaration_in_statement817);
				localVariableDeclaration44=localVariableDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, localVariableDeclaration44.Tree);
				DebugLocation(111, 33);
				SEMI45=(IToken)Match(input,SEMI,Follow._SEMI_in_statement819); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:112:4: function_define ( SEMI !)?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(112, 4);
				PushFollow(Follow._function_define_in_statement825);
				function_define46=function_define();
				PopFollow();

				adaptor.AddChild(root_0, function_define46.Tree);
				DebugLocation(112, 24);
				// C:\\work\\ReoScript\\ReoScript.g:112:24: ( SEMI !)?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==SEMI))
				{
					alt16 = 1;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:112:24: SEMI !
					{
					DebugLocation(112, 24);
					SEMI47=(IToken)Match(input,SEMI,Follow._SEMI_in_statement827); 

					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:113:4: class_define ( SEMI !)?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(113, 4);
				PushFollow(Follow._class_define_in_statement834);
				class_define48=class_define();
				PopFollow();

				adaptor.AddChild(root_0, class_define48.Tree);
				DebugLocation(113, 21);
				// C:\\work\\ReoScript\\ReoScript.g:113:21: ( SEMI !)?
				int alt17=2;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==SEMI))
				{
					alt17 = 1;
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:113:21: SEMI !
					{
					DebugLocation(113, 21);
					SEMI49=(IToken)Match(input,SEMI,Follow._SEMI_in_statement836); 

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:114:4: embeddedStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(114, 4);
				PushFollow(Follow._embeddedStatement_in_statement843);
				embeddedStatement50=embeddedStatement();
				PopFollow();

				adaptor.AddChild(root_0, embeddedStatement50.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 8);
			LeaveRule("statement", 8);
			LeaveRule_statement();
		}
		DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_importStatement();
	partial void LeaveRule_importStatement();

	// $ANTLR start "importStatement"
	// C:\\work\\ReoScript\\ReoScript.g:117:1: importStatement : 'import' ( namespace -> ^( IMPORT namespace ) | STRING_LITERATE -> ^( IMPORT STRING_LITERATE ) ) ;
	[GrammarRule("importStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> importStatement()
	{
		EnterRule_importStatement();
		EnterRule("importStatement", 9);
		TraceIn("importStatement", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal51 = default(IToken);
		IToken STRING_LITERATE53 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> namespace52 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal51_tree = default(CommonTree);
		CommonTree STRING_LITERATE53_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERATE=new RewriteRuleITokenStream(adaptor,"token STRING_LITERATE");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_namespace=new RewriteRuleSubtreeStream(adaptor,"rule namespace");
		try { DebugEnterRule(GrammarFileName, "importStatement");
		DebugLocation(117, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:118:2: ( 'import' ( namespace -> ^( IMPORT namespace ) | STRING_LITERATE -> ^( IMPORT STRING_LITERATE ) ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:118:4: 'import' ( namespace -> ^( IMPORT namespace ) | STRING_LITERATE -> ^( IMPORT STRING_LITERATE ) )
			{
			DebugLocation(118, 4);
			string_literal51=(IToken)Match(input,119,Follow._119_in_importStatement854);  
			stream_119.Add(string_literal51);

			DebugLocation(119, 3);
			// C:\\work\\ReoScript\\ReoScript.g:119:3: ( namespace -> ^( IMPORT namespace ) | STRING_LITERATE -> ^( IMPORT STRING_LITERATE ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==IDENTIFIER))
			{
				alt19 = 1;
			}
			else if ((LA19_0==STRING_LITERATE))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:120:5: namespace
				{
				DebugLocation(120, 5);
				PushFollow(Follow._namespace_in_importStatement865);
				namespace52=@namespace();
				PopFollow();

				stream_namespace.Add(namespace52.Tree);


				{
				// AST REWRITE
				// elements: namespace
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 120:18: -> ^( IMPORT namespace )
				{
					DebugLocation(120, 21);
					// C:\\work\\ReoScript\\ReoScript.g:120:21: ^( IMPORT namespace )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(120, 23);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPORT, "IMPORT"), root_1);

					DebugLocation(120, 30);
					adaptor.AddChild(root_1, stream_namespace.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:121:5: STRING_LITERATE
				{
				DebugLocation(121, 5);
				STRING_LITERATE53=(IToken)Match(input,STRING_LITERATE,Follow._STRING_LITERATE_in_importStatement882);  
				stream_STRING_LITERATE.Add(STRING_LITERATE53);



				{
				// AST REWRITE
				// elements: STRING_LITERATE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 121:23: -> ^( IMPORT STRING_LITERATE )
				{
					DebugLocation(121, 26);
					// C:\\work\\ReoScript\\ReoScript.g:121:26: ^( IMPORT STRING_LITERATE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(121, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPORT, "IMPORT"), root_1);

					DebugLocation(121, 35);
					adaptor.AddChild(root_1, stream_STRING_LITERATE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("importStatement", 9);
			LeaveRule("importStatement", 9);
			LeaveRule_importStatement();
		}
		DebugLocation(123, 1);
		} finally { DebugExitRule(GrammarFileName, "importStatement"); }
		return retval;

	}
	// $ANTLR end "importStatement"

	partial void EnterRule_namespace();
	partial void LeaveRule_namespace();

	// $ANTLR start "namespace"
	// C:\\work\\ReoScript\\ReoScript.g:125:1: namespace : IDENTIFIER ( '.' ( IDENTIFIER | '*' ) )* ;
	[GrammarRule("namespace")]
	private AstParserRuleReturnScope<CommonTree, IToken> @namespace()
	{
		EnterRule_namespace();
		EnterRule("namespace", 10);
		TraceIn("namespace", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER54 = default(IToken);
		IToken char_literal55 = default(IToken);
		IToken set56 = default(IToken);

		CommonTree IDENTIFIER54_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		CommonTree set56_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "namespace");
		DebugLocation(125, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:126:2: ( IDENTIFIER ( '.' ( IDENTIFIER | '*' ) )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:126:4: IDENTIFIER ( '.' ( IDENTIFIER | '*' ) )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(126, 4);
			IDENTIFIER54=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_namespace907); 
			IDENTIFIER54_tree = (CommonTree)adaptor.Create(IDENTIFIER54);
			adaptor.AddChild(root_0, IDENTIFIER54_tree);
			DebugLocation(126, 15);
			// C:\\work\\ReoScript\\ReoScript.g:126:15: ( '.' ( IDENTIFIER | '*' ) )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==DOT))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:126:16: '.' ( IDENTIFIER | '*' )
					{
					DebugLocation(126, 16);
					char_literal55=(IToken)Match(input,DOT,Follow._DOT_in_namespace910); 
					char_literal55_tree = (CommonTree)adaptor.Create(char_literal55);
					adaptor.AddChild(root_0, char_literal55_tree);
					DebugLocation(126, 20);

					set56=(IToken)input.LT(1);
					if (input.LA(1)==IDENTIFIER||input.LA(1)==MUL)
					{
						input.Consume();
						adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set56));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace", 10);
			LeaveRule("namespace", 10);
			LeaveRule_namespace();
		}
		DebugLocation(127, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace"); }
		return retval;

	}
	// $ANTLR end "namespace"

	partial void EnterRule_embeddedStatement();
	partial void LeaveRule_embeddedStatement();

	// $ANTLR start "embeddedStatement"
	// C:\\work\\ReoScript\\ReoScript.g:129:1: embeddedStatement : ( block | statementExpression SEMI !| ifelse | forStatement | foreachStatement | whileStatement | switchStatement | terminalStatement );
	[GrammarRule("embeddedStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement()
	{
		EnterRule_embeddedStatement();
		EnterRule("embeddedStatement", 11);
		TraceIn("embeddedStatement", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken SEMI59 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> block57 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpression58 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ifelse60 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forStatement61 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> foreachStatement62 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> whileStatement63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchStatement64 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> terminalStatement65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI59_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "embeddedStatement");
		DebugLocation(129, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:130:2: ( block | statementExpression SEMI !| ifelse | forStatement | foreachStatement | whileStatement | switchStatement | terminalStatement )
			int alt21=8;
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case LCURLY:
				{
				switch (input.LA(2))
				{
				case BINARY_LITERATE:
				case DECREMENT:
				case FALSE:
				case HEX_LITERATE:
				case INCREMENT:
				case LBRACE:
				case LCURLY:
				case LPAREN:
				case NULL:
				case NUMBER_LITERATE:
				case SCOPE_MODIFIER:
				case THIS:
				case TRUE:
				case TYPE:
				case UNDEFINED:
				case 110:
				case 112:
				case 113:
				case 115:
				case 116:
				case 117:
				case 118:
				case 119:
				case 122:
				case 123:
				case 124:
				case 126:
					{
					alt21 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA21_9 = input.LA(3);

					if (((LA21_9>=ASSIGNMENT && LA21_9<=ASSIGN_RSHIFT)||LA21_9==DECREMENT||LA21_9==DOT||LA21_9==INCREMENT||(LA21_9>=LBRACE && LA21_9<=LCURLY)||LA21_9==LPAREN||LA21_9==SEMI||LA21_9==109||LA21_9==121))
					{
						alt21 = 1;
					}
					else if ((LA21_9==COLON))
					{
						alt21 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 21, 9, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case STRING_LITERATE:
					{
					int LA21_10 = input.LA(3);

					if (((LA21_10>=ASSIGNMENT && LA21_10<=ASSIGN_RSHIFT)||LA21_10==DECREMENT||LA21_10==DOT||LA21_10==INCREMENT||(LA21_10>=LBRACE && LA21_10<=LCURLY)||LA21_10==LPAREN||LA21_10==SEMI||LA21_10==121))
					{
						alt21 = 1;
					}
					else if ((LA21_10==COLON))
					{
						alt21 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 21, 10, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case RCURLY:
					{
					switch (input.LA(3))
					{
					case EOF:
					case BINARY_LITERATE:
					case ELSE:
					case FALSE:
					case HEX_LITERATE:
					case IDENTIFIER:
					case LBRACE:
					case LCURLY:
					case LESS_THAN:
					case LPAREN:
					case NULL:
					case NUMBER_LITERATE:
					case RCURLY:
					case SCOPE_MODIFIER:
					case STRING_LITERATE:
					case THIS:
					case TRUE:
					case TYPE:
					case UNDEFINED:
					case 108:
					case 110:
					case 111:
					case 112:
					case 113:
					case 114:
					case 115:
					case 116:
					case 117:
					case 118:
					case 119:
					case 122:
					case 123:
					case 124:
					case 126:
						{
						alt21 = 1;
						}
						break;
					case INCREMENT:
						{
						int LA21_13 = input.LA(4);

						if ((LA21_13==BINARY_LITERATE||LA21_13==FALSE||(LA21_13>=HEX_LITERATE && LA21_13<=IDENTIFIER)||(LA21_13>=LBRACE && LA21_13<=LCURLY)||LA21_13==LPAREN||(LA21_13>=NULL && LA21_13<=NUMBER_LITERATE)||LA21_13==STRING_LITERATE||(LA21_13>=THIS && LA21_13<=TRUE)||LA21_13==UNDEFINED||LA21_13==117))
						{
							alt21 = 1;
						}
						else if ((LA21_13==SEMI))
						{
							alt21 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 21, 13, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case DECREMENT:
						{
						int LA21_14 = input.LA(4);

						if ((LA21_14==BINARY_LITERATE||LA21_14==FALSE||(LA21_14>=HEX_LITERATE && LA21_14<=IDENTIFIER)||(LA21_14>=LBRACE && LA21_14<=LCURLY)||LA21_14==LPAREN||(LA21_14>=NULL && LA21_14<=NUMBER_LITERATE)||LA21_14==STRING_LITERATE||(LA21_14>=THIS && LA21_14<=TRUE)||LA21_14==UNDEFINED||LA21_14==117))
						{
							alt21 = 1;
						}
						else if ((LA21_14==SEMI))
						{
							alt21 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 21, 14, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case ASSIGNMENT:
					case ASSIGN_AND:
					case ASSIGN_DIV:
					case ASSIGN_LSHIFT:
					case ASSIGN_MINUS:
					case ASSIGN_MUL:
					case ASSIGN_OR:
					case ASSIGN_PLUS:
					case ASSIGN_REM:
					case ASSIGN_REV:
					case ASSIGN_RSHIFT:
					case DOT:
					case SEMI:
					case 121:
						{
						alt21 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 21, 11, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case COMMA:
					{
					alt21 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 21, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case BINARY_LITERATE:
			case DECREMENT:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case INCREMENT:
			case LBRACE:
			case LPAREN:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case UNDEFINED:
			case 115:
			case 117:
			case 122:
				{
				alt21 = 2;
				}
				break;
			case 118:
				{
				alt21 = 3;
				}
				break;
			case 116:
				{
				int LA21_4 = input.LA(2);

				if ((LA21_4==LPAREN))
				{
					switch (input.LA(3))
					{
					case TYPE:
						{
						int LA21_15 = input.LA(4);

						if ((LA21_15==IDENTIFIER))
						{
							int LA21_18 = input.LA(5);

							if ((LA21_18==120))
							{
								alt21 = 5;
							}
							else if ((LA21_18==ASSIGNMENT||LA21_18==COMMA||LA21_18==SEMI))
							{
								alt21 = 4;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 21, 18, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 21, 15, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IDENTIFIER:
						{
						int LA21_16 = input.LA(4);

						if (((LA21_16>=ASSIGNMENT && LA21_16<=ASSIGN_RSHIFT)||LA21_16==COMMA||LA21_16==DECREMENT||LA21_16==DOT||LA21_16==INCREMENT||(LA21_16>=LBRACE && LA21_16<=LCURLY)||LA21_16==LPAREN||LA21_16==SEMI||LA21_16==109||LA21_16==121))
						{
							alt21 = 4;
						}
						else if ((LA21_16==120))
						{
							alt21 = 5;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 21, 16, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case BINARY_LITERATE:
					case DECREMENT:
					case FALSE:
					case HEX_LITERATE:
					case INCREMENT:
					case LBRACE:
					case LCURLY:
					case LPAREN:
					case NULL:
					case NUMBER_LITERATE:
					case SEMI:
					case STRING_LITERATE:
					case THIS:
					case TRUE:
					case UNDEFINED:
					case 115:
					case 117:
					case 122:
						{
						alt21 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 21, 12, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 21, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 126:
				{
				alt21 = 6;
				}
				break;
			case 124:
				{
				alt21 = 7;
				}
				break;
			case 110:
			case 113:
			case 123:
				{
				alt21 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:131:4: block
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(131, 4);
				PushFollow(Follow._block_in_embeddedStatement933);
				block57=block();
				PopFollow();

				adaptor.AddChild(root_0, block57.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:132:4: statementExpression SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(132, 4);
				PushFollow(Follow._statementExpression_in_embeddedStatement938);
				statementExpression58=statementExpression();
				PopFollow();

				adaptor.AddChild(root_0, statementExpression58.Tree);
				DebugLocation(132, 28);
				SEMI59=(IToken)Match(input,SEMI,Follow._SEMI_in_embeddedStatement940); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:133:4: ifelse
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(133, 4);
				PushFollow(Follow._ifelse_in_embeddedStatement946);
				ifelse60=ifelse();
				PopFollow();

				adaptor.AddChild(root_0, ifelse60.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:134:4: forStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(134, 4);
				PushFollow(Follow._forStatement_in_embeddedStatement951);
				forStatement61=forStatement();
				PopFollow();

				adaptor.AddChild(root_0, forStatement61.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:135:4: foreachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(135, 4);
				PushFollow(Follow._foreachStatement_in_embeddedStatement956);
				foreachStatement62=foreachStatement();
				PopFollow();

				adaptor.AddChild(root_0, foreachStatement62.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\work\\ReoScript\\ReoScript.g:136:4: whileStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(136, 4);
				PushFollow(Follow._whileStatement_in_embeddedStatement961);
				whileStatement63=whileStatement();
				PopFollow();

				adaptor.AddChild(root_0, whileStatement63.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\work\\ReoScript\\ReoScript.g:137:4: switchStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(137, 4);
				PushFollow(Follow._switchStatement_in_embeddedStatement966);
				switchStatement64=switchStatement();
				PopFollow();

				adaptor.AddChild(root_0, switchStatement64.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\work\\ReoScript\\ReoScript.g:138:4: terminalStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(138, 4);
				PushFollow(Follow._terminalStatement_in_embeddedStatement971);
				terminalStatement65=terminalStatement();
				PopFollow();

				adaptor.AddChild(root_0, terminalStatement65.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("embeddedStatement", 11);
			LeaveRule("embeddedStatement", 11);
			LeaveRule_embeddedStatement();
		}
		DebugLocation(139, 1);
		} finally { DebugExitRule(GrammarFileName, "embeddedStatement"); }
		return retval;

	}
	// $ANTLR end "embeddedStatement"

	partial void EnterRule_statementExpression();
	partial void LeaveRule_statementExpression();

	// $ANTLR start "statementExpression"
	// C:\\work\\ReoScript\\ReoScript.g:141:1: statementExpression : ( invocationExpression | 'new' primaryExpression -> ^( CREATE primaryExpression ) | 'delete' primaryExpression -> ^( DELETE primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) );
	[GrammarRule("statementExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> statementExpression()
	{
		EnterRule_statementExpression();
		EnterRule("statementExpression", 12);
		TraceIn("statementExpression", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal67 = default(IToken);
		IToken string_literal69 = default(IToken);
		IToken string_literal71 = default(IToken);
		IToken string_literal73 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> invocationExpression66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression72 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression74 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal67_tree = default(CommonTree);
		CommonTree string_literal69_tree = default(CommonTree);
		CommonTree string_literal71_tree = default(CommonTree);
		CommonTree string_literal73_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INCREMENT=new RewriteRuleITokenStream(adaptor,"token INCREMENT");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_DECREMENT=new RewriteRuleITokenStream(adaptor,"token DECREMENT");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "statementExpression");
		DebugLocation(141, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:142:2: ( invocationExpression | 'new' primaryExpression -> ^( CREATE primaryExpression ) | 'delete' primaryExpression -> ^( DELETE primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) )
			int alt22=5;
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case BINARY_LITERATE:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case LBRACE:
			case LCURLY:
			case LPAREN:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case UNDEFINED:
			case 117:
				{
				alt22 = 1;
				}
				break;
			case 122:
				{
				alt22 = 2;
				}
				break;
			case 115:
				{
				alt22 = 3;
				}
				break;
			case INCREMENT:
				{
				alt22 = 4;
				}
				break;
			case DECREMENT:
				{
				alt22 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:144:2: invocationExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(144, 2);
				PushFollow(Follow._invocationExpression_in_statementExpression986);
				invocationExpression66=invocationExpression();
				PopFollow();

				adaptor.AddChild(root_0, invocationExpression66.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:145:4: 'new' primaryExpression
				{
				DebugLocation(145, 4);
				string_literal67=(IToken)Match(input,122,Follow._122_in_statementExpression991);  
				stream_122.Add(string_literal67);

				DebugLocation(145, 10);
				PushFollow(Follow._primaryExpression_in_statementExpression993);
				primaryExpression68=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression68.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 146:3: -> ^( CREATE primaryExpression )
				{
					DebugLocation(146, 6);
					// C:\\work\\ReoScript\\ReoScript.g:146:6: ^( CREATE primaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(146, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CREATE, "CREATE"), root_1);

					DebugLocation(146, 15);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:147:4: 'delete' primaryExpression
				{
				DebugLocation(147, 4);
				string_literal69=(IToken)Match(input,115,Follow._115_in_statementExpression1008);  
				stream_115.Add(string_literal69);

				DebugLocation(147, 13);
				PushFollow(Follow._primaryExpression_in_statementExpression1010);
				primaryExpression70=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression70.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 148:3: -> ^( DELETE primaryExpression )
				{
					DebugLocation(148, 6);
					// C:\\work\\ReoScript\\ReoScript.g:148:6: ^( DELETE primaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(148, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DELETE, "DELETE"), root_1);

					DebugLocation(148, 15);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:149:4: '++' primaryExpression
				{
				DebugLocation(149, 4);
				string_literal71=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_statementExpression1026);  
				stream_INCREMENT.Add(string_literal71);

				DebugLocation(149, 9);
				PushFollow(Follow._primaryExpression_in_statementExpression1028);
				primaryExpression72=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression72.Tree);


				{
				// AST REWRITE
				// elements: INCREMENT, primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 150:3: -> ^( PRE_UNARY_STEP primaryExpression '++' )
				{
					DebugLocation(150, 6);
					// C:\\work\\ReoScript\\ReoScript.g:150:6: ^( PRE_UNARY_STEP primaryExpression '++' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(150, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(150, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(150, 41);
					adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:151:4: '--' primaryExpression
				{
				DebugLocation(151, 4);
				string_literal73=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_statementExpression1045);  
				stream_DECREMENT.Add(string_literal73);

				DebugLocation(151, 9);
				PushFollow(Follow._primaryExpression_in_statementExpression1047);
				primaryExpression74=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression74.Tree);


				{
				// AST REWRITE
				// elements: DECREMENT, primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 152:3: -> ^( PRE_UNARY_STEP primaryExpression '--' )
				{
					DebugLocation(152, 6);
					// C:\\work\\ReoScript\\ReoScript.g:152:6: ^( PRE_UNARY_STEP primaryExpression '--' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(152, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(152, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(152, 41);
					adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statementExpression", 12);
			LeaveRule("statementExpression", 12);
			LeaveRule_statementExpression();
		}
		DebugLocation(153, 1);
		} finally { DebugExitRule(GrammarFileName, "statementExpression"); }
		return retval;

	}
	// $ANTLR end "statementExpression"

	partial void EnterRule_localMemberVariableDeclaration();
	partial void LeaveRule_localMemberVariableDeclaration();

	// $ANTLR start "localMemberVariableDeclaration"
	// C:\\work\\ReoScript\\ReoScript.g:155:1: localMemberVariableDeclaration : ( SCOPE_MODIFIER )? TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( MEMBER_DECLARATION ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ( SCOPE_MODIFIER )? ) ;
	[GrammarRule("localMemberVariableDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> localMemberVariableDeclaration()
	{
		EnterRule_localMemberVariableDeclaration();
		EnterRule("localMemberVariableDeclaration", 13);
		TraceIn("localMemberVariableDeclaration", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken SCOPE_MODIFIER75 = default(IToken);
		IToken TYPE76 = default(IToken);
		IToken char_literal78 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment77 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment79 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SCOPE_MODIFIER75_tree = default(CommonTree);
		CommonTree TYPE76_tree = default(CommonTree);
		CommonTree char_literal78_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SCOPE_MODIFIER=new RewriteRuleITokenStream(adaptor,"token SCOPE_MODIFIER");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_localVariableDeclarationAssignment=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclarationAssignment");
		try { DebugEnterRule(GrammarFileName, "localMemberVariableDeclaration");
		DebugLocation(155, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:156:2: ( ( SCOPE_MODIFIER )? TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( MEMBER_DECLARATION ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ( SCOPE_MODIFIER )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:156:4: ( SCOPE_MODIFIER )? TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )*
			{
			DebugLocation(156, 4);
			// C:\\work\\ReoScript\\ReoScript.g:156:4: ( SCOPE_MODIFIER )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==SCOPE_MODIFIER))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:156:4: SCOPE_MODIFIER
				{
				DebugLocation(156, 4);
				SCOPE_MODIFIER75=(IToken)Match(input,SCOPE_MODIFIER,Follow._SCOPE_MODIFIER_in_localMemberVariableDeclaration1070);  
				stream_SCOPE_MODIFIER.Add(SCOPE_MODIFIER75);


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(156, 20);
			TYPE76=(IToken)Match(input,TYPE,Follow._TYPE_in_localMemberVariableDeclaration1073);  
			stream_TYPE.Add(TYPE76);

			DebugLocation(156, 25);
			PushFollow(Follow._localVariableDeclarationAssignment_in_localMemberVariableDeclaration1075);
			localVariableDeclarationAssignment77=localVariableDeclarationAssignment();
			PopFollow();

			stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment77.Tree);
			DebugLocation(156, 60);
			// C:\\work\\ReoScript\\ReoScript.g:156:60: ( ',' localVariableDeclarationAssignment )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==COMMA))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:156:61: ',' localVariableDeclarationAssignment
					{
					DebugLocation(156, 61);
					char_literal78=(IToken)Match(input,COMMA,Follow._COMMA_in_localMemberVariableDeclaration1078);  
					stream_COMMA.Add(char_literal78);

					DebugLocation(156, 65);
					PushFollow(Follow._localVariableDeclarationAssignment_in_localMemberVariableDeclaration1080);
					localVariableDeclarationAssignment79=localVariableDeclarationAssignment();
					PopFollow();

					stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment79.Tree);

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: SCOPE_MODIFIER, TYPE, localVariableDeclarationAssignment
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 157:3: -> ^( MEMBER_DECLARATION ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ( SCOPE_MODIFIER )? )
			{
				DebugLocation(157, 6);
				// C:\\work\\ReoScript\\ReoScript.g:157:6: ^( MEMBER_DECLARATION ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ( SCOPE_MODIFIER )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(157, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MEMBER_DECLARATION, "MEMBER_DECLARATION"), root_1);

				DebugLocation(157, 27);
				// C:\\work\\ReoScript\\ReoScript.g:157:27: ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(157, 29);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DECLARATION, "DECLARATION"), root_2);

				DebugLocation(157, 41);
				adaptor.AddChild(root_2, stream_TYPE.NextNode());
				DebugLocation(157, 46);
				if (!(stream_localVariableDeclarationAssignment.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_localVariableDeclarationAssignment.HasNext )
				{
					DebugLocation(157, 46);
					adaptor.AddChild(root_2, stream_localVariableDeclarationAssignment.NextTree());

				}
				stream_localVariableDeclarationAssignment.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(157, 83);
				// C:\\work\\ReoScript\\ReoScript.g:157:83: ( SCOPE_MODIFIER )?
				if (stream_SCOPE_MODIFIER.HasNext)
				{
					DebugLocation(157, 83);
					adaptor.AddChild(root_1, stream_SCOPE_MODIFIER.NextNode());

				}
				stream_SCOPE_MODIFIER.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localMemberVariableDeclaration", 13);
			LeaveRule("localMemberVariableDeclaration", 13);
			LeaveRule_localMemberVariableDeclaration();
		}
		DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "localMemberVariableDeclaration"); }
		return retval;

	}
	// $ANTLR end "localMemberVariableDeclaration"

	partial void EnterRule_localVariableDeclaration();
	partial void LeaveRule_localVariableDeclaration();

	// $ANTLR start "localVariableDeclaration"
	// C:\\work\\ReoScript\\ReoScript.g:160:1: localVariableDeclaration : TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ;
	[GrammarRule("localVariableDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration()
	{
		EnterRule_localVariableDeclaration();
		EnterRule("localVariableDeclaration", 14);
		TraceIn("localVariableDeclaration", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken TYPE80 = default(IToken);
		IToken char_literal82 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment83 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree TYPE80_tree = default(CommonTree);
		CommonTree char_literal82_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_localVariableDeclarationAssignment=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclarationAssignment");
		try { DebugEnterRule(GrammarFileName, "localVariableDeclaration");
		DebugLocation(160, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:161:2: ( TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:161:4: TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )*
			{
			DebugLocation(161, 4);
			TYPE80=(IToken)Match(input,TYPE,Follow._TYPE_in_localVariableDeclaration1114);  
			stream_TYPE.Add(TYPE80);

			DebugLocation(161, 9);
			PushFollow(Follow._localVariableDeclarationAssignment_in_localVariableDeclaration1116);
			localVariableDeclarationAssignment81=localVariableDeclarationAssignment();
			PopFollow();

			stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment81.Tree);
			DebugLocation(161, 44);
			// C:\\work\\ReoScript\\ReoScript.g:161:44: ( ',' localVariableDeclarationAssignment )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==COMMA))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:161:45: ',' localVariableDeclarationAssignment
					{
					DebugLocation(161, 45);
					char_literal82=(IToken)Match(input,COMMA,Follow._COMMA_in_localVariableDeclaration1119);  
					stream_COMMA.Add(char_literal82);

					DebugLocation(161, 49);
					PushFollow(Follow._localVariableDeclarationAssignment_in_localVariableDeclaration1121);
					localVariableDeclarationAssignment83=localVariableDeclarationAssignment();
					PopFollow();

					stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment83.Tree);

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }



			{
			// AST REWRITE
			// elements: localVariableDeclarationAssignment, TYPE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 162:3: -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ )
			{
				DebugLocation(162, 6);
				// C:\\work\\ReoScript\\ReoScript.g:162:6: ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(162, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DECLARATION, "DECLARATION"), root_1);

				DebugLocation(162, 20);
				adaptor.AddChild(root_1, stream_TYPE.NextNode());
				DebugLocation(162, 25);
				if (!(stream_localVariableDeclarationAssignment.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_localVariableDeclarationAssignment.HasNext )
				{
					DebugLocation(162, 25);
					adaptor.AddChild(root_1, stream_localVariableDeclarationAssignment.NextTree());

				}
				stream_localVariableDeclarationAssignment.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclaration", 14);
			LeaveRule("localVariableDeclaration", 14);
			LeaveRule_localVariableDeclaration();
		}
		DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclaration"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclaration"

	partial void EnterRule_localVariableDeclarationAssignment();
	partial void LeaveRule_localVariableDeclarationAssignment();

	// $ANTLR start "localVariableDeclarationAssignment"
	// C:\\work\\ReoScript\\ReoScript.g:165:1: localVariableDeclarationAssignment : IDENTIFIER ( '=' expression )? -> ^( LOCAL_DECLARE_ASSIGNMENT IDENTIFIER ( expression )? ) ;
	[GrammarRule("localVariableDeclarationAssignment")]
	private AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment()
	{
		EnterRule_localVariableDeclarationAssignment();
		EnterRule("localVariableDeclarationAssignment", 15);
		TraceIn("localVariableDeclarationAssignment", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER84 = default(IToken);
		IToken char_literal85 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression86 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENTIFIER84_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGNMENT=new RewriteRuleITokenStream(adaptor,"token ASSIGNMENT");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "localVariableDeclarationAssignment");
		DebugLocation(165, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:166:2: ( IDENTIFIER ( '=' expression )? -> ^( LOCAL_DECLARE_ASSIGNMENT IDENTIFIER ( expression )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:166:4: IDENTIFIER ( '=' expression )?
			{
			DebugLocation(166, 4);
			IDENTIFIER84=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_localVariableDeclarationAssignment1147);  
			stream_IDENTIFIER.Add(IDENTIFIER84);

			DebugLocation(166, 15);
			// C:\\work\\ReoScript\\ReoScript.g:166:15: ( '=' expression )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==ASSIGNMENT))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:166:16: '=' expression
				{
				DebugLocation(166, 16);
				char_literal85=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_localVariableDeclarationAssignment1150);  
				stream_ASSIGNMENT.Add(char_literal85);

				DebugLocation(166, 20);
				PushFollow(Follow._expression_in_localVariableDeclarationAssignment1152);
				expression86=expression();
				PopFollow();

				stream_expression.Add(expression86.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }



			{
			// AST REWRITE
			// elements: IDENTIFIER, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 167:3: -> ^( LOCAL_DECLARE_ASSIGNMENT IDENTIFIER ( expression )? )
			{
				DebugLocation(167, 6);
				// C:\\work\\ReoScript\\ReoScript.g:167:6: ^( LOCAL_DECLARE_ASSIGNMENT IDENTIFIER ( expression )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(167, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LOCAL_DECLARE_ASSIGNMENT, "LOCAL_DECLARE_ASSIGNMENT"), root_1);

				DebugLocation(167, 33);
				adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());
				DebugLocation(167, 44);
				// C:\\work\\ReoScript\\ReoScript.g:167:44: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(167, 44);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclarationAssignment", 15);
			LeaveRule("localVariableDeclarationAssignment", 15);
			LeaveRule_localVariableDeclarationAssignment();
		}
		DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclarationAssignment"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclarationAssignment"

	partial void EnterRule_invocationExpression();
	partial void LeaveRule_invocationExpression();

	// $ANTLR start "invocationExpression"
	// C:\\work\\ReoScript\\ReoScript.g:170:1: invocationExpression : id= primaryExpression ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | 'instanceof' expression -> ^( INSTANCEOF expression ) | -> primaryExpression ) ;
	[GrammarRule("invocationExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> invocationExpression()
	{
		EnterRule_invocationExpression();
		EnterRule("invocationExpression", 16);
		TraceIn("invocationExpression", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal87 = default(IToken);
		IToken string_literal89 = default(IToken);
		IToken string_literal91 = default(IToken);
		IToken string_literal93 = default(IToken);
		IToken string_literal95 = default(IToken);
		IToken string_literal97 = default(IToken);
		IToken string_literal99 = default(IToken);
		IToken string_literal101 = default(IToken);
		IToken string_literal103 = default(IToken);
		IToken string_literal105 = default(IToken);
		IToken string_literal107 = default(IToken);
		IToken string_literal109 = default(IToken);
		IToken string_literal110 = default(IToken);
		IToken string_literal111 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> id = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression88 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression90 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression92 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression94 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression96 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression98 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression104 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression112 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal87_tree = default(CommonTree);
		CommonTree string_literal89_tree = default(CommonTree);
		CommonTree string_literal91_tree = default(CommonTree);
		CommonTree string_literal93_tree = default(CommonTree);
		CommonTree string_literal95_tree = default(CommonTree);
		CommonTree string_literal97_tree = default(CommonTree);
		CommonTree string_literal99_tree = default(CommonTree);
		CommonTree string_literal101_tree = default(CommonTree);
		CommonTree string_literal103_tree = default(CommonTree);
		CommonTree string_literal105_tree = default(CommonTree);
		CommonTree string_literal107_tree = default(CommonTree);
		CommonTree string_literal109_tree = default(CommonTree);
		CommonTree string_literal110_tree = default(CommonTree);
		CommonTree string_literal111_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INCREMENT=new RewriteRuleITokenStream(adaptor,"token INCREMENT");
		RewriteRuleITokenStream stream_ASSIGN_OR=new RewriteRuleITokenStream(adaptor,"token ASSIGN_OR");
		RewriteRuleITokenStream stream_ASSIGN_MUL=new RewriteRuleITokenStream(adaptor,"token ASSIGN_MUL");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_ASSIGN_LSHIFT=new RewriteRuleITokenStream(adaptor,"token ASSIGN_LSHIFT");
		RewriteRuleITokenStream stream_ASSIGN_REM=new RewriteRuleITokenStream(adaptor,"token ASSIGN_REM");
		RewriteRuleITokenStream stream_ASSIGN_REV=new RewriteRuleITokenStream(adaptor,"token ASSIGN_REV");
		RewriteRuleITokenStream stream_ASSIGN_AND=new RewriteRuleITokenStream(adaptor,"token ASSIGN_AND");
		RewriteRuleITokenStream stream_ASSIGN_PLUS=new RewriteRuleITokenStream(adaptor,"token ASSIGN_PLUS");
		RewriteRuleITokenStream stream_ASSIGN_RSHIFT=new RewriteRuleITokenStream(adaptor,"token ASSIGN_RSHIFT");
		RewriteRuleITokenStream stream_ASSIGNMENT=new RewriteRuleITokenStream(adaptor,"token ASSIGNMENT");
		RewriteRuleITokenStream stream_DECREMENT=new RewriteRuleITokenStream(adaptor,"token DECREMENT");
		RewriteRuleITokenStream stream_ASSIGN_MINUS=new RewriteRuleITokenStream(adaptor,"token ASSIGN_MINUS");
		RewriteRuleITokenStream stream_ASSIGN_DIV=new RewriteRuleITokenStream(adaptor,"token ASSIGN_DIV");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "invocationExpression");
		DebugLocation(170, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:171:2: (id= primaryExpression ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | 'instanceof' expression -> ^( INSTANCEOF expression ) | -> primaryExpression ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:172:4: id= primaryExpression ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | 'instanceof' expression -> ^( INSTANCEOF expression ) | -> primaryExpression )
			{
			DebugLocation(172, 6);
			PushFollow(Follow._primaryExpression_in_invocationExpression1184);
			id=primaryExpression();
			PopFollow();

			stream_primaryExpression.Add(id.Tree);
			DebugLocation(173, 4);
			// C:\\work\\ReoScript\\ReoScript.g:173:4: ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | 'instanceof' expression -> ^( INSTANCEOF expression ) | -> primaryExpression )
			int alt27=15;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			switch (input.LA(1))
			{
			case ASSIGNMENT:
				{
				alt27 = 1;
				}
				break;
			case ASSIGN_PLUS:
				{
				alt27 = 2;
				}
				break;
			case ASSIGN_MINUS:
				{
				alt27 = 3;
				}
				break;
			case ASSIGN_MUL:
				{
				alt27 = 4;
				}
				break;
			case ASSIGN_DIV:
				{
				alt27 = 5;
				}
				break;
			case ASSIGN_REM:
				{
				alt27 = 6;
				}
				break;
			case ASSIGN_AND:
				{
				alt27 = 7;
				}
				break;
			case ASSIGN_OR:
				{
				alt27 = 8;
				}
				break;
			case ASSIGN_REV:
				{
				alt27 = 9;
				}
				break;
			case ASSIGN_LSHIFT:
				{
				alt27 = 10;
				}
				break;
			case ASSIGN_RSHIFT:
				{
				alt27 = 11;
				}
				break;
			case INCREMENT:
				{
				alt27 = 12;
				}
				break;
			case DECREMENT:
				{
				alt27 = 13;
				}
				break;
			case 121:
				{
				alt27 = 14;
				}
				break;
			case COMMA:
			case RPAREN:
			case SEMI:
				{
				alt27 = 15;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:174:5: '=' expression
				{
				DebugLocation(174, 5);
				char_literal87=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_invocationExpression1195);  
				stream_ASSIGNMENT.Add(char_literal87);

				DebugLocation(174, 9);
				PushFollow(Follow._expression_in_invocationExpression1197);
				expression88=expression();
				PopFollow();

				stream_expression.Add(expression88.Tree);


				{
				// AST REWRITE
				// elements: expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 174:21: -> ^( ASSIGNMENT $id expression )
				{
					DebugLocation(174, 24);
					// C:\\work\\ReoScript\\ReoScript.g:174:24: ^( ASSIGNMENT $id expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(174, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(174, 38);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(174, 41);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:175:6: '+=' expression
				{
				DebugLocation(175, 6);
				string_literal89=(IToken)Match(input,ASSIGN_PLUS,Follow._ASSIGN_PLUS_in_invocationExpression1216);  
				stream_ASSIGN_PLUS.Add(string_literal89);

				DebugLocation(175, 11);
				PushFollow(Follow._expression_in_invocationExpression1218);
				expression90=expression();
				PopFollow();

				stream_expression.Add(expression90.Tree);


				{
				// AST REWRITE
				// elements: id, id, expression
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 175:23: -> ^( ASSIGNMENT $id ^( PLUS $id expression ) )
				{
					DebugLocation(175, 26);
					// C:\\work\\ReoScript\\ReoScript.g:175:26: ^( ASSIGNMENT $id ^( PLUS $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(175, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(175, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(175, 43);
					// C:\\work\\ReoScript\\ReoScript.g:175:43: ^( PLUS $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(175, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PLUS, "PLUS"), root_2);

					DebugLocation(175, 51);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(175, 54);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:176:6: '-=' expression
				{
				DebugLocation(176, 6);
				string_literal91=(IToken)Match(input,ASSIGN_MINUS,Follow._ASSIGN_MINUS_in_invocationExpression1244);  
				stream_ASSIGN_MINUS.Add(string_literal91);

				DebugLocation(176, 11);
				PushFollow(Follow._expression_in_invocationExpression1246);
				expression92=expression();
				PopFollow();

				stream_expression.Add(expression92.Tree);


				{
				// AST REWRITE
				// elements: expression, id, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 176:23: -> ^( ASSIGNMENT $id ^( MINUS $id expression ) )
				{
					DebugLocation(176, 26);
					// C:\\work\\ReoScript\\ReoScript.g:176:26: ^( ASSIGNMENT $id ^( MINUS $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(176, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(176, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(176, 43);
					// C:\\work\\ReoScript\\ReoScript.g:176:43: ^( MINUS $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(176, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MINUS, "MINUS"), root_2);

					DebugLocation(176, 52);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(176, 55);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:177:6: '*=' expression
				{
				DebugLocation(177, 6);
				string_literal93=(IToken)Match(input,ASSIGN_MUL,Follow._ASSIGN_MUL_in_invocationExpression1272);  
				stream_ASSIGN_MUL.Add(string_literal93);

				DebugLocation(177, 11);
				PushFollow(Follow._expression_in_invocationExpression1274);
				expression94=expression();
				PopFollow();

				stream_expression.Add(expression94.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 177:23: -> ^( ASSIGNMENT $id ^( MUL $id expression ) )
				{
					DebugLocation(177, 26);
					// C:\\work\\ReoScript\\ReoScript.g:177:26: ^( ASSIGNMENT $id ^( MUL $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(177, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(177, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(177, 43);
					// C:\\work\\ReoScript\\ReoScript.g:177:43: ^( MUL $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(177, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MUL, "MUL"), root_2);

					DebugLocation(177, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(177, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:178:6: '/=' expression
				{
				DebugLocation(178, 6);
				string_literal95=(IToken)Match(input,ASSIGN_DIV,Follow._ASSIGN_DIV_in_invocationExpression1300);  
				stream_ASSIGN_DIV.Add(string_literal95);

				DebugLocation(178, 11);
				PushFollow(Follow._expression_in_invocationExpression1302);
				expression96=expression();
				PopFollow();

				stream_expression.Add(expression96.Tree);


				{
				// AST REWRITE
				// elements: id, id, expression
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 178:23: -> ^( ASSIGNMENT $id ^( DIV $id expression ) )
				{
					DebugLocation(178, 26);
					// C:\\work\\ReoScript\\ReoScript.g:178:26: ^( ASSIGNMENT $id ^( DIV $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(178, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(178, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(178, 43);
					// C:\\work\\ReoScript\\ReoScript.g:178:43: ^( DIV $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(178, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DIV, "DIV"), root_2);

					DebugLocation(178, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(178, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\work\\ReoScript\\ReoScript.g:179:6: '%=' expression
				{
				DebugLocation(179, 6);
				string_literal97=(IToken)Match(input,ASSIGN_REM,Follow._ASSIGN_REM_in_invocationExpression1328);  
				stream_ASSIGN_REM.Add(string_literal97);

				DebugLocation(179, 11);
				PushFollow(Follow._expression_in_invocationExpression1330);
				expression98=expression();
				PopFollow();

				stream_expression.Add(expression98.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 179:23: -> ^( ASSIGNMENT $id ^( MOD $id expression ) )
				{
					DebugLocation(179, 26);
					// C:\\work\\ReoScript\\ReoScript.g:179:26: ^( ASSIGNMENT $id ^( MOD $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(179, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(179, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(179, 43);
					// C:\\work\\ReoScript\\ReoScript.g:179:43: ^( MOD $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(179, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MOD, "MOD"), root_2);

					DebugLocation(179, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(179, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\work\\ReoScript\\ReoScript.g:180:6: '&=' expression
				{
				DebugLocation(180, 6);
				string_literal99=(IToken)Match(input,ASSIGN_AND,Follow._ASSIGN_AND_in_invocationExpression1356);  
				stream_ASSIGN_AND.Add(string_literal99);

				DebugLocation(180, 11);
				PushFollow(Follow._expression_in_invocationExpression1358);
				expression100=expression();
				PopFollow();

				stream_expression.Add(expression100.Tree);


				{
				// AST REWRITE
				// elements: expression, id, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 180:23: -> ^( ASSIGNMENT $id ^( AND $id expression ) )
				{
					DebugLocation(180, 26);
					// C:\\work\\ReoScript\\ReoScript.g:180:26: ^( ASSIGNMENT $id ^( AND $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(180, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(180, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(180, 43);
					// C:\\work\\ReoScript\\ReoScript.g:180:43: ^( AND $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(180, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(AND, "AND"), root_2);

					DebugLocation(180, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(180, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\work\\ReoScript\\ReoScript.g:181:6: '|=' expression
				{
				DebugLocation(181, 6);
				string_literal101=(IToken)Match(input,ASSIGN_OR,Follow._ASSIGN_OR_in_invocationExpression1384);  
				stream_ASSIGN_OR.Add(string_literal101);

				DebugLocation(181, 11);
				PushFollow(Follow._expression_in_invocationExpression1386);
				expression102=expression();
				PopFollow();

				stream_expression.Add(expression102.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 181:23: -> ^( ASSIGNMENT $id ^( OR $id expression ) )
				{
					DebugLocation(181, 26);
					// C:\\work\\ReoScript\\ReoScript.g:181:26: ^( ASSIGNMENT $id ^( OR $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(181, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(181, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(181, 43);
					// C:\\work\\ReoScript\\ReoScript.g:181:43: ^( OR $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(181, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(OR, "OR"), root_2);

					DebugLocation(181, 49);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(181, 52);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\work\\ReoScript\\ReoScript.g:182:6: '^=' expression
				{
				DebugLocation(182, 6);
				string_literal103=(IToken)Match(input,ASSIGN_REV,Follow._ASSIGN_REV_in_invocationExpression1412);  
				stream_ASSIGN_REV.Add(string_literal103);

				DebugLocation(182, 11);
				PushFollow(Follow._expression_in_invocationExpression1414);
				expression104=expression();
				PopFollow();

				stream_expression.Add(expression104.Tree);


				{
				// AST REWRITE
				// elements: expression, id, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 182:23: -> ^( ASSIGNMENT $id ^( XOR $id expression ) )
				{
					DebugLocation(182, 26);
					// C:\\work\\ReoScript\\ReoScript.g:182:26: ^( ASSIGNMENT $id ^( XOR $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(182, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(182, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(182, 43);
					// C:\\work\\ReoScript\\ReoScript.g:182:43: ^( XOR $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(182, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(XOR, "XOR"), root_2);

					DebugLocation(182, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(182, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\work\\ReoScript\\ReoScript.g:183:6: '<<=' expression
				{
				DebugLocation(183, 6);
				string_literal105=(IToken)Match(input,ASSIGN_LSHIFT,Follow._ASSIGN_LSHIFT_in_invocationExpression1440);  
				stream_ASSIGN_LSHIFT.Add(string_literal105);

				DebugLocation(183, 12);
				PushFollow(Follow._expression_in_invocationExpression1442);
				expression106=expression();
				PopFollow();

				stream_expression.Add(expression106.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 183:23: -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) )
				{
					DebugLocation(183, 26);
					// C:\\work\\ReoScript\\ReoScript.g:183:26: ^( ASSIGNMENT $id ^( LSHIFT $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(183, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(183, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(183, 43);
					// C:\\work\\ReoScript\\ReoScript.g:183:43: ^( LSHIFT $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(183, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LSHIFT, "LSHIFT"), root_2);

					DebugLocation(183, 53);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(183, 56);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\work\\ReoScript\\ReoScript.g:184:6: '>>=' expression
				{
				DebugLocation(184, 6);
				string_literal107=(IToken)Match(input,ASSIGN_RSHIFT,Follow._ASSIGN_RSHIFT_in_invocationExpression1467);  
				stream_ASSIGN_RSHIFT.Add(string_literal107);

				DebugLocation(184, 12);
				PushFollow(Follow._expression_in_invocationExpression1469);
				expression108=expression();
				PopFollow();

				stream_expression.Add(expression108.Tree);


				{
				// AST REWRITE
				// elements: id, id, expression
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 184:23: -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) )
				{
					DebugLocation(184, 26);
					// C:\\work\\ReoScript\\ReoScript.g:184:26: ^( ASSIGNMENT $id ^( RSHIFT $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(184, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(184, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(184, 43);
					// C:\\work\\ReoScript\\ReoScript.g:184:43: ^( RSHIFT $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(184, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RSHIFT, "RSHIFT"), root_2);

					DebugLocation(184, 53);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(184, 56);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\work\\ReoScript\\ReoScript.g:185:6: '++'
				{
				DebugLocation(185, 6);
				string_literal109=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_invocationExpression1494);  
				stream_INCREMENT.Add(string_literal109);



				{
				// AST REWRITE
				// elements: id, INCREMENT
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 185:14: -> ^( POST_UNARY_STEP $id '++' )
				{
					DebugLocation(185, 17);
					// C:\\work\\ReoScript\\ReoScript.g:185:17: ^( POST_UNARY_STEP $id '++' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(185, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

					DebugLocation(185, 36);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(185, 39);
					adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\work\\ReoScript\\ReoScript.g:186:6: '--'
				{
				DebugLocation(186, 6);
				string_literal110=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_invocationExpression1515);  
				stream_DECREMENT.Add(string_literal110);



				{
				// AST REWRITE
				// elements: id, DECREMENT
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 186:14: -> ^( POST_UNARY_STEP $id '--' )
				{
					DebugLocation(186, 17);
					// C:\\work\\ReoScript\\ReoScript.g:186:17: ^( POST_UNARY_STEP $id '--' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(186, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

					DebugLocation(186, 36);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(186, 39);
					adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\work\\ReoScript\\ReoScript.g:187:6: 'instanceof' expression
				{
				DebugLocation(187, 6);
				string_literal111=(IToken)Match(input,121,Follow._121_in_invocationExpression1536);  
				stream_121.Add(string_literal111);

				DebugLocation(187, 19);
				PushFollow(Follow._expression_in_invocationExpression1538);
				expression112=expression();
				PopFollow();

				stream_expression.Add(expression112.Tree);


				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 187:30: -> ^( INSTANCEOF expression )
				{
					DebugLocation(187, 33);
					// C:\\work\\ReoScript\\ReoScript.g:187:33: ^( INSTANCEOF expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(187, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSTANCEOF, "INSTANCEOF"), root_1);

					DebugLocation(187, 46);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\work\\ReoScript\\ReoScript.g:188:11: 
				{

				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 188:11: -> primaryExpression
				{
					DebugLocation(188, 14);
					adaptor.AddChild(root_0, stream_primaryExpression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(27); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invocationExpression", 16);
			LeaveRule("invocationExpression", 16);
			LeaveRule_invocationExpression();
		}
		DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "invocationExpression"); }
		return retval;

	}
	// $ANTLR end "invocationExpression"

	partial void EnterRule_statementExpressionList();
	partial void LeaveRule_statementExpressionList();

	// $ANTLR start "statementExpressionList"
	// C:\\work\\ReoScript\\ReoScript.g:192:1: statementExpressionList : statementExpression ( COMMA ! statementExpression )* ;
	[GrammarRule("statementExpressionList")]
	private AstParserRuleReturnScope<CommonTree, IToken> statementExpressionList()
	{
		EnterRule_statementExpressionList();
		EnterRule("statementExpressionList", 17);
		TraceIn("statementExpressionList", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA114 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpression113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpression115 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA114_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "statementExpressionList");
		DebugLocation(192, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:193:2: ( statementExpression ( COMMA ! statementExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:193:4: statementExpression ( COMMA ! statementExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(193, 4);
			PushFollow(Follow._statementExpression_in_statementExpressionList1576);
			statementExpression113=statementExpression();
			PopFollow();

			adaptor.AddChild(root_0, statementExpression113.Tree);
			DebugLocation(193, 24);
			// C:\\work\\ReoScript\\ReoScript.g:193:24: ( COMMA ! statementExpression )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==COMMA))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:193:25: COMMA ! statementExpression
					{
					DebugLocation(193, 30);
					COMMA114=(IToken)Match(input,COMMA,Follow._COMMA_in_statementExpressionList1579); 
					DebugLocation(193, 32);
					PushFollow(Follow._statementExpression_in_statementExpressionList1582);
					statementExpression115=statementExpression();
					PopFollow();

					adaptor.AddChild(root_0, statementExpression115.Tree);

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statementExpressionList", 17);
			LeaveRule("statementExpressionList", 17);
			LeaveRule_statementExpressionList();
		}
		DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "statementExpressionList"); }
		return retval;

	}
	// $ANTLR end "statementExpressionList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// C:\\work\\ReoScript\\ReoScript.g:197:1: public expression : ( tag | assignmentExpression ( EOF !)? );
	[GrammarRule("expression")]
	public AstParserRuleReturnScope<CommonTree, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 18);
		TraceIn("expression", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken EOF118 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> tag116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression117 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EOF118_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(197, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:198:2: ( tag | assignmentExpression ( EOF !)? )
			int alt30=2;
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==LESS_THAN))
			{
				alt30 = 1;
			}
			else if ((LA30_0==BINARY_LITERATE||LA30_0==DECREMENT||LA30_0==FALSE||(LA30_0>=HEX_LITERATE && LA30_0<=IDENTIFIER)||LA30_0==INCREMENT||(LA30_0>=LBRACE && LA30_0<=LCURLY)||LA30_0==LPAREN||LA30_0==MINUS||LA30_0==NOT||(LA30_0>=NULL && LA30_0<=NUMBER_LITERATE)||LA30_0==PLUS||LA30_0==STRING_LITERATE||(LA30_0>=THIS && LA30_0<=TRUE)||LA30_0==UNDEFINED||LA30_0==117||LA30_0==122||LA30_0==125||LA30_0==127))
			{
				alt30 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:202:4: tag
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(202, 4);
				PushFollow(Follow._tag_in_expression1607);
				tag116=tag();
				PopFollow();

				adaptor.AddChild(root_0, tag116.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:203:4: assignmentExpression ( EOF !)?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(203, 4);
				PushFollow(Follow._assignmentExpression_in_expression1613);
				assignmentExpression117=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, assignmentExpression117.Tree);
				DebugLocation(203, 28);
				// C:\\work\\ReoScript\\ReoScript.g:203:28: ( EOF !)?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==EOF))
				{
					alt29 = 1;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:203:28: EOF !
					{
					DebugLocation(203, 28);
					EOF118=(IToken)Match(input,EOF,Follow._EOF_in_expression1615); 

					}
					break;

				}
				} finally { DebugExitSubRule(29); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 18);
			LeaveRule("expression", 18);
			LeaveRule_expression();
		}
		DebugLocation(204, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_expressionList();
	partial void LeaveRule_expressionList();

	// $ANTLR start "expressionList"
	// C:\\work\\ReoScript\\ReoScript.g:206:1: expressionList : expression ( COMMA ! expression )* ;
	[GrammarRule("expressionList")]
	private AstParserRuleReturnScope<CommonTree, IToken> expressionList()
	{
		EnterRule_expressionList();
		EnterRule("expressionList", 19);
		TraceIn("expressionList", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA120 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression119 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression121 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA120_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expressionList");
		DebugLocation(206, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:207:2: ( expression ( COMMA ! expression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:207:4: expression ( COMMA ! expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(207, 4);
			PushFollow(Follow._expression_in_expressionList1629);
			expression119=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression119.Tree);
			DebugLocation(207, 15);
			// C:\\work\\ReoScript\\ReoScript.g:207:15: ( COMMA ! expression )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==COMMA))
				{
					int LA31_2 = input.LA(2);

					if ((LA31_2==BINARY_LITERATE||LA31_2==DECREMENT||LA31_2==FALSE||(LA31_2>=HEX_LITERATE && LA31_2<=IDENTIFIER)||LA31_2==INCREMENT||(LA31_2>=LBRACE && LA31_2<=LCURLY)||LA31_2==LESS_THAN||LA31_2==LPAREN||LA31_2==MINUS||LA31_2==NOT||(LA31_2>=NULL && LA31_2<=NUMBER_LITERATE)||LA31_2==PLUS||LA31_2==STRING_LITERATE||(LA31_2>=THIS && LA31_2<=TRUE)||LA31_2==UNDEFINED||LA31_2==117||LA31_2==122||LA31_2==125||LA31_2==127))
					{
						alt31 = 1;
					}


				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:207:16: COMMA ! expression
					{
					DebugLocation(207, 21);
					COMMA120=(IToken)Match(input,COMMA,Follow._COMMA_in_expressionList1632); 
					DebugLocation(207, 23);
					PushFollow(Follow._expression_in_expressionList1635);
					expression121=expression();
					PopFollow();

					adaptor.AddChild(root_0, expression121.Tree);

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionList", 19);
			LeaveRule("expressionList", 19);
			LeaveRule_expressionList();
		}
		DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionList"); }
		return retval;

	}
	// $ANTLR end "expressionList"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();

	// $ANTLR start "assignmentExpression"
	// C:\\work\\ReoScript\\ReoScript.g:210:1: assignmentExpression : conditionalExpression ( ASSIGNMENT ^ expression )? ;
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 20);
		TraceIn("assignmentExpression", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken ASSIGNMENT123 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression124 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSIGNMENT123_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(210, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:211:2: ( conditionalExpression ( ASSIGNMENT ^ expression )? )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:211:4: conditionalExpression ( ASSIGNMENT ^ expression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(211, 4);
			PushFollow(Follow._conditionalExpression_in_assignmentExpression1649);
			conditionalExpression122=conditionalExpression();
			PopFollow();

			adaptor.AddChild(root_0, conditionalExpression122.Tree);
			DebugLocation(211, 26);
			// C:\\work\\ReoScript\\ReoScript.g:211:26: ( ASSIGNMENT ^ expression )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==ASSIGNMENT))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:211:27: ASSIGNMENT ^ expression
				{
				DebugLocation(211, 37);
				ASSIGNMENT123=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_assignmentExpression1652); 
				ASSIGNMENT123_tree = (CommonTree)adaptor.Create(ASSIGNMENT123);
				root_0 = (CommonTree)adaptor.BecomeRoot(ASSIGNMENT123_tree, root_0);
				DebugLocation(211, 39);
				PushFollow(Follow._expression_in_assignmentExpression1655);
				expression124=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression124.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 20);
			LeaveRule("assignmentExpression", 20);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();

	// $ANTLR start "conditionalExpression"
	// C:\\work\\ReoScript\\ReoScript.g:214:1: conditionalExpression : conditionalOrExpression ( CONDITION ^ expression COLON ! expression )? ;
	[GrammarRule("conditionalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 21);
		TraceIn("conditionalExpression", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken CONDITION126 = default(IToken);
		IToken COLON128 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression127 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression129 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree CONDITION126_tree = default(CommonTree);
		CommonTree COLON128_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(214, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:215:2: ( conditionalOrExpression ( CONDITION ^ expression COLON ! expression )? )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:215:4: conditionalOrExpression ( CONDITION ^ expression COLON ! expression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(215, 4);
			PushFollow(Follow._conditionalOrExpression_in_conditionalExpression1669);
			conditionalOrExpression125=conditionalOrExpression();
			PopFollow();

			adaptor.AddChild(root_0, conditionalOrExpression125.Tree);
			DebugLocation(215, 28);
			// C:\\work\\ReoScript\\ReoScript.g:215:28: ( CONDITION ^ expression COLON ! expression )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==CONDITION))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:215:29: CONDITION ^ expression COLON ! expression
				{
				DebugLocation(215, 38);
				CONDITION126=(IToken)Match(input,CONDITION,Follow._CONDITION_in_conditionalExpression1672); 
				CONDITION126_tree = (CommonTree)adaptor.Create(CONDITION126);
				root_0 = (CommonTree)adaptor.BecomeRoot(CONDITION126_tree, root_0);
				DebugLocation(215, 40);
				PushFollow(Follow._expression_in_conditionalExpression1675);
				expression127=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression127.Tree);
				DebugLocation(215, 56);
				COLON128=(IToken)Match(input,COLON,Follow._COLON_in_conditionalExpression1677); 
				DebugLocation(215, 58);
				PushFollow(Follow._expression_in_conditionalExpression1680);
				expression129=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression129.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpression", 21);
			LeaveRule("conditionalExpression", 21);
			LeaveRule_conditionalExpression();
		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_conditionalOrExpression();
	partial void LeaveRule_conditionalOrExpression();

	// $ANTLR start "conditionalOrExpression"
	// C:\\work\\ReoScript\\ReoScript.g:218:1: conditionalOrExpression : conditionalAndExpression ( LOGICAL_OR ^ conditionalAndExpression )* ;
	[GrammarRule("conditionalOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression()
	{
		EnterRule_conditionalOrExpression();
		EnterRule("conditionalOrExpression", 22);
		TraceIn("conditionalOrExpression", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_OR131 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalAndExpression130 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalAndExpression132 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_OR131_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalOrExpression");
		DebugLocation(218, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:219:2: ( conditionalAndExpression ( LOGICAL_OR ^ conditionalAndExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:219:4: conditionalAndExpression ( LOGICAL_OR ^ conditionalAndExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(219, 4);
			PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression1693);
			conditionalAndExpression130=conditionalAndExpression();
			PopFollow();

			adaptor.AddChild(root_0, conditionalAndExpression130.Tree);
			DebugLocation(219, 29);
			// C:\\work\\ReoScript\\ReoScript.g:219:29: ( LOGICAL_OR ^ conditionalAndExpression )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0==LOGICAL_OR))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:219:30: LOGICAL_OR ^ conditionalAndExpression
					{
					DebugLocation(219, 40);
					LOGICAL_OR131=(IToken)Match(input,LOGICAL_OR,Follow._LOGICAL_OR_in_conditionalOrExpression1696); 
					LOGICAL_OR131_tree = (CommonTree)adaptor.Create(LOGICAL_OR131);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_OR131_tree, root_0);
					DebugLocation(219, 42);
					PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression1699);
					conditionalAndExpression132=conditionalAndExpression();
					PopFollow();

					adaptor.AddChild(root_0, conditionalAndExpression132.Tree);

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalOrExpression", 22);
			LeaveRule("conditionalOrExpression", 22);
			LeaveRule_conditionalOrExpression();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalOrExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalOrExpression"

	partial void EnterRule_conditionalAndExpression();
	partial void LeaveRule_conditionalAndExpression();

	// $ANTLR start "conditionalAndExpression"
	// C:\\work\\ReoScript\\ReoScript.g:222:1: conditionalAndExpression : inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* ;
	[GrammarRule("conditionalAndExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalAndExpression()
	{
		EnterRule_conditionalAndExpression();
		EnterRule("conditionalAndExpression", 23);
		TraceIn("conditionalAndExpression", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_AND134 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression133 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression135 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_AND134_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalAndExpression");
		DebugLocation(222, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:223:2: ( inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:223:4: inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(223, 4);
			PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression1712);
			inclusiveOrExpression133=inclusiveOrExpression();
			PopFollow();

			adaptor.AddChild(root_0, inclusiveOrExpression133.Tree);
			DebugLocation(223, 26);
			// C:\\work\\ReoScript\\ReoScript.g:223:26: ( LOGICAL_AND ^ inclusiveOrExpression )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if ((LA35_0==LOGICAL_AND))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:223:27: LOGICAL_AND ^ inclusiveOrExpression
					{
					DebugLocation(223, 38);
					LOGICAL_AND134=(IToken)Match(input,LOGICAL_AND,Follow._LOGICAL_AND_in_conditionalAndExpression1715); 
					LOGICAL_AND134_tree = (CommonTree)adaptor.Create(LOGICAL_AND134);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_AND134_tree, root_0);
					DebugLocation(223, 40);
					PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression1718);
					inclusiveOrExpression135=inclusiveOrExpression();
					PopFollow();

					adaptor.AddChild(root_0, inclusiveOrExpression135.Tree);

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalAndExpression", 23);
			LeaveRule("conditionalAndExpression", 23);
			LeaveRule_conditionalAndExpression();
		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalAndExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalAndExpression"

	partial void EnterRule_inclusiveOrExpression();
	partial void LeaveRule_inclusiveOrExpression();

	// $ANTLR start "inclusiveOrExpression"
	// C:\\work\\ReoScript\\ReoScript.g:226:1: inclusiveOrExpression : exclusiveOrExpression ( OR ^ exclusiveOrExpression )* ;
	[GrammarRule("inclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression()
	{
		EnterRule_inclusiveOrExpression();
		EnterRule("inclusiveOrExpression", 24);
		TraceIn("inclusiveOrExpression", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken OR137 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression136 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression138 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree OR137_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "inclusiveOrExpression");
		DebugLocation(226, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:227:2: ( exclusiveOrExpression ( OR ^ exclusiveOrExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:227:4: exclusiveOrExpression ( OR ^ exclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(227, 4);
			PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression1733);
			exclusiveOrExpression136=exclusiveOrExpression();
			PopFollow();

			adaptor.AddChild(root_0, exclusiveOrExpression136.Tree);
			DebugLocation(227, 26);
			// C:\\work\\ReoScript\\ReoScript.g:227:26: ( OR ^ exclusiveOrExpression )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if ((LA36_0==OR))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:227:27: OR ^ exclusiveOrExpression
					{
					DebugLocation(227, 29);
					OR137=(IToken)Match(input,OR,Follow._OR_in_inclusiveOrExpression1736); 
					OR137_tree = (CommonTree)adaptor.Create(OR137);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR137_tree, root_0);
					DebugLocation(227, 31);
					PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression1739);
					exclusiveOrExpression138=exclusiveOrExpression();
					PopFollow();

					adaptor.AddChild(root_0, exclusiveOrExpression138.Tree);

					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusiveOrExpression", 24);
			LeaveRule("inclusiveOrExpression", 24);
			LeaveRule_inclusiveOrExpression();
		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "inclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "inclusiveOrExpression"

	partial void EnterRule_exclusiveOrExpression();
	partial void LeaveRule_exclusiveOrExpression();

	// $ANTLR start "exclusiveOrExpression"
	// C:\\work\\ReoScript\\ReoScript.g:230:1: exclusiveOrExpression : andExpression ( XOR ^ andExpression )* ;
	[GrammarRule("exclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression()
	{
		EnterRule_exclusiveOrExpression();
		EnterRule("exclusiveOrExpression", 25);
		TraceIn("exclusiveOrExpression", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken XOR140 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression141 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree XOR140_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "exclusiveOrExpression");
		DebugLocation(230, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:231:2: ( andExpression ( XOR ^ andExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:231:4: andExpression ( XOR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(231, 4);
			PushFollow(Follow._andExpression_in_exclusiveOrExpression1753);
			andExpression139=andExpression();
			PopFollow();

			adaptor.AddChild(root_0, andExpression139.Tree);
			DebugLocation(231, 18);
			// C:\\work\\ReoScript\\ReoScript.g:231:18: ( XOR ^ andExpression )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==XOR))
				{
					alt37 = 1;
				}


				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:231:19: XOR ^ andExpression
					{
					DebugLocation(231, 22);
					XOR140=(IToken)Match(input,XOR,Follow._XOR_in_exclusiveOrExpression1756); 
					XOR140_tree = (CommonTree)adaptor.Create(XOR140);
					root_0 = (CommonTree)adaptor.BecomeRoot(XOR140_tree, root_0);
					DebugLocation(231, 24);
					PushFollow(Follow._andExpression_in_exclusiveOrExpression1759);
					andExpression141=andExpression();
					PopFollow();

					adaptor.AddChild(root_0, andExpression141.Tree);

					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusiveOrExpression", 25);
			LeaveRule("exclusiveOrExpression", 25);
			LeaveRule_exclusiveOrExpression();
		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "exclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "exclusiveOrExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();

	// $ANTLR start "andExpression"
	// C:\\work\\ReoScript\\ReoScript.g:234:1: andExpression : equalityExpression ( AND ^ equalityExpression )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 26);
		TraceIn("andExpression", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken AND143 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> equalityExpression142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> equalityExpression144 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree AND143_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(234, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:235:2: ( equalityExpression ( AND ^ equalityExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:235:4: equalityExpression ( AND ^ equalityExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(235, 4);
			PushFollow(Follow._equalityExpression_in_andExpression1773);
			equalityExpression142=equalityExpression();
			PopFollow();

			adaptor.AddChild(root_0, equalityExpression142.Tree);
			DebugLocation(235, 23);
			// C:\\work\\ReoScript\\ReoScript.g:235:23: ( AND ^ equalityExpression )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if ((LA38_0==AND))
				{
					alt38 = 1;
				}


				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:235:24: AND ^ equalityExpression
					{
					DebugLocation(235, 27);
					AND143=(IToken)Match(input,AND,Follow._AND_in_andExpression1776); 
					AND143_tree = (CommonTree)adaptor.Create(AND143);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND143_tree, root_0);
					DebugLocation(235, 29);
					PushFollow(Follow._equalityExpression_in_andExpression1779);
					equalityExpression144=equalityExpression();
					PopFollow();

					adaptor.AddChild(root_0, equalityExpression144.Tree);

					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 26);
			LeaveRule("andExpression", 26);
			LeaveRule_andExpression();
		}
		DebugLocation(236, 1);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();

	// $ANTLR start "equalityExpression"
	// C:\\work\\ReoScript\\ReoScript.g:238:1: equalityExpression : relationalExpression ( ( EQUALS | NOT_EQUALS ) ^ relationalExpression )* ;
	[GrammarRule("equalityExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 27);
		TraceIn("equalityExpression", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set146 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> relationalExpression145 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> relationalExpression147 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set146_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(238, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:239:2: ( relationalExpression ( ( EQUALS | NOT_EQUALS ) ^ relationalExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:239:4: relationalExpression ( ( EQUALS | NOT_EQUALS ) ^ relationalExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(239, 4);
			PushFollow(Follow._relationalExpression_in_equalityExpression1792);
			relationalExpression145=relationalExpression();
			PopFollow();

			adaptor.AddChild(root_0, relationalExpression145.Tree);
			DebugLocation(239, 25);
			// C:\\work\\ReoScript\\ReoScript.g:239:25: ( ( EQUALS | NOT_EQUALS ) ^ relationalExpression )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==EQUALS||LA39_0==NOT_EQUALS))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:239:26: ( EQUALS | NOT_EQUALS ) ^ relationalExpression
					{
					DebugLocation(239, 47);

					set146=(IToken)input.LT(1);
					set146=(IToken)input.LT(1);
					if (input.LA(1)==EQUALS||input.LA(1)==NOT_EQUALS)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set146), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(239, 49);
					PushFollow(Follow._relationalExpression_in_equalityExpression1804);
					relationalExpression147=relationalExpression();
					PopFollow();

					adaptor.AddChild(root_0, relationalExpression147.Tree);

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 27);
			LeaveRule("equalityExpression", 27);
			LeaveRule_equalityExpression();
		}
		DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();

	// $ANTLR start "relationalExpression"
	// C:\\work\\ReoScript\\ReoScript.g:242:1: relationalExpression : shiftExpression ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 28);
		TraceIn("relationalExpression", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set149 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression148 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression150 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set149_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(242, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:243:2: ( shiftExpression ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:243:4: shiftExpression ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(243, 4);
			PushFollow(Follow._shiftExpression_in_relationalExpression1819);
			shiftExpression148=shiftExpression();
			PopFollow();

			adaptor.AddChild(root_0, shiftExpression148.Tree);
			DebugLocation(243, 20);
			// C:\\work\\ReoScript\\ReoScript.g:243:20: ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==GREAT_THAN))
				{
					alt40 = 1;
				}
				else if ((LA40_0==GREAT_EQUALS||(LA40_0>=LESS_EQUALS && LA40_0<=LESS_THAN)))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:243:21: ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression
					{
					DebugLocation(243, 74);

					set149=(IToken)input.LT(1);
					set149=(IToken)input.LT(1);
					if ((input.LA(1)>=GREAT_EQUALS && input.LA(1)<=GREAT_THAN)||(input.LA(1)>=LESS_EQUALS && input.LA(1)<=LESS_THAN))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set149), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(243, 76);
					PushFollow(Follow._shiftExpression_in_relationalExpression1839);
					shiftExpression150=shiftExpression();
					PopFollow();

					adaptor.AddChild(root_0, shiftExpression150.Tree);

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 28);
			LeaveRule("relationalExpression", 28);
			LeaveRule_relationalExpression();
		}
		DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();

	// $ANTLR start "shiftExpression"
	// C:\\work\\ReoScript\\ReoScript.g:246:1: shiftExpression : additiveExpression ( ( LSHIFT | RSHIFT ) ^ additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 29);
		TraceIn("shiftExpression", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set152 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression151 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression153 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set152_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(246, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:247:2: ( additiveExpression ( ( LSHIFT | RSHIFT ) ^ additiveExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:247:4: additiveExpression ( ( LSHIFT | RSHIFT ) ^ additiveExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(247, 4);
			PushFollow(Follow._additiveExpression_in_shiftExpression1853);
			additiveExpression151=additiveExpression();
			PopFollow();

			adaptor.AddChild(root_0, additiveExpression151.Tree);
			DebugLocation(247, 23);
			// C:\\work\\ReoScript\\ReoScript.g:247:23: ( ( LSHIFT | RSHIFT ) ^ additiveExpression )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==LSHIFT||LA41_0==RSHIFT))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:247:24: ( LSHIFT | RSHIFT ) ^ additiveExpression
					{
					DebugLocation(247, 39);

					set152=(IToken)input.LT(1);
					set152=(IToken)input.LT(1);
					if (input.LA(1)==LSHIFT||input.LA(1)==RSHIFT)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set152), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(247, 41);
					PushFollow(Follow._additiveExpression_in_shiftExpression1863);
					additiveExpression153=additiveExpression();
					PopFollow();

					adaptor.AddChild(root_0, additiveExpression153.Tree);

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftExpression", 29);
			LeaveRule("shiftExpression", 29);
			LeaveRule_shiftExpression();
		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return retval;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();

	// $ANTLR start "additiveExpression"
	// C:\\work\\ReoScript\\ReoScript.g:250:1: additiveExpression : multiplicativeExpression ( ( PLUS | MINUS ) ^ multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 30);
		TraceIn("additiveExpression", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set155 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression156 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set155_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(250, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:251:2: ( multiplicativeExpression ( ( PLUS | MINUS ) ^ multiplicativeExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:251:4: multiplicativeExpression ( ( PLUS | MINUS ) ^ multiplicativeExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(251, 4);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression1878);
			multiplicativeExpression154=multiplicativeExpression();
			PopFollow();

			adaptor.AddChild(root_0, multiplicativeExpression154.Tree);
			DebugLocation(251, 29);
			// C:\\work\\ReoScript\\ReoScript.g:251:29: ( ( PLUS | MINUS ) ^ multiplicativeExpression )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==MINUS||LA42_0==PLUS))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:251:30: ( PLUS | MINUS ) ^ multiplicativeExpression
					{
					DebugLocation(251, 42);

					set155=(IToken)input.LT(1);
					set155=(IToken)input.LT(1);
					if (input.LA(1)==MINUS||input.LA(1)==PLUS)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set155), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(251, 44);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression1888);
					multiplicativeExpression156=multiplicativeExpression();
					PopFollow();

					adaptor.AddChild(root_0, multiplicativeExpression156.Tree);

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 30);
			LeaveRule("additiveExpression", 30);
			LeaveRule_additiveExpression();
		}
		DebugLocation(252, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();

	// $ANTLR start "multiplicativeExpression"
	// C:\\work\\ReoScript\\ReoScript.g:254:1: multiplicativeExpression : unaryExpression ( ( MUL | DIV | MOD ) ^ unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 31);
		TraceIn("multiplicativeExpression", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set158 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression157 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression159 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set158_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(254, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:255:2: ( unaryExpression ( ( MUL | DIV | MOD ) ^ unaryExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:255:4: unaryExpression ( ( MUL | DIV | MOD ) ^ unaryExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(255, 4);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression1902);
			unaryExpression157=unaryExpression();
			PopFollow();

			adaptor.AddChild(root_0, unaryExpression157.Tree);
			DebugLocation(255, 20);
			// C:\\work\\ReoScript\\ReoScript.g:255:20: ( ( MUL | DIV | MOD ) ^ unaryExpression )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==DIV||(LA43_0>=MOD && LA43_0<=MUL)))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:255:21: ( MUL | DIV | MOD ) ^ unaryExpression
					{
					DebugLocation(255, 38);

					set158=(IToken)input.LT(1);
					set158=(IToken)input.LT(1);
					if (input.LA(1)==DIV||(input.LA(1)>=MOD && input.LA(1)<=MUL))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set158), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(255, 40);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression1918);
					unaryExpression159=unaryExpression();
					PopFollow();

					adaptor.AddChild(root_0, unaryExpression159.Tree);

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 31);
			LeaveRule("multiplicativeExpression", 31);
			LeaveRule_multiplicativeExpression();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();

	// $ANTLR start "unaryExpression"
	// C:\\work\\ReoScript\\ReoScript.g:258:1: unaryExpression : ( primaryExpression ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) | 'new' primaryExpression -> ^( CREATE primaryExpression ) | (op= '+' |op= '-' |op= '!' |op= '~' ) unaryExpression -> ^( PRE_UNARY $op unaryExpression ) | 'typeof' primaryExpression -> ^( TYPEOF primaryExpression ) );
	[GrammarRule("unaryExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 32);
		TraceIn("unaryExpression", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken op = default(IToken);
		IToken string_literal161 = default(IToken);
		IToken string_literal162 = default(IToken);
		IToken string_literal163 = default(IToken);
		IToken string_literal165 = default(IToken);
		IToken string_literal167 = default(IToken);
		IToken string_literal170 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression160 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression164 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression166 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression168 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression169 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression171 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree op_tree = default(CommonTree);
		CommonTree string_literal161_tree = default(CommonTree);
		CommonTree string_literal162_tree = default(CommonTree);
		CommonTree string_literal163_tree = default(CommonTree);
		CommonTree string_literal165_tree = default(CommonTree);
		CommonTree string_literal167_tree = default(CommonTree);
		CommonTree string_literal170_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_INCREMENT=new RewriteRuleITokenStream(adaptor,"token INCREMENT");
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
		RewriteRuleITokenStream stream_MINUS=new RewriteRuleITokenStream(adaptor,"token MINUS");
		RewriteRuleITokenStream stream_DECREMENT=new RewriteRuleITokenStream(adaptor,"token DECREMENT");
		RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(258, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:259:2: ( primaryExpression ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) | 'new' primaryExpression -> ^( CREATE primaryExpression ) | (op= '+' |op= '-' |op= '!' |op= '~' ) unaryExpression -> ^( PRE_UNARY $op unaryExpression ) | 'typeof' primaryExpression -> ^( TYPEOF primaryExpression ) )
			int alt46=6;
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case BINARY_LITERATE:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case LBRACE:
			case LCURLY:
			case LPAREN:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case UNDEFINED:
			case 117:
				{
				alt46 = 1;
				}
				break;
			case INCREMENT:
				{
				alt46 = 2;
				}
				break;
			case DECREMENT:
				{
				alt46 = 3;
				}
				break;
			case 122:
				{
				alt46 = 4;
				}
				break;
			case MINUS:
			case NOT:
			case PLUS:
			case 127:
				{
				alt46 = 5;
				}
				break;
			case 125:
				{
				alt46 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:260:4: primaryExpression ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression )
				{
				DebugLocation(260, 4);
				PushFollow(Follow._primaryExpression_in_unaryExpression1937);
				primaryExpression160=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression160.Tree);
				DebugLocation(260, 22);
				// C:\\work\\ReoScript\\ReoScript.g:260:22: ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression )
				int alt44=3;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				switch (input.LA(1))
				{
				case INCREMENT:
					{
					alt44 = 1;
					}
					break;
				case DECREMENT:
					{
					alt44 = 2;
					}
					break;
				case EOF:
				case AND:
				case ASSIGNMENT:
				case ASSIGN_AND:
				case ASSIGN_DIV:
				case ASSIGN_LSHIFT:
				case ASSIGN_MINUS:
				case ASSIGN_MUL:
				case ASSIGN_OR:
				case ASSIGN_PLUS:
				case ASSIGN_REM:
				case ASSIGN_REV:
				case ASSIGN_RSHIFT:
				case COLON:
				case COMMA:
				case CONDITION:
				case DIV:
				case DOT:
				case EQUALS:
				case GREAT_EQUALS:
				case GREAT_THAN:
				case IDENTIFIER:
				case LBRACE:
				case LCURLY:
				case LESS_EQUALS:
				case LESS_THAN:
				case LOGICAL_AND:
				case LOGICAL_OR:
				case LPAREN:
				case LSHIFT:
				case MINUS:
				case MOD:
				case MUL:
				case NOT_EQUALS:
				case OR:
				case PLUS:
				case RBRACE:
				case RCURLY:
				case RPAREN:
				case RSHIFT:
				case SEMI:
				case XOR:
				case 107:
				case 121:
					{
					alt44 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 44, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:261:6: '++'
					{
					DebugLocation(261, 6);
					string_literal161=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_unaryExpression1947);  
					stream_INCREMENT.Add(string_literal161);



					{
					// AST REWRITE
					// elements: primaryExpression, INCREMENT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 261:12: -> ^( POST_UNARY_STEP primaryExpression '++' )
					{
						DebugLocation(261, 15);
						// C:\\work\\ReoScript\\ReoScript.g:261:15: ^( POST_UNARY_STEP primaryExpression '++' )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(261, 17);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

						DebugLocation(261, 33);
						adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
						DebugLocation(261, 51);
						adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:262:10: '--'
					{
					DebugLocation(262, 10);
					string_literal162=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_unaryExpression1969);  
					stream_DECREMENT.Add(string_literal162);



					{
					// AST REWRITE
					// elements: primaryExpression, DECREMENT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 262:16: -> ^( POST_UNARY_STEP primaryExpression '--' )
					{
						DebugLocation(262, 19);
						// C:\\work\\ReoScript\\ReoScript.g:262:19: ^( POST_UNARY_STEP primaryExpression '--' )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(262, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

						DebugLocation(262, 37);
						adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
						DebugLocation(262, 55);
						adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\work\\ReoScript\\ReoScript.g:263:10: 
					{

					{
					// AST REWRITE
					// elements: primaryExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 263:10: -> primaryExpression
					{
						DebugLocation(263, 13);
						adaptor.AddChild(root_0, stream_primaryExpression.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(44); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:265:4: '++' primaryExpression
				{
				DebugLocation(265, 4);
				string_literal163=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_unaryExpression2007);  
				stream_INCREMENT.Add(string_literal163);

				DebugLocation(265, 9);
				PushFollow(Follow._primaryExpression_in_unaryExpression2009);
				primaryExpression164=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression164.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression, INCREMENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 266:3: -> ^( PRE_UNARY_STEP primaryExpression '++' )
				{
					DebugLocation(266, 6);
					// C:\\work\\ReoScript\\ReoScript.g:266:6: ^( PRE_UNARY_STEP primaryExpression '++' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(266, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(266, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(266, 41);
					adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:267:4: '--' primaryExpression
				{
				DebugLocation(267, 4);
				string_literal165=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_unaryExpression2026);  
				stream_DECREMENT.Add(string_literal165);

				DebugLocation(267, 9);
				PushFollow(Follow._primaryExpression_in_unaryExpression2028);
				primaryExpression166=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression166.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression, DECREMENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 268:3: -> ^( PRE_UNARY_STEP primaryExpression '--' )
				{
					DebugLocation(268, 6);
					// C:\\work\\ReoScript\\ReoScript.g:268:6: ^( PRE_UNARY_STEP primaryExpression '--' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(268, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(268, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(268, 41);
					adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:269:4: 'new' primaryExpression
				{
				DebugLocation(269, 4);
				string_literal167=(IToken)Match(input,122,Follow._122_in_unaryExpression2045);  
				stream_122.Add(string_literal167);

				DebugLocation(269, 10);
				PushFollow(Follow._primaryExpression_in_unaryExpression2047);
				primaryExpression168=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression168.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 270:3: -> ^( CREATE primaryExpression )
				{
					DebugLocation(270, 6);
					// C:\\work\\ReoScript\\ReoScript.g:270:6: ^( CREATE primaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(270, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CREATE, "CREATE"), root_1);

					DebugLocation(270, 15);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:271:4: (op= '+' |op= '-' |op= '!' |op= '~' ) unaryExpression
				{
				DebugLocation(271, 4);
				// C:\\work\\ReoScript\\ReoScript.g:271:4: (op= '+' |op= '-' |op= '!' |op= '~' )
				int alt45=4;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				switch (input.LA(1))
				{
				case PLUS:
					{
					alt45 = 1;
					}
					break;
				case MINUS:
					{
					alt45 = 2;
					}
					break;
				case NOT:
					{
					alt45 = 3;
					}
					break;
				case 127:
					{
					alt45 = 4;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:271:5: op= '+'
					{
					DebugLocation(271, 7);
					op=(IToken)Match(input,PLUS,Follow._PLUS_in_unaryExpression2065);  
					stream_PLUS.Add(op);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:271:12: op= '-'
					{
					DebugLocation(271, 14);
					op=(IToken)Match(input,MINUS,Follow._MINUS_in_unaryExpression2069);  
					stream_MINUS.Add(op);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\work\\ReoScript\\ReoScript.g:271:19: op= '!'
					{
					DebugLocation(271, 21);
					op=(IToken)Match(input,NOT,Follow._NOT_in_unaryExpression2073);  
					stream_NOT.Add(op);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\work\\ReoScript\\ReoScript.g:271:26: op= '~'
					{
					DebugLocation(271, 28);
					op=(IToken)Match(input,127,Follow._127_in_unaryExpression2077);  
					stream_127.Add(op);


					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(271, 34);
				PushFollow(Follow._unaryExpression_in_unaryExpression2080);
				unaryExpression169=unaryExpression();
				PopFollow();

				stream_unaryExpression.Add(unaryExpression169.Tree);


				{
				// AST REWRITE
				// elements: unaryExpression, op
				// token labels: op
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_op=new RewriteRuleITokenStream(adaptor,"token op",op);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 272:3: -> ^( PRE_UNARY $op unaryExpression )
				{
					DebugLocation(272, 6);
					// C:\\work\\ReoScript\\ReoScript.g:272:6: ^( PRE_UNARY $op unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(272, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY, "PRE_UNARY"), root_1);

					DebugLocation(272, 19);
					adaptor.AddChild(root_1, stream_op.NextNode());
					DebugLocation(272, 22);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\work\\ReoScript\\ReoScript.g:273:7: 'typeof' primaryExpression
				{
				DebugLocation(273, 7);
				string_literal170=(IToken)Match(input,125,Follow._125_in_unaryExpression2101);  
				stream_125.Add(string_literal170);

				DebugLocation(273, 16);
				PushFollow(Follow._primaryExpression_in_unaryExpression2103);
				primaryExpression171=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression171.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 273:34: -> ^( TYPEOF primaryExpression )
				{
					DebugLocation(273, 37);
					// C:\\work\\ReoScript\\ReoScript.g:273:37: ^( TYPEOF primaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(273, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPEOF, "TYPEOF"), root_1);

					DebugLocation(273, 46);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 32);
			LeaveRule("unaryExpression", 32);
			LeaveRule_unaryExpression();
		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();

	// $ANTLR start "primaryExpression"
	// C:\\work\\ReoScript\\ReoScript.g:276:1: primaryExpression : ( ( variable -> variable | literal -> literal | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define | '(' expression ')' -> expression ) ( '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' idx= expression ']' -> ^( ARRAY_ACCESS $primaryExpression $idx) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )* | ( object_literal -> object_literal ) ( '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) )* );
	[GrammarRule("primaryExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 33);
		TraceIn("primaryExpression", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal176 = default(IToken);
		IToken char_literal178 = default(IToken);
		IToken char_literal179 = default(IToken);
		IToken char_literal180 = default(IToken);
		IToken char_literal181 = default(IToken);
		IToken char_literal182 = default(IToken);
		IToken IDENTIFIER183 = default(IToken);
		IToken char_literal184 = default(IToken);
		IToken char_literal185 = default(IToken);
		IToken char_literal188 = default(IToken);
		IToken IDENTIFIER189 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> exp = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> idx = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variable172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> literal173 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> array_literal174 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> anonymous_function_define175 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> object_literal186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> object_literal187 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal176_tree = default(CommonTree);
		CommonTree char_literal178_tree = default(CommonTree);
		CommonTree char_literal179_tree = default(CommonTree);
		CommonTree char_literal180_tree = default(CommonTree);
		CommonTree char_literal181_tree = default(CommonTree);
		CommonTree char_literal182_tree = default(CommonTree);
		CommonTree IDENTIFIER183_tree = default(CommonTree);
		CommonTree char_literal184_tree = default(CommonTree);
		CommonTree char_literal185_tree = default(CommonTree);
		CommonTree char_literal188_tree = default(CommonTree);
		CommonTree IDENTIFIER189_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_RBRACE=new RewriteRuleITokenStream(adaptor,"token RBRACE");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_LBRACE=new RewriteRuleITokenStream(adaptor,"token LBRACE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_anonymous_function_define=new RewriteRuleSubtreeStream(adaptor,"rule anonymous_function_define");
		RewriteRuleSubtreeStream stream_array_literal=new RewriteRuleSubtreeStream(adaptor,"rule array_literal");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		RewriteRuleSubtreeStream stream_object_literal=new RewriteRuleSubtreeStream(adaptor,"rule object_literal");
		RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(276, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:277:2: ( ( variable -> variable | literal -> literal | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define | '(' expression ')' -> expression ) ( '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' idx= expression ']' -> ^( ARRAY_ACCESS $primaryExpression $idx) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )* | ( object_literal -> object_literal ) ( '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) )* )
			int alt51=2;
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==BINARY_LITERATE||LA51_0==FALSE||(LA51_0>=HEX_LITERATE && LA51_0<=IDENTIFIER)||LA51_0==LBRACE||LA51_0==LPAREN||(LA51_0>=NULL && LA51_0<=NUMBER_LITERATE)||LA51_0==STRING_LITERATE||(LA51_0>=THIS && LA51_0<=TRUE)||LA51_0==UNDEFINED||LA51_0==117))
			{
				alt51 = 1;
			}
			else if ((LA51_0==LCURLY))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:278:2: ( variable -> variable | literal -> literal | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define | '(' expression ')' -> expression ) ( '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' idx= expression ']' -> ^( ARRAY_ACCESS $primaryExpression $idx) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )*
				{
				DebugLocation(278, 2);
				// C:\\work\\ReoScript\\ReoScript.g:278:2: ( variable -> variable | literal -> literal | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define | '(' expression ')' -> expression )
				int alt47=5;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					int LA47_1 = input.LA(2);

					if ((LA47_1==109))
					{
						alt47 = 4;
					}
					else if ((LA47_1==EOF||LA47_1==AND||(LA47_1>=ASSIGNMENT && LA47_1<=ASSIGN_RSHIFT)||LA47_1==COLON||LA47_1==COMMA||LA47_1==CONDITION||LA47_1==DECREMENT||(LA47_1>=DIV && LA47_1<=DOT)||LA47_1==EQUALS||(LA47_1>=GREAT_EQUALS && LA47_1<=GREAT_THAN)||LA47_1==IDENTIFIER||LA47_1==INCREMENT||(LA47_1>=LBRACE && LA47_1<=LESS_THAN)||(LA47_1>=LOGICAL_AND && LA47_1<=LSHIFT)||(LA47_1>=MINUS && LA47_1<=MUL)||LA47_1==NOT_EQUALS||LA47_1==OR||LA47_1==PLUS||(LA47_1>=RBRACE && LA47_1<=RCURLY)||(LA47_1>=RPAREN && LA47_1<=RSHIFT)||LA47_1==SEMI||(LA47_1>=XOR && LA47_1<=107)||LA47_1==121))
					{
						alt47 = 1;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 47, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case BINARY_LITERATE:
				case FALSE:
				case HEX_LITERATE:
				case NULL:
				case NUMBER_LITERATE:
				case STRING_LITERATE:
				case THIS:
				case TRUE:
				case UNDEFINED:
					{
					alt47 = 2;
					}
					break;
				case LBRACE:
					{
					alt47 = 3;
					}
					break;
				case 117:
					{
					alt47 = 4;
					}
					break;
				case LPAREN:
					{
					switch (input.LA(2))
					{
					case IDENTIFIER:
						{
						switch (input.LA(3))
						{
						case EOF:
						case AND:
						case ASSIGNMENT:
						case CONDITION:
						case DECREMENT:
						case DIV:
						case DOT:
						case EQUALS:
						case GREAT_EQUALS:
						case GREAT_THAN:
						case INCREMENT:
						case LBRACE:
						case LCURLY:
						case LESS_EQUALS:
						case LESS_THAN:
						case LOGICAL_AND:
						case LOGICAL_OR:
						case LPAREN:
						case LSHIFT:
						case MINUS:
						case MOD:
						case MUL:
						case NOT_EQUALS:
						case OR:
						case PLUS:
						case RSHIFT:
						case XOR:
						case 109:
							{
							alt47 = 5;
							}
							break;
						case COMMA:
							{
							alt47 = 4;
							}
							break;
						case RPAREN:
							{
							int LA47_9 = input.LA(4);

							if ((LA47_9==109))
							{
								alt47 = 4;
							}
							else if ((LA47_9==EOF||LA47_9==AND||(LA47_9>=ASSIGNMENT && LA47_9<=ASSIGN_RSHIFT)||LA47_9==COLON||LA47_9==COMMA||LA47_9==CONDITION||LA47_9==DECREMENT||(LA47_9>=DIV && LA47_9<=DOT)||LA47_9==EQUALS||(LA47_9>=GREAT_EQUALS && LA47_9<=GREAT_THAN)||LA47_9==IDENTIFIER||LA47_9==INCREMENT||(LA47_9>=LBRACE && LA47_9<=LESS_THAN)||(LA47_9>=LOGICAL_AND && LA47_9<=LSHIFT)||(LA47_9>=MINUS && LA47_9<=MUL)||LA47_9==NOT_EQUALS||LA47_9==OR||LA47_9==PLUS||(LA47_9>=RBRACE && LA47_9<=RCURLY)||(LA47_9>=RPAREN && LA47_9<=RSHIFT)||LA47_9==SEMI||(LA47_9>=XOR && LA47_9<=107)||LA47_9==121))
							{
								alt47 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 47, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 47, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case RPAREN:
						{
						alt47 = 4;
						}
						break;
					case BINARY_LITERATE:
					case DECREMENT:
					case FALSE:
					case HEX_LITERATE:
					case INCREMENT:
					case LBRACE:
					case LCURLY:
					case LESS_THAN:
					case LPAREN:
					case MINUS:
					case NOT:
					case NULL:
					case NUMBER_LITERATE:
					case PLUS:
					case STRING_LITERATE:
					case THIS:
					case TRUE:
					case UNDEFINED:
					case 117:
					case 122:
					case 125:
					case 127:
						{
						alt47 = 5;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 47, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:279:5: variable
					{
					DebugLocation(279, 5);
					PushFollow(Follow._variable_in_primaryExpression2130);
					variable172=variable();
					PopFollow();

					stream_variable.Add(variable172.Tree);


					{
					// AST REWRITE
					// elements: variable
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 279:20: -> variable
					{
						DebugLocation(279, 23);
						adaptor.AddChild(root_0, stream_variable.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:280:5: literal
					{
					DebugLocation(280, 5);
					PushFollow(Follow._literal_in_primaryExpression2146);
					literal173=literal();
					PopFollow();

					stream_literal.Add(literal173.Tree);


					{
					// AST REWRITE
					// elements: literal
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 280:20: -> literal
					{
						DebugLocation(280, 23);
						adaptor.AddChild(root_0, stream_literal.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\work\\ReoScript\\ReoScript.g:281:5: array_literal
					{
					DebugLocation(281, 5);
					PushFollow(Follow._array_literal_in_primaryExpression2163);
					array_literal174=array_literal();
					PopFollow();

					stream_array_literal.Add(array_literal174.Tree);


					{
					// AST REWRITE
					// elements: array_literal
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 281:23: -> array_literal
					{
						DebugLocation(281, 26);
						adaptor.AddChild(root_0, stream_array_literal.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\work\\ReoScript\\ReoScript.g:282:5: anonymous_function_define
					{
					DebugLocation(282, 5);
					PushFollow(Follow._anonymous_function_define_in_primaryExpression2177);
					anonymous_function_define175=anonymous_function_define();
					PopFollow();

					stream_anonymous_function_define.Add(anonymous_function_define175.Tree);


					{
					// AST REWRITE
					// elements: anonymous_function_define
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 282:32: -> anonymous_function_define
					{
						DebugLocation(282, 35);
						adaptor.AddChild(root_0, stream_anonymous_function_define.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C:\\work\\ReoScript\\ReoScript.g:283:5: '(' expression ')'
					{
					DebugLocation(283, 5);
					char_literal176=(IToken)Match(input,LPAREN,Follow._LPAREN_in_primaryExpression2188);  
					stream_LPAREN.Add(char_literal176);

					DebugLocation(283, 9);
					PushFollow(Follow._expression_in_primaryExpression2190);
					expression177=expression();
					PopFollow();

					stream_expression.Add(expression177.Tree);
					DebugLocation(283, 20);
					char_literal178=(IToken)Match(input,RPAREN,Follow._RPAREN_in_primaryExpression2192);  
					stream_RPAREN.Add(char_literal178);



					{
					// AST REWRITE
					// elements: expression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 283:26: -> expression
					{
						DebugLocation(283, 29);
						adaptor.AddChild(root_0, stream_expression.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(285, 2);
				// C:\\work\\ReoScript\\ReoScript.g:285:2: ( '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' idx= expression ']' -> ^( ARRAY_ACCESS $primaryExpression $idx) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )*
				try { DebugEnterSubRule(49);
				while (true)
				{
					int alt49=5;
					try { DebugEnterDecision(49, false);
					switch (input.LA(1))
					{
					case LPAREN:
						{
						alt49 = 1;
						}
						break;
					case DOT:
						{
						alt49 = 2;
						}
						break;
					case LBRACE:
						{
						alt49 = 3;
						}
						break;
					case LCURLY:
						{
						alt49 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(49); }
					switch ( alt49 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\work\\ReoScript\\ReoScript.g:286:3: '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) )
						{
						DebugLocation(286, 3);
						char_literal179=(IToken)Match(input,LPAREN,Follow._LPAREN_in_primaryExpression2208);  
						stream_LPAREN.Add(char_literal179);

						DebugLocation(286, 7);
						// C:\\work\\ReoScript\\ReoScript.g:286:7: ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) )
						int alt48=2;
						try { DebugEnterSubRule(48);
						try { DebugEnterDecision(48, false);
						int LA48_0 = input.LA(1);

						if ((LA48_0==RPAREN))
						{
							alt48 = 1;
						}
						else if ((LA48_0==BINARY_LITERATE||LA48_0==DECREMENT||LA48_0==FALSE||(LA48_0>=HEX_LITERATE && LA48_0<=IDENTIFIER)||LA48_0==INCREMENT||(LA48_0>=LBRACE && LA48_0<=LCURLY)||LA48_0==LESS_THAN||LA48_0==LPAREN||LA48_0==MINUS||LA48_0==NOT||(LA48_0>=NULL && LA48_0<=NUMBER_LITERATE)||LA48_0==PLUS||LA48_0==STRING_LITERATE||(LA48_0>=THIS && LA48_0<=TRUE)||LA48_0==UNDEFINED||LA48_0==117||LA48_0==122||LA48_0==125||LA48_0==127))
						{
							alt48 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(48); }
						switch (alt48)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\work\\ReoScript\\ReoScript.g:287:4: ')'
							{
							DebugLocation(287, 4);
							char_literal180=(IToken)Match(input,RPAREN,Follow._RPAREN_in_primaryExpression2216);  
							stream_RPAREN.Add(char_literal180);



							{
							// AST REWRITE
							// elements: primaryExpression
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 287:9: -> ^( FUNCTION_CALL $primaryExpression)
							{
								DebugLocation(287, 12);
								// C:\\work\\ReoScript\\ReoScript.g:287:12: ^( FUNCTION_CALL $primaryExpression)
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(287, 14);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

								DebugLocation(287, 29);
								adaptor.AddChild(root_1, stream_retval.NextTree());

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\work\\ReoScript\\ReoScript.g:288:6: exp= expressionList ')'
							{
							DebugLocation(288, 9);
							PushFollow(Follow._expressionList_in_primaryExpression2235);
							exp=expressionList();
							PopFollow();

							stream_expressionList.Add(exp.Tree);
							DebugLocation(288, 25);
							char_literal181=(IToken)Match(input,RPAREN,Follow._RPAREN_in_primaryExpression2237);  
							stream_RPAREN.Add(char_literal181);



							{
							// AST REWRITE
							// elements: exp, primaryExpression
							// token labels: 
							// rule labels: exp, retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_exp=new RewriteRuleSubtreeStream(adaptor,"rule exp",exp!=null?exp.Tree:null);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 289:6: -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) )
							{
								DebugLocation(289, 9);
								// C:\\work\\ReoScript\\ReoScript.g:289:9: ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) )
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(289, 11);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

								DebugLocation(289, 26);
								adaptor.AddChild(root_1, stream_retval.NextTree());
								DebugLocation(289, 44);
								// C:\\work\\ReoScript\\ReoScript.g:289:44: ^( ARGUMENT_LIST $exp)
								{
								CommonTree root_2 = (CommonTree)adaptor.Nil();
								DebugLocation(289, 46);
								root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGUMENT_LIST, "ARGUMENT_LIST"), root_2);

								DebugLocation(289, 61);
								adaptor.AddChild(root_2, stream_exp.NextTree());

								adaptor.AddChild(root_1, root_2);
								}

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}

							}
							break;

						}
						} finally { DebugExitSubRule(48); }


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\work\\ReoScript\\ReoScript.g:291:5: '.' IDENTIFIER
						{
						DebugLocation(291, 5);
						char_literal182=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression2269);  
						stream_DOT.Add(char_literal182);

						DebugLocation(291, 9);
						IDENTIFIER183=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primaryExpression2271);  
						stream_IDENTIFIER.Add(IDENTIFIER183);



						{
						// AST REWRITE
						// elements: primaryExpression, IDENTIFIER
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 292:4: -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER )
						{
							DebugLocation(292, 7);
							// C:\\work\\ReoScript\\ReoScript.g:292:7: ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(292, 9);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROPERTY_ACCESS, "PROPERTY_ACCESS"), root_1);

							DebugLocation(292, 26);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(292, 44);
							adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\work\\ReoScript\\ReoScript.g:293:5: '[' idx= expression ']'
						{
						DebugLocation(293, 5);
						char_literal184=(IToken)Match(input,LBRACE,Follow._LBRACE_in_primaryExpression2291);  
						stream_LBRACE.Add(char_literal184);

						DebugLocation(293, 12);
						PushFollow(Follow._expression_in_primaryExpression2295);
						idx=expression();
						PopFollow();

						stream_expression.Add(idx.Tree);
						DebugLocation(293, 24);
						char_literal185=(IToken)Match(input,RBRACE,Follow._RBRACE_in_primaryExpression2297);  
						stream_RBRACE.Add(char_literal185);



						{
						// AST REWRITE
						// elements: primaryExpression, idx
						// token labels: 
						// rule labels: retval, idx
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_idx=new RewriteRuleSubtreeStream(adaptor,"rule idx",idx!=null?idx.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 294:4: -> ^( ARRAY_ACCESS $primaryExpression $idx)
						{
							DebugLocation(294, 7);
							// C:\\work\\ReoScript\\ReoScript.g:294:7: ^( ARRAY_ACCESS $primaryExpression $idx)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(294, 9);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_ACCESS, "ARRAY_ACCESS"), root_1);

							DebugLocation(294, 23);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(294, 42);
							adaptor.AddChild(root_1, stream_idx.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\work\\ReoScript\\ReoScript.g:295:5: object_literal
						{
						DebugLocation(295, 5);
						PushFollow(Follow._object_literal_in_primaryExpression2318);
						object_literal186=object_literal();
						PopFollow();

						stream_object_literal.Add(object_literal186.Tree);


						{
						// AST REWRITE
						// elements: primaryExpression, object_literal
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 296:4: -> ^( COMBINE_OBJECT $primaryExpression object_literal )
						{
							DebugLocation(296, 7);
							// C:\\work\\ReoScript\\ReoScript.g:296:7: ^( COMBINE_OBJECT $primaryExpression object_literal )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(296, 9);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(COMBINE_OBJECT, "COMBINE_OBJECT"), root_1);

							DebugLocation(296, 25);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(296, 43);
							adaptor.AddChild(root_1, stream_object_literal.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					default:
						goto loop49;
					}
				}

				loop49:
					;

				} finally { DebugExitSubRule(49); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:298:4: ( object_literal -> object_literal ) ( '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) )*
				{
				DebugLocation(298, 4);
				// C:\\work\\ReoScript\\ReoScript.g:298:4: ( object_literal -> object_literal )
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:299:2: object_literal
				{
				DebugLocation(299, 2);
				PushFollow(Follow._object_literal_in_primaryExpression2344);
				object_literal187=object_literal();
				PopFollow();

				stream_object_literal.Add(object_literal187.Tree);


				{
				// AST REWRITE
				// elements: object_literal
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 299:20: -> object_literal
				{
					DebugLocation(299, 23);
					adaptor.AddChild(root_0, stream_object_literal.NextTree());

				}

				retval.Tree = root_0;
				}

				}

				DebugLocation(301, 2);
				// C:\\work\\ReoScript\\ReoScript.g:301:2: ( '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) )*
				try { DebugEnterSubRule(50);
				while (true)
				{
					int alt50=2;
					try { DebugEnterDecision(50, false);
					int LA50_0 = input.LA(1);

					if ((LA50_0==DOT))
					{
						int LA50_2 = input.LA(2);

						if ((LA50_2==IDENTIFIER))
						{
							alt50 = 1;
						}


					}


					} finally { DebugExitDecision(50); }
					switch ( alt50 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\work\\ReoScript\\ReoScript.g:301:4: '.' IDENTIFIER
						{
						DebugLocation(301, 4);
						char_literal188=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression2359);  
						stream_DOT.Add(char_literal188);

						DebugLocation(301, 8);
						IDENTIFIER189=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primaryExpression2361);  
						stream_IDENTIFIER.Add(IDENTIFIER189);



						{
						// AST REWRITE
						// elements: IDENTIFIER, primaryExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 302:3: -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER )
						{
							DebugLocation(302, 6);
							// C:\\work\\ReoScript\\ReoScript.g:302:6: ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(302, 8);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROPERTY_ACCESS, "PROPERTY_ACCESS"), root_1);

							DebugLocation(302, 25);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(302, 43);
							adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					default:
						goto loop50;
					}
				}

				loop50:
					;

				} finally { DebugExitSubRule(50); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primaryExpression", 33);
			LeaveRule("primaryExpression", 33);
			LeaveRule_primaryExpression();
		}
		DebugLocation(304, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return retval;

	}
	// $ANTLR end "primaryExpression"

	partial void EnterRule_tag();
	partial void LeaveRule_tag();

	// $ANTLR start "tag"
	// C:\\work\\ReoScript\\ReoScript.g:306:1: tag : '<' (ns= IDENTIFIER ':' )? name= IDENTIFIER ( tagAttr )* ( '>' s= tagStmt '</' ( IDENTIFIER ':' )? IDENTIFIER '>' | '/>' ) -> ^( TAG ^( TAG_NAME $name ( $ns)? ) ^( TAG_ATTR_LIST ( tagAttr )* ) ( $s)? ) ;
	[GrammarRule("tag")]
	private AstParserRuleReturnScope<CommonTree, IToken> tag()
	{
		EnterRule_tag();
		EnterRule("tag", 34);
		TraceIn("tag", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken ns = default(IToken);
		IToken name = default(IToken);
		IToken char_literal190 = default(IToken);
		IToken char_literal191 = default(IToken);
		IToken char_literal193 = default(IToken);
		IToken string_literal194 = default(IToken);
		IToken IDENTIFIER195 = default(IToken);
		IToken char_literal196 = default(IToken);
		IToken IDENTIFIER197 = default(IToken);
		IToken char_literal198 = default(IToken);
		IToken string_literal199 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> s = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> tagAttr192 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ns_tree = default(CommonTree);
		CommonTree name_tree = default(CommonTree);
		CommonTree char_literal190_tree = default(CommonTree);
		CommonTree char_literal191_tree = default(CommonTree);
		CommonTree char_literal193_tree = default(CommonTree);
		CommonTree string_literal194_tree = default(CommonTree);
		CommonTree IDENTIFIER195_tree = default(CommonTree);
		CommonTree char_literal196_tree = default(CommonTree);
		CommonTree IDENTIFIER197_tree = default(CommonTree);
		CommonTree char_literal198_tree = default(CommonTree);
		CommonTree string_literal199_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_GREAT_THAN=new RewriteRuleITokenStream(adaptor,"token GREAT_THAN");
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleSubtreeStream stream_tagAttr=new RewriteRuleSubtreeStream(adaptor,"rule tagAttr");
		RewriteRuleSubtreeStream stream_tagStmt=new RewriteRuleSubtreeStream(adaptor,"rule tagStmt");
		try { DebugEnterRule(GrammarFileName, "tag");
		DebugLocation(306, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:307:2: ( '<' (ns= IDENTIFIER ':' )? name= IDENTIFIER ( tagAttr )* ( '>' s= tagStmt '</' ( IDENTIFIER ':' )? IDENTIFIER '>' | '/>' ) -> ^( TAG ^( TAG_NAME $name ( $ns)? ) ^( TAG_ATTR_LIST ( tagAttr )* ) ( $s)? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:307:4: '<' (ns= IDENTIFIER ':' )? name= IDENTIFIER ( tagAttr )* ( '>' s= tagStmt '</' ( IDENTIFIER ':' )? IDENTIFIER '>' | '/>' )
			{
			DebugLocation(307, 4);
			char_literal190=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_tag2389);  
			stream_LESS_THAN.Add(char_literal190);

			DebugLocation(307, 8);
			// C:\\work\\ReoScript\\ReoScript.g:307:8: (ns= IDENTIFIER ':' )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==IDENTIFIER))
			{
				int LA52_1 = input.LA(2);

				if ((LA52_1==COLON))
				{
					alt52 = 1;
				}
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:307:9: ns= IDENTIFIER ':'
				{
				DebugLocation(307, 11);
				ns=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tag2394);  
				stream_IDENTIFIER.Add(ns);

				DebugLocation(307, 23);
				char_literal191=(IToken)Match(input,COLON,Follow._COLON_in_tag2396);  
				stream_COLON.Add(char_literal191);


				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(307, 33);
			name=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tag2402);  
			stream_IDENTIFIER.Add(name);

			DebugLocation(307, 45);
			// C:\\work\\ReoScript\\ReoScript.g:307:45: ( tagAttr )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==IDENTIFIER))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:307:45: tagAttr
					{
					DebugLocation(307, 45);
					PushFollow(Follow._tagAttr_in_tag2404);
					tagAttr192=tagAttr();
					PopFollow();

					stream_tagAttr.Add(tagAttr192.Tree);

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }

			DebugLocation(308, 2);
			// C:\\work\\ReoScript\\ReoScript.g:308:2: ( '>' s= tagStmt '</' ( IDENTIFIER ':' )? IDENTIFIER '>' | '/>' )
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==GREAT_THAN))
			{
				alt55 = 1;
			}
			else if ((LA55_0==107))
			{
				alt55 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:309:4: '>' s= tagStmt '</' ( IDENTIFIER ':' )? IDENTIFIER '>'
				{
				DebugLocation(309, 4);
				char_literal193=(IToken)Match(input,GREAT_THAN,Follow._GREAT_THAN_in_tag2414);  
				stream_GREAT_THAN.Add(char_literal193);

				DebugLocation(309, 9);
				PushFollow(Follow._tagStmt_in_tag2418);
				s=tagStmt();
				PopFollow();

				stream_tagStmt.Add(s.Tree);
				DebugLocation(309, 19);
				string_literal194=(IToken)Match(input,108,Follow._108_in_tag2421);  
				stream_108.Add(string_literal194);

				DebugLocation(309, 24);
				// C:\\work\\ReoScript\\ReoScript.g:309:24: ( IDENTIFIER ':' )?
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==IDENTIFIER))
				{
					int LA54_1 = input.LA(2);

					if ((LA54_1==COLON))
					{
						alt54 = 1;
					}
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:309:25: IDENTIFIER ':'
					{
					DebugLocation(309, 25);
					IDENTIFIER195=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tag2424);  
					stream_IDENTIFIER.Add(IDENTIFIER195);

					DebugLocation(309, 36);
					char_literal196=(IToken)Match(input,COLON,Follow._COLON_in_tag2426);  
					stream_COLON.Add(char_literal196);


					}
					break;

				}
				} finally { DebugExitSubRule(54); }

				DebugLocation(309, 42);
				IDENTIFIER197=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tag2430);  
				stream_IDENTIFIER.Add(IDENTIFIER197);

				DebugLocation(309, 53);
				char_literal198=(IToken)Match(input,GREAT_THAN,Follow._GREAT_THAN_in_tag2432);  
				stream_GREAT_THAN.Add(char_literal198);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:310:4: '/>'
				{
				DebugLocation(310, 4);
				string_literal199=(IToken)Match(input,107,Follow._107_in_tag2438);  
				stream_107.Add(string_literal199);


				}
				break;

			}
			} finally { DebugExitSubRule(55); }



			{
			// AST REWRITE
			// elements: s, name, ns, tagAttr
			// token labels: ns, name
			// rule labels: retval, s
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_ns=new RewriteRuleITokenStream(adaptor,"token ns",ns);
			RewriteRuleITokenStream stream_name=new RewriteRuleITokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 312:2: -> ^( TAG ^( TAG_NAME $name ( $ns)? ) ^( TAG_ATTR_LIST ( tagAttr )* ) ( $s)? )
			{
				DebugLocation(312, 5);
				// C:\\work\\ReoScript\\ReoScript.g:312:5: ^( TAG ^( TAG_NAME $name ( $ns)? ) ^( TAG_ATTR_LIST ( tagAttr )* ) ( $s)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(312, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAG, "TAG"), root_1);

				DebugLocation(312, 11);
				// C:\\work\\ReoScript\\ReoScript.g:312:11: ^( TAG_NAME $name ( $ns)? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(312, 13);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAG_NAME, "TAG_NAME"), root_2);

				DebugLocation(312, 23);
				adaptor.AddChild(root_2, stream_name.NextNode());
				DebugLocation(312, 29);
				// C:\\work\\ReoScript\\ReoScript.g:312:29: ( $ns)?
				if (stream_ns.HasNext)
				{
					DebugLocation(312, 29);
					adaptor.AddChild(root_2, stream_ns.NextNode());

				}
				stream_ns.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(312, 34);
				// C:\\work\\ReoScript\\ReoScript.g:312:34: ^( TAG_ATTR_LIST ( tagAttr )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(312, 36);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAG_ATTR_LIST, "TAG_ATTR_LIST"), root_2);

				DebugLocation(312, 50);
				// C:\\work\\ReoScript\\ReoScript.g:312:50: ( tagAttr )*
				while ( stream_tagAttr.HasNext )
				{
					DebugLocation(312, 50);
					adaptor.AddChild(root_2, stream_tagAttr.NextTree());

				}
				stream_tagAttr.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(312, 61);
				// C:\\work\\ReoScript\\ReoScript.g:312:61: ( $s)?
				if (stream_s.HasNext)
				{
					DebugLocation(312, 61);
					adaptor.AddChild(root_1, stream_s.NextTree());

				}
				stream_s.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tag", 34);
			LeaveRule("tag", 34);
			LeaveRule_tag();
		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "tag"); }
		return retval;

	}
	// $ANTLR end "tag"

	partial void EnterRule_tagStmt();
	partial void LeaveRule_tagStmt();

	// $ANTLR start "tagStmt"
	// C:\\work\\ReoScript\\ReoScript.g:315:1: tagStmt : ( statement | tag )* ;
	[GrammarRule("tagStmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> tagStmt()
	{
		EnterRule_tagStmt();
		EnterRule("tagStmt", 35);
		TraceIn("tagStmt", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> statement200 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> tag201 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "tagStmt");
		DebugLocation(315, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:316:2: ( ( statement | tag )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:316:4: ( statement | tag )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(316, 4);
			// C:\\work\\ReoScript\\ReoScript.g:316:4: ( statement | tag )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=3;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==BINARY_LITERATE||LA56_0==DECREMENT||LA56_0==FALSE||(LA56_0>=HEX_LITERATE && LA56_0<=IDENTIFIER)||LA56_0==INCREMENT||(LA56_0>=LBRACE && LA56_0<=LCURLY)||LA56_0==LPAREN||(LA56_0>=NULL && LA56_0<=NUMBER_LITERATE)||LA56_0==SCOPE_MODIFIER||LA56_0==STRING_LITERATE||(LA56_0>=THIS && LA56_0<=TYPE)||LA56_0==UNDEFINED||LA56_0==110||(LA56_0>=112 && LA56_0<=113)||(LA56_0>=115 && LA56_0<=119)||(LA56_0>=122 && LA56_0<=124)||LA56_0==126))
				{
					alt56 = 1;
				}
				else if ((LA56_0==LESS_THAN))
				{
					alt56 = 2;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:316:5: statement
					{
					DebugLocation(316, 5);
					PushFollow(Follow._statement_in_tagStmt2485);
					statement200=statement();
					PopFollow();

					adaptor.AddChild(root_0, statement200.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:316:17: tag
					{
					DebugLocation(316, 17);
					PushFollow(Follow._tag_in_tagStmt2489);
					tag201=tag();
					PopFollow();

					adaptor.AddChild(root_0, tag201.Tree);

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tagStmt", 35);
			LeaveRule("tagStmt", 35);
			LeaveRule_tagStmt();
		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "tagStmt"); }
		return retval;

	}
	// $ANTLR end "tagStmt"

	partial void EnterRule_tagAttr();
	partial void LeaveRule_tagAttr();

	// $ANTLR start "tagAttr"
	// C:\\work\\ReoScript\\ReoScript.g:334:1: tagAttr : name= IDENTIFIER '=' val= primaryExpression -> ^( TAG_ATTR $name $val) ;
	[GrammarRule("tagAttr")]
	private AstParserRuleReturnScope<CommonTree, IToken> tagAttr()
	{
		EnterRule_tagAttr();
		EnterRule("tagAttr", 36);
		TraceIn("tagAttr", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken name = default(IToken);
		IToken char_literal202 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> val = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree name_tree = default(CommonTree);
		CommonTree char_literal202_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGNMENT=new RewriteRuleITokenStream(adaptor,"token ASSIGNMENT");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "tagAttr");
		DebugLocation(334, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:335:2: (name= IDENTIFIER '=' val= primaryExpression -> ^( TAG_ATTR $name $val) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:335:4: name= IDENTIFIER '=' val= primaryExpression
			{
			DebugLocation(335, 8);
			name=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tagAttr2508);  
			stream_IDENTIFIER.Add(name);

			DebugLocation(335, 20);
			char_literal202=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_tagAttr2510);  
			stream_ASSIGNMENT.Add(char_literal202);

			DebugLocation(335, 27);
			PushFollow(Follow._primaryExpression_in_tagAttr2514);
			val=primaryExpression();
			PopFollow();

			stream_primaryExpression.Add(val.Tree);


			{
			// AST REWRITE
			// elements: name, val
			// token labels: name
			// rule labels: val, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_name=new RewriteRuleITokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_val=new RewriteRuleSubtreeStream(adaptor,"rule val",val!=null?val.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 336:3: -> ^( TAG_ATTR $name $val)
			{
				DebugLocation(336, 6);
				// C:\\work\\ReoScript\\ReoScript.g:336:6: ^( TAG_ATTR $name $val)
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(336, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAG_ATTR, "TAG_ATTR"), root_1);

				DebugLocation(336, 18);
				adaptor.AddChild(root_1, stream_name.NextNode());
				DebugLocation(336, 24);
				adaptor.AddChild(root_1, stream_val.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tagAttr", 36);
			LeaveRule("tagAttr", 36);
			LeaveRule_tagAttr();
		}
		DebugLocation(337, 1);
		} finally { DebugExitRule(GrammarFileName, "tagAttr"); }
		return retval;

	}
	// $ANTLR end "tagAttr"

	partial void EnterRule_variable();
	partial void LeaveRule_variable();

	// $ANTLR start "variable"
	// C:\\work\\ReoScript\\ReoScript.g:339:1: variable : IDENTIFIER ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<CommonTree, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 37);
		TraceIn("variable", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER203 = default(IToken);

		CommonTree IDENTIFIER203_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(339, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:340:2: ( IDENTIFIER )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:340:4: IDENTIFIER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(340, 4);
			IDENTIFIER203=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_variable2539); 
			IDENTIFIER203_tree = (CommonTree)adaptor.Create(IDENTIFIER203);
			adaptor.AddChild(root_0, IDENTIFIER203_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 37);
			LeaveRule("variable", 37);
			LeaveRule_variable();
		}
		DebugLocation(341, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"

	partial void EnterRule_array_literal();
	partial void LeaveRule_array_literal();

	// $ANTLR start "array_literal"
	// C:\\work\\ReoScript\\ReoScript.g:343:1: array_literal : '[' ( expressionList )? ( ',' )* ']' -> ^( ARRAY_LITERAL ( expressionList )? ) ;
	[GrammarRule("array_literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> array_literal()
	{
		EnterRule_array_literal();
		EnterRule("array_literal", 38);
		TraceIn("array_literal", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal204 = default(IToken);
		IToken char_literal206 = default(IToken);
		IToken char_literal207 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expressionList205 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal204_tree = default(CommonTree);
		CommonTree char_literal206_tree = default(CommonTree);
		CommonTree char_literal207_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RBRACE=new RewriteRuleITokenStream(adaptor,"token RBRACE");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_LBRACE=new RewriteRuleITokenStream(adaptor,"token LBRACE");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		try { DebugEnterRule(GrammarFileName, "array_literal");
		DebugLocation(343, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:344:2: ( '[' ( expressionList )? ( ',' )* ']' -> ^( ARRAY_LITERAL ( expressionList )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:344:4: '[' ( expressionList )? ( ',' )* ']'
			{
			DebugLocation(344, 4);
			char_literal204=(IToken)Match(input,LBRACE,Follow._LBRACE_in_array_literal2550);  
			stream_LBRACE.Add(char_literal204);

			DebugLocation(344, 8);
			// C:\\work\\ReoScript\\ReoScript.g:344:8: ( expressionList )?
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==BINARY_LITERATE||LA57_0==DECREMENT||LA57_0==FALSE||(LA57_0>=HEX_LITERATE && LA57_0<=IDENTIFIER)||LA57_0==INCREMENT||(LA57_0>=LBRACE && LA57_0<=LCURLY)||LA57_0==LESS_THAN||LA57_0==LPAREN||LA57_0==MINUS||LA57_0==NOT||(LA57_0>=NULL && LA57_0<=NUMBER_LITERATE)||LA57_0==PLUS||LA57_0==STRING_LITERATE||(LA57_0>=THIS && LA57_0<=TRUE)||LA57_0==UNDEFINED||LA57_0==117||LA57_0==122||LA57_0==125||LA57_0==127))
			{
				alt57 = 1;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:344:8: expressionList
				{
				DebugLocation(344, 8);
				PushFollow(Follow._expressionList_in_array_literal2552);
				expressionList205=expressionList();
				PopFollow();

				stream_expressionList.Add(expressionList205.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(57); }

			DebugLocation(344, 24);
			// C:\\work\\ReoScript\\ReoScript.g:344:24: ( ',' )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if ((LA58_0==COMMA))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:344:24: ','
					{
					DebugLocation(344, 24);
					char_literal206=(IToken)Match(input,COMMA,Follow._COMMA_in_array_literal2555);  
					stream_COMMA.Add(char_literal206);


					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }

			DebugLocation(344, 29);
			char_literal207=(IToken)Match(input,RBRACE,Follow._RBRACE_in_array_literal2558);  
			stream_RBRACE.Add(char_literal207);



			{
			// AST REWRITE
			// elements: expressionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 345:4: -> ^( ARRAY_LITERAL ( expressionList )? )
			{
				DebugLocation(345, 7);
				// C:\\work\\ReoScript\\ReoScript.g:345:7: ^( ARRAY_LITERAL ( expressionList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(345, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_LITERAL, "ARRAY_LITERAL"), root_1);

				DebugLocation(345, 23);
				// C:\\work\\ReoScript\\ReoScript.g:345:23: ( expressionList )?
				if (stream_expressionList.HasNext)
				{
					DebugLocation(345, 23);
					adaptor.AddChild(root_1, stream_expressionList.NextTree());

				}
				stream_expressionList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("array_literal", 38);
			LeaveRule("array_literal", 38);
			LeaveRule_array_literal();
		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "array_literal"); }
		return retval;

	}
	// $ANTLR end "array_literal"

	partial void EnterRule_object_literal();
	partial void LeaveRule_object_literal();

	// $ANTLR start "object_literal"
	// C:\\work\\ReoScript\\ReoScript.g:348:1: object_literal : '{' ( keypair )? ( ',' keypair )* ( ',' )* '}' -> ^( OBJECT_LITERAL ( keypair )* ) ;
	[GrammarRule("object_literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> object_literal()
	{
		EnterRule_object_literal();
		EnterRule("object_literal", 39);
		TraceIn("object_literal", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal208 = default(IToken);
		IToken char_literal210 = default(IToken);
		IToken char_literal212 = default(IToken);
		IToken char_literal213 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> keypair209 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> keypair211 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal208_tree = default(CommonTree);
		CommonTree char_literal210_tree = default(CommonTree);
		CommonTree char_literal212_tree = default(CommonTree);
		CommonTree char_literal213_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_keypair=new RewriteRuleSubtreeStream(adaptor,"rule keypair");
		try { DebugEnterRule(GrammarFileName, "object_literal");
		DebugLocation(348, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:349:2: ( '{' ( keypair )? ( ',' keypair )* ( ',' )* '}' -> ^( OBJECT_LITERAL ( keypair )* ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:349:4: '{' ( keypair )? ( ',' keypair )* ( ',' )* '}'
			{
			DebugLocation(349, 4);
			char_literal208=(IToken)Match(input,LCURLY,Follow._LCURLY_in_object_literal2581);  
			stream_LCURLY.Add(char_literal208);

			DebugLocation(349, 8);
			// C:\\work\\ReoScript\\ReoScript.g:349:8: ( keypair )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==IDENTIFIER||LA59_0==STRING_LITERATE))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:349:8: keypair
				{
				DebugLocation(349, 8);
				PushFollow(Follow._keypair_in_object_literal2583);
				keypair209=keypair();
				PopFollow();

				stream_keypair.Add(keypair209.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(349, 17);
			// C:\\work\\ReoScript\\ReoScript.g:349:17: ( ',' keypair )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==COMMA))
				{
					int LA60_1 = input.LA(2);

					if ((LA60_1==IDENTIFIER||LA60_1==STRING_LITERATE))
					{
						alt60 = 1;
					}


				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:349:18: ',' keypair
					{
					DebugLocation(349, 18);
					char_literal210=(IToken)Match(input,COMMA,Follow._COMMA_in_object_literal2587);  
					stream_COMMA.Add(char_literal210);

					DebugLocation(349, 22);
					PushFollow(Follow._keypair_in_object_literal2589);
					keypair211=keypair();
					PopFollow();

					stream_keypair.Add(keypair211.Tree);

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }

			DebugLocation(349, 32);
			// C:\\work\\ReoScript\\ReoScript.g:349:32: ( ',' )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==COMMA))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:349:32: ','
					{
					DebugLocation(349, 32);
					char_literal212=(IToken)Match(input,COMMA,Follow._COMMA_in_object_literal2593);  
					stream_COMMA.Add(char_literal212);


					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }

			DebugLocation(349, 37);
			char_literal213=(IToken)Match(input,RCURLY,Follow._RCURLY_in_object_literal2596);  
			stream_RCURLY.Add(char_literal213);



			{
			// AST REWRITE
			// elements: keypair
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 350:4: -> ^( OBJECT_LITERAL ( keypair )* )
			{
				DebugLocation(350, 7);
				// C:\\work\\ReoScript\\ReoScript.g:350:7: ^( OBJECT_LITERAL ( keypair )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(350, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(OBJECT_LITERAL, "OBJECT_LITERAL"), root_1);

				DebugLocation(350, 24);
				// C:\\work\\ReoScript\\ReoScript.g:350:24: ( keypair )*
				while ( stream_keypair.HasNext )
				{
					DebugLocation(350, 24);
					adaptor.AddChild(root_1, stream_keypair.NextTree());

				}
				stream_keypair.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("object_literal", 39);
			LeaveRule("object_literal", 39);
			LeaveRule_object_literal();
		}
		DebugLocation(351, 1);
		} finally { DebugExitRule(GrammarFileName, "object_literal"); }
		return retval;

	}
	// $ANTLR end "object_literal"

	partial void EnterRule_keypair();
	partial void LeaveRule_keypair();

	// $ANTLR start "keypair"
	// C:\\work\\ReoScript\\ReoScript.g:353:1: keypair : ( variable | STRING_LITERATE ) ':' ! expression ;
	[GrammarRule("keypair")]
	private AstParserRuleReturnScope<CommonTree, IToken> keypair()
	{
		EnterRule_keypair();
		EnterRule("keypair", 40);
		TraceIn("keypair", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken STRING_LITERATE215 = default(IToken);
		IToken char_literal216 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variable214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression217 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree STRING_LITERATE215_tree = default(CommonTree);
		CommonTree char_literal216_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "keypair");
		DebugLocation(353, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:354:2: ( ( variable | STRING_LITERATE ) ':' ! expression )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:354:4: ( variable | STRING_LITERATE ) ':' ! expression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(354, 4);
			// C:\\work\\ReoScript\\ReoScript.g:354:4: ( variable | STRING_LITERATE )
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==IDENTIFIER))
			{
				alt62 = 1;
			}
			else if ((LA62_0==STRING_LITERATE))
			{
				alt62 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:354:5: variable
				{
				DebugLocation(354, 5);
				PushFollow(Follow._variable_in_keypair2621);
				variable214=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable214.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:354:14: STRING_LITERATE
				{
				DebugLocation(354, 14);
				STRING_LITERATE215=(IToken)Match(input,STRING_LITERATE,Follow._STRING_LITERATE_in_keypair2623); 
				STRING_LITERATE215_tree = (CommonTree)adaptor.Create(STRING_LITERATE215);
				adaptor.AddChild(root_0, STRING_LITERATE215_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(354, 34);
			char_literal216=(IToken)Match(input,COLON,Follow._COLON_in_keypair2626); 
			DebugLocation(354, 36);
			PushFollow(Follow._expression_in_keypair2629);
			expression217=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression217.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keypair", 40);
			LeaveRule("keypair", 40);
			LeaveRule_keypair();
		}
		DebugLocation(355, 1);
		} finally { DebugExitRule(GrammarFileName, "keypair"); }
		return retval;

	}
	// $ANTLR end "keypair"

	partial void EnterRule_ifelse();
	partial void LeaveRule_ifelse();

	// $ANTLR start "ifelse"
	// C:\\work\\ReoScript\\ReoScript.g:359:1: ifelse : 'if' LPAREN conditionalOrExpression RPAREN es1= embeddedStatement ( 'else' es2= embeddedStatement )? -> ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? ) ;
	[GrammarRule("ifelse")]
	private AstParserRuleReturnScope<CommonTree, IToken> ifelse()
	{
		EnterRule_ifelse();
		EnterRule("ifelse", 41);
		TraceIn("ifelse", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal218 = default(IToken);
		IToken LPAREN219 = default(IToken);
		IToken RPAREN221 = default(IToken);
		IToken string_literal222 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> es1 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> es2 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression220 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal218_tree = default(CommonTree);
		CommonTree LPAREN219_tree = default(CommonTree);
		CommonTree RPAREN221_tree = default(CommonTree);
		CommonTree string_literal222_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		try { DebugEnterRule(GrammarFileName, "ifelse");
		DebugLocation(359, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:360:2: ( 'if' LPAREN conditionalOrExpression RPAREN es1= embeddedStatement ( 'else' es2= embeddedStatement )? -> ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:360:4: 'if' LPAREN conditionalOrExpression RPAREN es1= embeddedStatement ( 'else' es2= embeddedStatement )?
			{
			DebugLocation(360, 4);
			string_literal218=(IToken)Match(input,118,Follow._118_in_ifelse2644);  
			stream_118.Add(string_literal218);

			DebugLocation(360, 9);
			LPAREN219=(IToken)Match(input,LPAREN,Follow._LPAREN_in_ifelse2646);  
			stream_LPAREN.Add(LPAREN219);

			DebugLocation(360, 16);
			PushFollow(Follow._conditionalOrExpression_in_ifelse2648);
			conditionalOrExpression220=conditionalOrExpression();
			PopFollow();

			stream_conditionalOrExpression.Add(conditionalOrExpression220.Tree);
			DebugLocation(360, 40);
			RPAREN221=(IToken)Match(input,RPAREN,Follow._RPAREN_in_ifelse2650);  
			stream_RPAREN.Add(RPAREN221);

			DebugLocation(360, 50);
			PushFollow(Follow._embeddedStatement_in_ifelse2654);
			es1=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(es1.Tree);
			DebugLocation(360, 69);
			// C:\\work\\ReoScript\\ReoScript.g:360:69: ( 'else' es2= embeddedStatement )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==ELSE))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:360:70: 'else' es2= embeddedStatement
				{
				DebugLocation(360, 70);
				string_literal222=(IToken)Match(input,ELSE,Follow._ELSE_in_ifelse2657);  
				stream_ELSE.Add(string_literal222);

				DebugLocation(360, 80);
				PushFollow(Follow._embeddedStatement_in_ifelse2661);
				es2=embeddedStatement();
				PopFollow();

				stream_embeddedStatement.Add(es2.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(63); }



			{
			// AST REWRITE
			// elements: conditionalOrExpression, es2, es1
			// token labels: 
			// rule labels: retval, es2, es1
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_es2=new RewriteRuleSubtreeStream(adaptor,"rule es2",es2!=null?es2.Tree:null);
			RewriteRuleSubtreeStream stream_es1=new RewriteRuleSubtreeStream(adaptor,"rule es1",es1!=null?es1.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 361:3: -> ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? )
			{
				DebugLocation(361, 6);
				// C:\\work\\ReoScript\\ReoScript.g:361:6: ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(361, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IF_STATEMENT, "IF_STATEMENT"), root_1);

				DebugLocation(361, 21);
				adaptor.AddChild(root_1, stream_conditionalOrExpression.NextTree());
				DebugLocation(361, 46);
				adaptor.AddChild(root_1, stream_es1.NextTree());
				DebugLocation(361, 51);
				// C:\\work\\ReoScript\\ReoScript.g:361:51: ( $es2)?
				if (stream_es2.HasNext)
				{
					DebugLocation(361, 51);
					adaptor.AddChild(root_1, stream_es2.NextTree());

				}
				stream_es2.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ifelse", 41);
			LeaveRule("ifelse", 41);
			LeaveRule_ifelse();
		}
		DebugLocation(362, 1);
		} finally { DebugExitRule(GrammarFileName, "ifelse"); }
		return retval;

	}
	// $ANTLR end "ifelse"

	partial void EnterRule_forStatement();
	partial void LeaveRule_forStatement();

	// $ANTLR start "forStatement"
	// C:\\work\\ReoScript\\ReoScript.g:364:1: forStatement : 'for' '(' ( forInit )? SEMI ( conditionalOrExpression )? SEMI ( statementExpressionList )? ')' embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) ) ;
	[GrammarRule("forStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> forStatement()
	{
		EnterRule_forStatement();
		EnterRule("forStatement", 42);
		TraceIn("forStatement", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal223 = default(IToken);
		IToken char_literal224 = default(IToken);
		IToken SEMI226 = default(IToken);
		IToken SEMI228 = default(IToken);
		IToken char_literal230 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> forInit225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression227 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpressionList229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement231 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal223_tree = default(CommonTree);
		CommonTree char_literal224_tree = default(CommonTree);
		CommonTree SEMI226_tree = default(CommonTree);
		CommonTree SEMI228_tree = default(CommonTree);
		CommonTree char_literal230_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
		RewriteRuleSubtreeStream stream_statementExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule statementExpressionList");
		try { DebugEnterRule(GrammarFileName, "forStatement");
		DebugLocation(364, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:365:2: ( 'for' '(' ( forInit )? SEMI ( conditionalOrExpression )? SEMI ( statementExpressionList )? ')' embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:365:4: 'for' '(' ( forInit )? SEMI ( conditionalOrExpression )? SEMI ( statementExpressionList )? ')' embeddedStatement
			{
			DebugLocation(365, 4);
			string_literal223=(IToken)Match(input,116,Follow._116_in_forStatement2695);  
			stream_116.Add(string_literal223);

			DebugLocation(365, 10);
			char_literal224=(IToken)Match(input,LPAREN,Follow._LPAREN_in_forStatement2697);  
			stream_LPAREN.Add(char_literal224);

			DebugLocation(365, 14);
			// C:\\work\\ReoScript\\ReoScript.g:365:14: ( forInit )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==BINARY_LITERATE||LA64_0==DECREMENT||LA64_0==FALSE||(LA64_0>=HEX_LITERATE && LA64_0<=IDENTIFIER)||LA64_0==INCREMENT||(LA64_0>=LBRACE && LA64_0<=LCURLY)||LA64_0==LPAREN||(LA64_0>=NULL && LA64_0<=NUMBER_LITERATE)||LA64_0==STRING_LITERATE||(LA64_0>=THIS && LA64_0<=TYPE)||LA64_0==UNDEFINED||LA64_0==115||LA64_0==117||LA64_0==122))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:365:14: forInit
				{
				DebugLocation(365, 14);
				PushFollow(Follow._forInit_in_forStatement2699);
				forInit225=forInit();
				PopFollow();

				stream_forInit.Add(forInit225.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }

			DebugLocation(365, 23);
			SEMI226=(IToken)Match(input,SEMI,Follow._SEMI_in_forStatement2702);  
			stream_SEMI.Add(SEMI226);

			DebugLocation(365, 28);
			// C:\\work\\ReoScript\\ReoScript.g:365:28: ( conditionalOrExpression )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==BINARY_LITERATE||LA65_0==DECREMENT||LA65_0==FALSE||(LA65_0>=HEX_LITERATE && LA65_0<=IDENTIFIER)||LA65_0==INCREMENT||(LA65_0>=LBRACE && LA65_0<=LCURLY)||LA65_0==LPAREN||LA65_0==MINUS||LA65_0==NOT||(LA65_0>=NULL && LA65_0<=NUMBER_LITERATE)||LA65_0==PLUS||LA65_0==STRING_LITERATE||(LA65_0>=THIS && LA65_0<=TRUE)||LA65_0==UNDEFINED||LA65_0==117||LA65_0==122||LA65_0==125||LA65_0==127))
			{
				alt65 = 1;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:365:28: conditionalOrExpression
				{
				DebugLocation(365, 28);
				PushFollow(Follow._conditionalOrExpression_in_forStatement2704);
				conditionalOrExpression227=conditionalOrExpression();
				PopFollow();

				stream_conditionalOrExpression.Add(conditionalOrExpression227.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(65); }

			DebugLocation(365, 53);
			SEMI228=(IToken)Match(input,SEMI,Follow._SEMI_in_forStatement2707);  
			stream_SEMI.Add(SEMI228);

			DebugLocation(365, 58);
			// C:\\work\\ReoScript\\ReoScript.g:365:58: ( statementExpressionList )?
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==BINARY_LITERATE||LA66_0==DECREMENT||LA66_0==FALSE||(LA66_0>=HEX_LITERATE && LA66_0<=IDENTIFIER)||LA66_0==INCREMENT||(LA66_0>=LBRACE && LA66_0<=LCURLY)||LA66_0==LPAREN||(LA66_0>=NULL && LA66_0<=NUMBER_LITERATE)||LA66_0==STRING_LITERATE||(LA66_0>=THIS && LA66_0<=TRUE)||LA66_0==UNDEFINED||LA66_0==115||LA66_0==117||LA66_0==122))
			{
				alt66 = 1;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:365:58: statementExpressionList
				{
				DebugLocation(365, 58);
				PushFollow(Follow._statementExpressionList_in_forStatement2709);
				statementExpressionList229=statementExpressionList();
				PopFollow();

				stream_statementExpressionList.Add(statementExpressionList229.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(66); }

			DebugLocation(365, 83);
			char_literal230=(IToken)Match(input,RPAREN,Follow._RPAREN_in_forStatement2712);  
			stream_RPAREN.Add(char_literal230);

			DebugLocation(365, 87);
			PushFollow(Follow._embeddedStatement_in_forStatement2714);
			embeddedStatement231=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(embeddedStatement231.Tree);


			{
			// AST REWRITE
			// elements: embeddedStatement, forInit, statementExpressionList, conditionalOrExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 366:3: -> ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) )
			{
				DebugLocation(366, 6);
				// C:\\work\\ReoScript\\ReoScript.g:366:6: ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(366, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_STATEMENT, "FOR_STATEMENT"), root_1);

				DebugLocation(367, 5);
				// C:\\work\\ReoScript\\ReoScript.g:367:5: ^( FOR_INIT ( forInit )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(367, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_2);

				DebugLocation(367, 16);
				// C:\\work\\ReoScript\\ReoScript.g:367:16: ( forInit )?
				if (stream_forInit.HasNext)
				{
					DebugLocation(367, 16);
					adaptor.AddChild(root_2, stream_forInit.NextTree());

				}
				stream_forInit.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(368, 5);
				// C:\\work\\ReoScript\\ReoScript.g:368:5: ^( FOR_CONDITION ( conditionalOrExpression )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(368, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_CONDITION, "FOR_CONDITION"), root_2);

				DebugLocation(368, 21);
				// C:\\work\\ReoScript\\ReoScript.g:368:21: ( conditionalOrExpression )?
				if (stream_conditionalOrExpression.HasNext)
				{
					DebugLocation(368, 21);
					adaptor.AddChild(root_2, stream_conditionalOrExpression.NextTree());

				}
				stream_conditionalOrExpression.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(369, 5);
				// C:\\work\\ReoScript\\ReoScript.g:369:5: ^( FOR_ITERATOR ( statementExpressionList )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(369, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_ITERATOR, "FOR_ITERATOR"), root_2);

				DebugLocation(369, 20);
				// C:\\work\\ReoScript\\ReoScript.g:369:20: ( statementExpressionList )?
				if (stream_statementExpressionList.HasNext)
				{
					DebugLocation(369, 20);
					adaptor.AddChild(root_2, stream_statementExpressionList.NextTree());

				}
				stream_statementExpressionList.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(370, 5);
				// C:\\work\\ReoScript\\ReoScript.g:370:5: ^( FOR_BODY embeddedStatement )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(370, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_BODY, "FOR_BODY"), root_2);

				DebugLocation(370, 16);
				adaptor.AddChild(root_2, stream_embeddedStatement.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forStatement", 42);
			LeaveRule("forStatement", 42);
			LeaveRule_forStatement();
		}
		DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "forStatement"); }
		return retval;

	}
	// $ANTLR end "forStatement"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();

	// $ANTLR start "forInit"
	// C:\\work\\ReoScript\\ReoScript.g:374:1: forInit : ( localVariableDeclaration | statementExpressionList );
	[GrammarRule("forInit")]
	private AstParserRuleReturnScope<CommonTree, IToken> forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 43);
		TraceIn("forInit", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpressionList233 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(374, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:375:2: ( localVariableDeclaration | statementExpressionList )
			int alt67=2;
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==TYPE))
			{
				alt67 = 1;
			}
			else if ((LA67_0==BINARY_LITERATE||LA67_0==DECREMENT||LA67_0==FALSE||(LA67_0>=HEX_LITERATE && LA67_0<=IDENTIFIER)||LA67_0==INCREMENT||(LA67_0>=LBRACE && LA67_0<=LCURLY)||LA67_0==LPAREN||(LA67_0>=NULL && LA67_0<=NUMBER_LITERATE)||LA67_0==STRING_LITERATE||(LA67_0>=THIS && LA67_0<=TRUE)||LA67_0==UNDEFINED||LA67_0==115||LA67_0==117||LA67_0==122))
			{
				alt67 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:375:4: localVariableDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(375, 4);
				PushFollow(Follow._localVariableDeclaration_in_forInit2786);
				localVariableDeclaration232=localVariableDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, localVariableDeclaration232.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:376:4: statementExpressionList
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(376, 4);
				PushFollow(Follow._statementExpressionList_in_forInit2792);
				statementExpressionList233=statementExpressionList();
				PopFollow();

				adaptor.AddChild(root_0, statementExpressionList233.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 43);
			LeaveRule("forInit", 43);
			LeaveRule_forInit();
		}
		DebugLocation(377, 1);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_foreachStatement();
	partial void LeaveRule_foreachStatement();

	// $ANTLR start "foreachStatement"
	// C:\\work\\ReoScript\\ReoScript.g:379:1: foreachStatement : 'for' '(' (local= 'var' )? IDENTIFIER 'in' expression ')' embeddedStatement -> ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement ( $local)? ) ;
	[GrammarRule("foreachStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> foreachStatement()
	{
		EnterRule_foreachStatement();
		EnterRule("foreachStatement", 44);
		TraceIn("foreachStatement", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken local = default(IToken);
		IToken string_literal234 = default(IToken);
		IToken char_literal235 = default(IToken);
		IToken IDENTIFIER236 = default(IToken);
		IToken string_literal237 = default(IToken);
		IToken char_literal239 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression238 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement240 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree local_tree = default(CommonTree);
		CommonTree string_literal234_tree = default(CommonTree);
		CommonTree char_literal235_tree = default(CommonTree);
		CommonTree IDENTIFIER236_tree = default(CommonTree);
		CommonTree string_literal237_tree = default(CommonTree);
		CommonTree char_literal239_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		try { DebugEnterRule(GrammarFileName, "foreachStatement");
		DebugLocation(379, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:380:2: ( 'for' '(' (local= 'var' )? IDENTIFIER 'in' expression ')' embeddedStatement -> ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement ( $local)? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:380:4: 'for' '(' (local= 'var' )? IDENTIFIER 'in' expression ')' embeddedStatement
			{
			DebugLocation(380, 4);
			string_literal234=(IToken)Match(input,116,Follow._116_in_foreachStatement2804);  
			stream_116.Add(string_literal234);

			DebugLocation(380, 10);
			char_literal235=(IToken)Match(input,LPAREN,Follow._LPAREN_in_foreachStatement2806);  
			stream_LPAREN.Add(char_literal235);

			DebugLocation(380, 19);
			// C:\\work\\ReoScript\\ReoScript.g:380:19: (local= 'var' )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==TYPE))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:380:19: local= 'var'
				{
				DebugLocation(380, 19);
				local=(IToken)Match(input,TYPE,Follow._TYPE_in_foreachStatement2810);  
				stream_TYPE.Add(local);


				}
				break;

			}
			} finally { DebugExitSubRule(68); }

			DebugLocation(380, 27);
			IDENTIFIER236=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_foreachStatement2813);  
			stream_IDENTIFIER.Add(IDENTIFIER236);

			DebugLocation(380, 38);
			string_literal237=(IToken)Match(input,120,Follow._120_in_foreachStatement2815);  
			stream_120.Add(string_literal237);

			DebugLocation(380, 43);
			PushFollow(Follow._expression_in_foreachStatement2817);
			expression238=expression();
			PopFollow();

			stream_expression.Add(expression238.Tree);
			DebugLocation(380, 54);
			char_literal239=(IToken)Match(input,RPAREN,Follow._RPAREN_in_foreachStatement2819);  
			stream_RPAREN.Add(char_literal239);

			DebugLocation(380, 58);
			PushFollow(Follow._embeddedStatement_in_foreachStatement2821);
			embeddedStatement240=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(embeddedStatement240.Tree);


			{
			// AST REWRITE
			// elements: IDENTIFIER, local, embeddedStatement, expression
			// token labels: local
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_local=new RewriteRuleITokenStream(adaptor,"token local",local);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 381:3: -> ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement ( $local)? )
			{
				DebugLocation(381, 6);
				// C:\\work\\ReoScript\\ReoScript.g:381:6: ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement ( $local)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(381, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOREACH_STATEMENT, "FOREACH_STATEMENT"), root_1);

				DebugLocation(381, 26);
				adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());
				DebugLocation(381, 37);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(381, 48);
				adaptor.AddChild(root_1, stream_embeddedStatement.NextTree());
				DebugLocation(381, 67);
				// C:\\work\\ReoScript\\ReoScript.g:381:67: ( $local)?
				if (stream_local.HasNext)
				{
					DebugLocation(381, 67);
					adaptor.AddChild(root_1, stream_local.NextNode());

				}
				stream_local.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("foreachStatement", 44);
			LeaveRule("foreachStatement", 44);
			LeaveRule_foreachStatement();
		}
		DebugLocation(382, 1);
		} finally { DebugExitRule(GrammarFileName, "foreachStatement"); }
		return retval;

	}
	// $ANTLR end "foreachStatement"

	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();

	// $ANTLR start "whileStatement"
	// C:\\work\\ReoScript\\ReoScript.g:384:1: whileStatement : 'while' LPAREN ( conditionalOrExpression ) RPAREN embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) ) ;
	[GrammarRule("whileStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 45);
		TraceIn("whileStatement", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal241 = default(IToken);
		IToken LPAREN242 = default(IToken);
		IToken RPAREN244 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression243 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement245 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal241_tree = default(CommonTree);
		CommonTree LPAREN242_tree = default(CommonTree);
		CommonTree RPAREN244_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(384, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:385:2: ( 'while' LPAREN ( conditionalOrExpression ) RPAREN embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:385:4: 'while' LPAREN ( conditionalOrExpression ) RPAREN embeddedStatement
			{
			DebugLocation(385, 4);
			string_literal241=(IToken)Match(input,126,Follow._126_in_whileStatement2850);  
			stream_126.Add(string_literal241);

			DebugLocation(385, 12);
			LPAREN242=(IToken)Match(input,LPAREN,Follow._LPAREN_in_whileStatement2852);  
			stream_LPAREN.Add(LPAREN242);

			DebugLocation(385, 19);
			// C:\\work\\ReoScript\\ReoScript.g:385:19: ( conditionalOrExpression )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:385:20: conditionalOrExpression
			{
			DebugLocation(385, 20);
			PushFollow(Follow._conditionalOrExpression_in_whileStatement2855);
			conditionalOrExpression243=conditionalOrExpression();
			PopFollow();

			stream_conditionalOrExpression.Add(conditionalOrExpression243.Tree);

			}

			DebugLocation(385, 45);
			RPAREN244=(IToken)Match(input,RPAREN,Follow._RPAREN_in_whileStatement2858);  
			stream_RPAREN.Add(RPAREN244);

			DebugLocation(385, 52);
			PushFollow(Follow._embeddedStatement_in_whileStatement2860);
			embeddedStatement245=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(embeddedStatement245.Tree);


			{
			// AST REWRITE
			// elements: embeddedStatement, conditionalOrExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 386:3: -> ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) )
			{
				DebugLocation(386, 7);
				// C:\\work\\ReoScript\\ReoScript.g:386:7: ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(386, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_STATEMENT, "FOR_STATEMENT"), root_1);

				DebugLocation(387, 5);
				// C:\\work\\ReoScript\\ReoScript.g:387:5: ^( FOR_INIT )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(387, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_2);

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(388, 5);
				// C:\\work\\ReoScript\\ReoScript.g:388:5: ^( FOR_CONDITION ( conditionalOrExpression )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(388, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_CONDITION, "FOR_CONDITION"), root_2);

				DebugLocation(388, 21);
				// C:\\work\\ReoScript\\ReoScript.g:388:21: ( conditionalOrExpression )?
				if (stream_conditionalOrExpression.HasNext)
				{
					DebugLocation(388, 21);
					adaptor.AddChild(root_2, stream_conditionalOrExpression.NextTree());

				}
				stream_conditionalOrExpression.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(389, 5);
				// C:\\work\\ReoScript\\ReoScript.g:389:5: ^( FOR_ITERATOR )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(389, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_ITERATOR, "FOR_ITERATOR"), root_2);

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(390, 5);
				// C:\\work\\ReoScript\\ReoScript.g:390:5: ^( FOR_BODY embeddedStatement )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(390, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_BODY, "FOR_BODY"), root_2);

				DebugLocation(390, 16);
				adaptor.AddChild(root_2, stream_embeddedStatement.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whileStatement", 45);
			LeaveRule("whileStatement", 45);
			LeaveRule_whileStatement();
		}
		DebugLocation(392, 1);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return retval;

	}
	// $ANTLR end "whileStatement"

	partial void EnterRule_switchStatement();
	partial void LeaveRule_switchStatement();

	// $ANTLR start "switchStatement"
	// C:\\work\\ReoScript\\ReoScript.g:394:1: switchStatement : 'switch' '(' conditionalOrExpression ')' '{' ( switchCaseStatementList )? '}' -> ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? ) ;
	[GrammarRule("switchStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchStatement()
	{
		EnterRule_switchStatement();
		EnterRule("switchStatement", 46);
		TraceIn("switchStatement", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal246 = default(IToken);
		IToken char_literal247 = default(IToken);
		IToken char_literal249 = default(IToken);
		IToken char_literal250 = default(IToken);
		IToken char_literal252 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression248 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchCaseStatementList251 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal246_tree = default(CommonTree);
		CommonTree char_literal247_tree = default(CommonTree);
		CommonTree char_literal249_tree = default(CommonTree);
		CommonTree char_literal250_tree = default(CommonTree);
		CommonTree char_literal252_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_switchCaseStatementList=new RewriteRuleSubtreeStream(adaptor,"rule switchCaseStatementList");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		try { DebugEnterRule(GrammarFileName, "switchStatement");
		DebugLocation(394, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:395:2: ( 'switch' '(' conditionalOrExpression ')' '{' ( switchCaseStatementList )? '}' -> ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:395:4: 'switch' '(' conditionalOrExpression ')' '{' ( switchCaseStatementList )? '}'
			{
			DebugLocation(395, 4);
			string_literal246=(IToken)Match(input,124,Follow._124_in_switchStatement2926);  
			stream_124.Add(string_literal246);

			DebugLocation(395, 13);
			char_literal247=(IToken)Match(input,LPAREN,Follow._LPAREN_in_switchStatement2928);  
			stream_LPAREN.Add(char_literal247);

			DebugLocation(395, 17);
			PushFollow(Follow._conditionalOrExpression_in_switchStatement2930);
			conditionalOrExpression248=conditionalOrExpression();
			PopFollow();

			stream_conditionalOrExpression.Add(conditionalOrExpression248.Tree);
			DebugLocation(395, 41);
			char_literal249=(IToken)Match(input,RPAREN,Follow._RPAREN_in_switchStatement2932);  
			stream_RPAREN.Add(char_literal249);

			DebugLocation(396, 4);
			char_literal250=(IToken)Match(input,LCURLY,Follow._LCURLY_in_switchStatement2937);  
			stream_LCURLY.Add(char_literal250);

			DebugLocation(396, 8);
			// C:\\work\\ReoScript\\ReoScript.g:396:8: ( switchCaseStatementList )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==BINARY_LITERATE||LA69_0==DECREMENT||LA69_0==FALSE||(LA69_0>=HEX_LITERATE && LA69_0<=IDENTIFIER)||LA69_0==INCREMENT||(LA69_0>=LBRACE && LA69_0<=LCURLY)||LA69_0==LPAREN||(LA69_0>=NULL && LA69_0<=NUMBER_LITERATE)||LA69_0==SCOPE_MODIFIER||LA69_0==STRING_LITERATE||(LA69_0>=THIS && LA69_0<=TYPE)||LA69_0==UNDEFINED||(LA69_0>=110 && LA69_0<=119)||(LA69_0>=122 && LA69_0<=124)||LA69_0==126))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:396:8: switchCaseStatementList
				{
				DebugLocation(396, 8);
				PushFollow(Follow._switchCaseStatementList_in_switchStatement2939);
				switchCaseStatementList251=switchCaseStatementList();
				PopFollow();

				stream_switchCaseStatementList.Add(switchCaseStatementList251.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(396, 33);
			char_literal252=(IToken)Match(input,RCURLY,Follow._RCURLY_in_switchStatement2942);  
			stream_RCURLY.Add(char_literal252);



			{
			// AST REWRITE
			// elements: switchCaseStatementList, conditionalOrExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 397:4: -> ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? )
			{
				DebugLocation(397, 7);
				// C:\\work\\ReoScript\\ReoScript.g:397:7: ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(397, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH, "SWITCH"), root_1);

				DebugLocation(397, 16);
				adaptor.AddChild(root_1, stream_conditionalOrExpression.NextTree());
				DebugLocation(397, 40);
				// C:\\work\\ReoScript\\ReoScript.g:397:40: ( switchCaseStatementList )?
				if (stream_switchCaseStatementList.HasNext)
				{
					DebugLocation(397, 40);
					adaptor.AddChild(root_1, stream_switchCaseStatementList.NextTree());

				}
				stream_switchCaseStatementList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchStatement", 46);
			LeaveRule("switchStatement", 46);
			LeaveRule_switchStatement();
		}
		DebugLocation(398, 1);
		} finally { DebugExitRule(GrammarFileName, "switchStatement"); }
		return retval;

	}
	// $ANTLR end "switchStatement"

	partial void EnterRule_switchCaseStatementList();
	partial void LeaveRule_switchCaseStatementList();

	// $ANTLR start "switchCaseStatementList"
	// C:\\work\\ReoScript\\ReoScript.g:400:1: switchCaseStatementList : ( switchCaseCondition )+ ;
	[GrammarRule("switchCaseStatementList")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseStatementList()
	{
		EnterRule_switchCaseStatementList();
		EnterRule("switchCaseStatementList", 47);
		TraceIn("switchCaseStatementList", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> switchCaseCondition253 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "switchCaseStatementList");
		DebugLocation(400, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:401:2: ( ( switchCaseCondition )+ )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:401:4: ( switchCaseCondition )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(401, 4);
			// C:\\work\\ReoScript\\ReoScript.g:401:4: ( switchCaseCondition )+
			int cnt70=0;
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==BINARY_LITERATE||LA70_0==DECREMENT||LA70_0==FALSE||(LA70_0>=HEX_LITERATE && LA70_0<=IDENTIFIER)||LA70_0==INCREMENT||(LA70_0>=LBRACE && LA70_0<=LCURLY)||LA70_0==LPAREN||(LA70_0>=NULL && LA70_0<=NUMBER_LITERATE)||LA70_0==SCOPE_MODIFIER||LA70_0==STRING_LITERATE||(LA70_0>=THIS && LA70_0<=TYPE)||LA70_0==UNDEFINED||(LA70_0>=110 && LA70_0<=119)||(LA70_0>=122 && LA70_0<=124)||LA70_0==126))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:401:5: switchCaseCondition
					{
					DebugLocation(401, 5);
					PushFollow(Follow._switchCaseCondition_in_switchCaseStatementList2968);
					switchCaseCondition253=switchCaseCondition();
					PopFollow();

					adaptor.AddChild(root_0, switchCaseCondition253.Tree);

					}
					break;

				default:
					if (cnt70 >= 1)
						goto loop70;

					EarlyExitException eee70 = new EarlyExitException( 70, input );
					DebugRecognitionException(eee70);
					throw eee70;
				}
				cnt70++;
			}
			loop70:
				;

			} finally { DebugExitSubRule(70); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseStatementList", 47);
			LeaveRule("switchCaseStatementList", 47);
			LeaveRule_switchCaseStatementList();
		}
		DebugLocation(402, 1);
		} finally { DebugExitRule(GrammarFileName, "switchCaseStatementList"); }
		return retval;

	}
	// $ANTLR end "switchCaseStatementList"

	partial void EnterRule_switchCaseCondition();
	partial void LeaveRule_switchCaseCondition();

	// $ANTLR start "switchCaseCondition"
	// C:\\work\\ReoScript\\ReoScript.g:404:1: switchCaseCondition : ( 'case' expression ':' -> ^( SWITCH_CASE expression ) | statement -> statement | 'default' ':' -> ^( SWITCH_CASE_ELSE ) );
	[GrammarRule("switchCaseCondition")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseCondition()
	{
		EnterRule_switchCaseCondition();
		EnterRule("switchCaseCondition", 48);
		TraceIn("switchCaseCondition", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal254 = default(IToken);
		IToken char_literal256 = default(IToken);
		IToken string_literal258 = default(IToken);
		IToken char_literal259 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression255 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement257 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal254_tree = default(CommonTree);
		CommonTree char_literal256_tree = default(CommonTree);
		CommonTree string_literal258_tree = default(CommonTree);
		CommonTree char_literal259_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "switchCaseCondition");
		DebugLocation(404, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:405:2: ( 'case' expression ':' -> ^( SWITCH_CASE expression ) | statement -> statement | 'default' ':' -> ^( SWITCH_CASE_ELSE ) )
			int alt71=3;
			try { DebugEnterDecision(71, false);
			switch (input.LA(1))
			{
			case 111:
				{
				alt71 = 1;
				}
				break;
			case BINARY_LITERATE:
			case DECREMENT:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case INCREMENT:
			case LBRACE:
			case LCURLY:
			case LPAREN:
			case NULL:
			case NUMBER_LITERATE:
			case SCOPE_MODIFIER:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case TYPE:
			case UNDEFINED:
			case 110:
			case 112:
			case 113:
			case 115:
			case 116:
			case 117:
			case 118:
			case 119:
			case 122:
			case 123:
			case 124:
			case 126:
				{
				alt71 = 2;
				}
				break;
			case 114:
				{
				alt71 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:406:4: 'case' expression ':'
				{
				DebugLocation(406, 4);
				string_literal254=(IToken)Match(input,111,Follow._111_in_switchCaseCondition2986);  
				stream_111.Add(string_literal254);

				DebugLocation(406, 11);
				PushFollow(Follow._expression_in_switchCaseCondition2988);
				expression255=expression();
				PopFollow();

				stream_expression.Add(expression255.Tree);
				DebugLocation(406, 22);
				char_literal256=(IToken)Match(input,COLON,Follow._COLON_in_switchCaseCondition2990);  
				stream_COLON.Add(char_literal256);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 406:28: -> ^( SWITCH_CASE expression )
				{
					DebugLocation(406, 31);
					// C:\\work\\ReoScript\\ReoScript.g:406:31: ^( SWITCH_CASE expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(406, 33);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH_CASE, "SWITCH_CASE"), root_1);

					DebugLocation(406, 45);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:407:4: statement
				{
				DebugLocation(407, 4);
				PushFollow(Follow._statement_in_switchCaseCondition3005);
				statement257=statement();
				PopFollow();

				stream_statement.Add(statement257.Tree);


				{
				// AST REWRITE
				// elements: statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 407:19: -> statement
				{
					DebugLocation(407, 22);
					adaptor.AddChild(root_0, stream_statement.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:408:4: 'default' ':'
				{
				DebugLocation(408, 4);
				string_literal258=(IToken)Match(input,114,Follow._114_in_switchCaseCondition3019);  
				stream_114.Add(string_literal258);

				DebugLocation(408, 14);
				char_literal259=(IToken)Match(input,COLON,Follow._COLON_in_switchCaseCondition3021);  
				stream_COLON.Add(char_literal259);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 408:22: -> ^( SWITCH_CASE_ELSE )
				{
					DebugLocation(408, 25);
					// C:\\work\\ReoScript\\ReoScript.g:408:25: ^( SWITCH_CASE_ELSE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(408, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH_CASE_ELSE, "SWITCH_CASE_ELSE"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseCondition", 48);
			LeaveRule("switchCaseCondition", 48);
			LeaveRule_switchCaseCondition();
		}
		DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "switchCaseCondition"); }
		return retval;

	}
	// $ANTLR end "switchCaseCondition"

	partial void EnterRule_terminalStatement();
	partial void LeaveRule_terminalStatement();

	// $ANTLR start "terminalStatement"
	// C:\\work\\ReoScript\\ReoScript.g:411:1: terminalStatement : ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE ) SEMI ;
	[GrammarRule("terminalStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> terminalStatement()
	{
		EnterRule_terminalStatement();
		EnterRule("terminalStatement", 49);
		TraceIn("terminalStatement", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal261 = default(IToken);
		IToken string_literal262 = default(IToken);
		IToken SEMI263 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> returnStatement260 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal261_tree = default(CommonTree);
		CommonTree string_literal262_tree = default(CommonTree);
		CommonTree SEMI263_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_returnStatement=new RewriteRuleSubtreeStream(adaptor,"rule returnStatement");
		try { DebugEnterRule(GrammarFileName, "terminalStatement");
		DebugLocation(411, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:412:2: ( ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE ) SEMI )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:412:4: ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE ) SEMI
			{
			DebugLocation(412, 4);
			// C:\\work\\ReoScript\\ReoScript.g:412:4: ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE )
			int alt72=3;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			switch (input.LA(1))
			{
			case 123:
				{
				alt72 = 1;
				}
				break;
			case 110:
				{
				alt72 = 2;
				}
				break;
			case 113:
				{
				alt72 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:412:6: returnStatement
				{
				DebugLocation(412, 6);
				PushFollow(Follow._returnStatement_in_terminalStatement3045);
				returnStatement260=returnStatement();
				PopFollow();

				stream_returnStatement.Add(returnStatement260.Tree);


				{
				// AST REWRITE
				// elements: returnStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 412:22: -> returnStatement
				{
					DebugLocation(412, 25);
					adaptor.AddChild(root_0, stream_returnStatement.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:412:43: ( 'break' )
				{
				DebugLocation(412, 43);
				// C:\\work\\ReoScript\\ReoScript.g:412:43: ( 'break' )
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:412:44: 'break'
				{
				DebugLocation(412, 44);
				string_literal261=(IToken)Match(input,110,Follow._110_in_terminalStatement3054);  
				stream_110.Add(string_literal261);


				}



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 412:52: -> BREAK
				{
					DebugLocation(412, 54);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(BREAK, "BREAK"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:412:62: ( 'continue' )
				{
				DebugLocation(412, 62);
				// C:\\work\\ReoScript\\ReoScript.g:412:62: ( 'continue' )
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:412:63: 'continue'
				{
				DebugLocation(412, 63);
				string_literal262=(IToken)Match(input,113,Follow._113_in_terminalStatement3062);  
				stream_113.Add(string_literal262);


				}



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 412:74: -> CONTINUE
				{
					DebugLocation(412, 76);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CONTINUE, "CONTINUE"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(72); }

			DebugLocation(412, 87);
			SEMI263=(IToken)Match(input,SEMI,Follow._SEMI_in_terminalStatement3069);  
			stream_SEMI.Add(SEMI263);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("terminalStatement", 49);
			LeaveRule("terminalStatement", 49);
			LeaveRule_terminalStatement();
		}
		DebugLocation(413, 1);
		} finally { DebugExitRule(GrammarFileName, "terminalStatement"); }
		return retval;

	}
	// $ANTLR end "terminalStatement"

	partial void EnterRule_returnStatement();
	partial void LeaveRule_returnStatement();

	// $ANTLR start "returnStatement"
	// C:\\work\\ReoScript\\ReoScript.g:415:1: returnStatement : 'return' ( expression )? -> ^( RETURN ( expression )? ) ;
	[GrammarRule("returnStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> returnStatement()
	{
		EnterRule_returnStatement();
		EnterRule("returnStatement", 50);
		TraceIn("returnStatement", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal264 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression265 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal264_tree = default(CommonTree);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "returnStatement");
		DebugLocation(415, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:416:2: ( 'return' ( expression )? -> ^( RETURN ( expression )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:416:4: 'return' ( expression )?
			{
			DebugLocation(416, 4);
			string_literal264=(IToken)Match(input,123,Follow._123_in_returnStatement3080);  
			stream_123.Add(string_literal264);

			DebugLocation(416, 13);
			// C:\\work\\ReoScript\\ReoScript.g:416:13: ( expression )?
			int alt73=2;
			try { DebugEnterSubRule(73);
			try { DebugEnterDecision(73, false);
			int LA73_0 = input.LA(1);

			if ((LA73_0==BINARY_LITERATE||LA73_0==DECREMENT||LA73_0==FALSE||(LA73_0>=HEX_LITERATE && LA73_0<=IDENTIFIER)||LA73_0==INCREMENT||(LA73_0>=LBRACE && LA73_0<=LCURLY)||LA73_0==LESS_THAN||LA73_0==LPAREN||LA73_0==MINUS||LA73_0==NOT||(LA73_0>=NULL && LA73_0<=NUMBER_LITERATE)||LA73_0==PLUS||LA73_0==STRING_LITERATE||(LA73_0>=THIS && LA73_0<=TRUE)||LA73_0==UNDEFINED||LA73_0==117||LA73_0==122||LA73_0==125||LA73_0==127))
			{
				alt73 = 1;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:416:13: expression
				{
				DebugLocation(416, 13);
				PushFollow(Follow._expression_in_returnStatement3082);
				expression265=expression();
				PopFollow();

				stream_expression.Add(expression265.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(73); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 416:25: -> ^( RETURN ( expression )? )
			{
				DebugLocation(416, 28);
				// C:\\work\\ReoScript\\ReoScript.g:416:28: ^( RETURN ( expression )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(416, 30);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, "RETURN"), root_1);

				DebugLocation(416, 37);
				// C:\\work\\ReoScript\\ReoScript.g:416:37: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(416, 37);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("returnStatement", 50);
			LeaveRule("returnStatement", 50);
			LeaveRule_returnStatement();
		}
		DebugLocation(417, 1);
		} finally { DebugExitRule(GrammarFileName, "returnStatement"); }
		return retval;

	}
	// $ANTLR end "returnStatement"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();

	// $ANTLR start "literal"
	// C:\\work\\ReoScript\\ReoScript.g:422:1: literal : ( TRUE | FALSE | NUMBER_LITERATE | STRING_LITERATE | THIS | NULL | UNDEFINED | HEX_LITERATE | BINARY_LITERATE );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 51);
		TraceIn("literal", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set266 = default(IToken);

		CommonTree set266_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(422, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:423:2: ( TRUE | FALSE | NUMBER_LITERATE | STRING_LITERATE | THIS | NULL | UNDEFINED | HEX_LITERATE | BINARY_LITERATE )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(423, 2);

			set266=(IToken)input.LT(1);
			if (input.LA(1)==BINARY_LITERATE||input.LA(1)==FALSE||input.LA(1)==HEX_LITERATE||(input.LA(1)>=NULL && input.LA(1)<=NUMBER_LITERATE)||input.LA(1)==STRING_LITERATE||(input.LA(1)>=THIS && input.LA(1)<=TRUE)||input.LA(1)==UNDEFINED)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set266));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 51);
			LeaveRule("literal", 51);
			LeaveRule_literal();
		}
		DebugLocation(433, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _statement_in_script443 = new BitSet(new ulong[]{0x64C008100100002UL,0x5CFB40B80A000C02UL});
		public static readonly BitSet _function_define_in_function_defines456 = new BitSet(new ulong[]{0x2UL,0x20000002000000UL});
		public static readonly BitSet _SCOPE_MODIFIER_in_function_define468 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_function_define471 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_function_define475 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LPAREN_in_function_define477 = new BitSet(new ulong[]{0x8000000000000UL,0x800000UL});
		public static readonly BitSet _parameterDeclarationList_in_function_define479 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _RPAREN_in_function_define482 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _block_in_function_define484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_anonymous_function_define518 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LPAREN_in_anonymous_function_define520 = new BitSet(new ulong[]{0x8000000000000UL,0x800000UL});
		public static readonly BitSet _parameterDeclarationList_in_anonymous_function_define522 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _RPAREN_in_anonymous_function_define525 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _block_in_anonymous_function_define527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_anonymous_function_define549 = new BitSet(new ulong[]{0x8000000000000UL,0x800000UL});
		public static readonly BitSet _parameterDeclarationList_in_anonymous_function_define551 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _RPAREN_in_anonymous_function_define554 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_anonymous_function_define556 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _block_in_anonymous_function_define564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_anonymous_function_define588 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_anonymous_function_define619 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_anonymous_function_define621 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _block_in_anonymous_function_define629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_anonymous_function_define652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_parameterDeclarationList688 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _COMMA_in_parameterDeclarationList691 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_parameterDeclarationList694 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _LCURLY_in_block707 = new BitSet(new ulong[]{0x64C008100100000UL,0x5CFB40B80A200C02UL});
		public static readonly BitSet _statement_in_block709 = new BitSet(new ulong[]{0x64C008100100000UL,0x5CFB40B80A200C02UL});
		public static readonly BitSet _RCURLY_in_block712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_class_define735 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_class_define737 = new BitSet(new ulong[]{0x400000001000000UL});
		public static readonly BitSet _COLON_in_class_define740 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_class_define743 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_class_define745 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_class_define749 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _LCURLY_in_class_define755 = new BitSet(new ulong[]{0x0UL,0x20002002200000UL});
		public static readonly BitSet _localMemberVariableDeclaration_in_class_define767 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _SEMI_in_class_define769 = new BitSet(new ulong[]{0x0UL,0x20002002200000UL});
		public static readonly BitSet _function_define_in_class_define777 = new BitSet(new ulong[]{0x0UL,0x20002006200000UL});
		public static readonly BitSet _SEMI_in_class_define779 = new BitSet(new ulong[]{0x0UL,0x20002002200000UL});
		public static readonly BitSet _RCURLY_in_class_define791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _importStatement_in_statement809 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _SEMI_in_statement811 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_statement817 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _SEMI_in_statement819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_define_in_statement825 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _SEMI_in_statement827 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_define_in_statement834 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _SEMI_in_statement836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _embeddedStatement_in_statement843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_importStatement854 = new BitSet(new ulong[]{0x8000000000000UL,0x8000000UL});
		public static readonly BitSet _namespace_in_importStatement865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERATE_in_importStatement882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_namespace907 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _DOT_in_namespace910 = new BitSet(new ulong[]{0x8000000000000UL,0x40UL});
		public static readonly BitSet _set_in_namespace912 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _block_in_embeddedStatement933 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementExpression_in_embeddedStatement938 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _SEMI_in_embeddedStatement940 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifelse_in_embeddedStatement946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_embeddedStatement951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _foreachStatement_in_embeddedStatement956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_embeddedStatement961 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchStatement_in_embeddedStatement966 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _terminalStatement_in_embeddedStatement971 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _invocationExpression_in_statementExpression986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_statementExpression991 = new BitSet(new ulong[]{0x60C008000100000UL,0x20009808000C02UL});
		public static readonly BitSet _primaryExpression_in_statementExpression993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_statementExpression1008 = new BitSet(new ulong[]{0x60C008000100000UL,0x20009808000C02UL});
		public static readonly BitSet _primaryExpression_in_statementExpression1010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCREMENT_in_statementExpression1026 = new BitSet(new ulong[]{0x60C008000100000UL,0x20009808000C02UL});
		public static readonly BitSet _primaryExpression_in_statementExpression1028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_statementExpression1045 = new BitSet(new ulong[]{0x60C008000100000UL,0x20009808000C02UL});
		public static readonly BitSet _primaryExpression_in_statementExpression1047 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SCOPE_MODIFIER_in_localMemberVariableDeclaration1070 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _TYPE_in_localMemberVariableDeclaration1073 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localMemberVariableDeclaration1075 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _COMMA_in_localMemberVariableDeclaration1078 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localMemberVariableDeclaration1080 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _TYPE_in_localVariableDeclaration1114 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localVariableDeclaration1116 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _COMMA_in_localVariableDeclaration1119 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localVariableDeclaration1121 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _IDENTIFIER_in_localVariableDeclarationAssignment1147 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _ASSIGNMENT_in_localVariableDeclarationAssignment1150 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_localVariableDeclarationAssignment1152 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_invocationExpression1184 = new BitSet(new ulong[]{0x400001000FFE02UL,0x200000000000000UL});
		public static readonly BitSet _ASSIGNMENT_in_invocationExpression1195 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_invocationExpression1197 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_PLUS_in_invocationExpression1216 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_invocationExpression1218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_MINUS_in_invocationExpression1244 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_invocationExpression1246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_MUL_in_invocationExpression1272 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_invocationExpression1274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_DIV_in_invocationExpression1300 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_invocationExpression1302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_REM_in_invocationExpression1328 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_invocationExpression1330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_AND_in_invocationExpression1356 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_invocationExpression1358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_OR_in_invocationExpression1384 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_invocationExpression1386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_REV_in_invocationExpression1412 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_invocationExpression1414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_LSHIFT_in_invocationExpression1440 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_invocationExpression1442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_RSHIFT_in_invocationExpression1467 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_invocationExpression1469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCREMENT_in_invocationExpression1494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_invocationExpression1515 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_invocationExpression1536 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_invocationExpression1538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementExpression_in_statementExpressionList1576 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _COMMA_in_statementExpressionList1579 = new BitSet(new ulong[]{0x64C008100100000UL,0x428009808000C02UL});
		public static readonly BitSet _statementExpression_in_statementExpressionList1582 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _tag_in_expression1607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_expression1613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOF_in_expression1615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionList1629 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _COMMA_in_expressionList1632 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_expressionList1635 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _conditionalExpression_in_assignmentExpression1649 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _ASSIGNMENT_in_assignmentExpression1652 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_assignmentExpression1655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalOrExpression_in_conditionalExpression1669 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _CONDITION_in_conditionalExpression1672 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_conditionalExpression1675 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_conditionalExpression1677 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_conditionalExpression1680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression1693 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _LOGICAL_OR_in_conditionalOrExpression1696 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression1699 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression1712 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _LOGICAL_AND_in_conditionalAndExpression1715 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression1718 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression1733 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _OR_in_inclusiveOrExpression1736 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression1739 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression1753 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _XOR_in_exclusiveOrExpression1756 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression1759 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _equalityExpression_in_andExpression1773 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_andExpression1776 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _equalityExpression_in_andExpression1779 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression1792 = new BitSet(new ulong[]{0x2000000002UL,0x200UL});
		public static readonly BitSet _set_in_equalityExpression1795 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression1804 = new BitSet(new ulong[]{0x2000000002UL,0x200UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression1819 = new BitSet(new ulong[]{0x1803000000000002UL});
		public static readonly BitSet _set_in_relationalExpression1822 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression1839 = new BitSet(new ulong[]{0x1803000000000002UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression1853 = new BitSet(new ulong[]{0x2UL,0x1000004UL});
		public static readonly BitSet _set_in_shiftExpression1856 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression1863 = new BitSet(new ulong[]{0x2UL,0x1000004UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression1878 = new BitSet(new ulong[]{0x2UL,0x8010UL});
		public static readonly BitSet _set_in_additiveExpression1881 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression1888 = new BitSet(new ulong[]{0x2UL,0x8010UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression1902 = new BitSet(new ulong[]{0x400000002UL,0x60UL});
		public static readonly BitSet _set_in_multiplicativeExpression1905 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression1918 = new BitSet(new ulong[]{0x400000002UL,0x60UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression1937 = new BitSet(new ulong[]{0x40000100000002UL});
		public static readonly BitSet _INCREMENT_in_unaryExpression1947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_unaryExpression1969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCREMENT_in_unaryExpression2007 = new BitSet(new ulong[]{0x60C008000100000UL,0x20009808000C02UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression2009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_unaryExpression2026 = new BitSet(new ulong[]{0x60C008000100000UL,0x20009808000C02UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression2028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_unaryExpression2045 = new BitSet(new ulong[]{0x60C008000100000UL,0x20009808000C02UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression2047 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_unaryExpression2065 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _MINUS_in_unaryExpression2069 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _NOT_in_unaryExpression2073 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _127_in_unaryExpression2077 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression2080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_unaryExpression2101 = new BitSet(new ulong[]{0x60C008000100000UL,0x20009808000C02UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression2103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_primaryExpression2130 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _literal_in_primaryExpression2146 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _array_literal_in_primaryExpression2163 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _anonymous_function_define_in_primaryExpression2177 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _LPAREN_in_primaryExpression2188 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_primaryExpression2190 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _RPAREN_in_primaryExpression2192 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _LPAREN_in_primaryExpression2208 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808808D12UL});
		public static readonly BitSet _RPAREN_in_primaryExpression2216 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _expressionList_in_primaryExpression2235 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _RPAREN_in_primaryExpression2237 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _DOT_in_primaryExpression2269 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_primaryExpression2271 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _LBRACE_in_primaryExpression2291 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_primaryExpression2295 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _RBRACE_in_primaryExpression2297 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _object_literal_in_primaryExpression2318 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _object_literal_in_primaryExpression2344 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _DOT_in_primaryExpression2359 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_primaryExpression2361 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _LESS_THAN_in_tag2389 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tag2394 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_tag2396 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tag2402 = new BitSet(new ulong[]{0xA000000000000UL,0x80000000000UL});
		public static readonly BitSet _tagAttr_in_tag2404 = new BitSet(new ulong[]{0xA000000000000UL,0x80000000000UL});
		public static readonly BitSet _GREAT_THAN_in_tag2414 = new BitSet(new ulong[]{0x164C008100100000UL,0x5CFB50B80A000C02UL});
		public static readonly BitSet _tagStmt_in_tag2418 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _108_in_tag2421 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tag2424 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_tag2426 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tag2430 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _GREAT_THAN_in_tag2432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_tag2438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_tagStmt2485 = new BitSet(new ulong[]{0x164C008100100002UL,0x5CFB40B80A000C02UL});
		public static readonly BitSet _tag_in_tagStmt2489 = new BitSet(new ulong[]{0x164C008100100002UL,0x5CFB40B80A000C02UL});
		public static readonly BitSet _IDENTIFIER_in_tagAttr2508 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _ASSIGNMENT_in_tagAttr2510 = new BitSet(new ulong[]{0x60C008000100000UL,0x20009808000C02UL});
		public static readonly BitSet _primaryExpression_in_tagAttr2514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_variable2539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_array_literal2550 = new BitSet(new ulong[]{0x164C008104100000UL,0xA420009808108D12UL});
		public static readonly BitSet _expressionList_in_array_literal2552 = new BitSet(new ulong[]{0x4000000UL,0x100000UL});
		public static readonly BitSet _COMMA_in_array_literal2555 = new BitSet(new ulong[]{0x4000000UL,0x100000UL});
		public static readonly BitSet _RBRACE_in_array_literal2558 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_object_literal2581 = new BitSet(new ulong[]{0x8000004000000UL,0x8200000UL});
		public static readonly BitSet _keypair_in_object_literal2583 = new BitSet(new ulong[]{0x4000000UL,0x200000UL});
		public static readonly BitSet _COMMA_in_object_literal2587 = new BitSet(new ulong[]{0x8000000000000UL,0x8000000UL});
		public static readonly BitSet _keypair_in_object_literal2589 = new BitSet(new ulong[]{0x4000000UL,0x200000UL});
		public static readonly BitSet _COMMA_in_object_literal2593 = new BitSet(new ulong[]{0x4000000UL,0x200000UL});
		public static readonly BitSet _RCURLY_in_object_literal2596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_keypair2621 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _STRING_LITERATE_in_keypair2623 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_keypair2626 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_keypair2629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_ifelse2644 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LPAREN_in_ifelse2646 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _conditionalOrExpression_in_ifelse2648 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _RPAREN_in_ifelse2650 = new BitSet(new ulong[]{0x64C008100100000UL,0x5C7A409808000C02UL});
		public static readonly BitSet _embeddedStatement_in_ifelse2654 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _ELSE_in_ifelse2657 = new BitSet(new ulong[]{0x64C008100100000UL,0x5C7A409808000C02UL});
		public static readonly BitSet _embeddedStatement_in_ifelse2661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_forStatement2695 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LPAREN_in_forStatement2697 = new BitSet(new ulong[]{0x64C008100100000UL,0x42800B80C000C02UL});
		public static readonly BitSet _forInit_in_forStatement2699 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _SEMI_in_forStatement2702 = new BitSet(new ulong[]{0x64C008100100000UL,0xA42000980C008D12UL});
		public static readonly BitSet _conditionalOrExpression_in_forStatement2704 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _SEMI_in_forStatement2707 = new BitSet(new ulong[]{0x64C008100100000UL,0x428009808800C02UL});
		public static readonly BitSet _statementExpressionList_in_forStatement2709 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _RPAREN_in_forStatement2712 = new BitSet(new ulong[]{0x64C008100100000UL,0x5C7A409808000C02UL});
		public static readonly BitSet _embeddedStatement_in_forStatement2714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_forInit2786 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementExpressionList_in_forInit2792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_foreachStatement2804 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LPAREN_in_foreachStatement2806 = new BitSet(new ulong[]{0x8000000000000UL,0x2000000000UL});
		public static readonly BitSet _TYPE_in_foreachStatement2810 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_foreachStatement2813 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _120_in_foreachStatement2815 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_foreachStatement2817 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _RPAREN_in_foreachStatement2819 = new BitSet(new ulong[]{0x64C008100100000UL,0x5C7A409808000C02UL});
		public static readonly BitSet _embeddedStatement_in_foreachStatement2821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_whileStatement2850 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LPAREN_in_whileStatement2852 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _conditionalOrExpression_in_whileStatement2855 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _RPAREN_in_whileStatement2858 = new BitSet(new ulong[]{0x64C008100100000UL,0x5C7A409808000C02UL});
		public static readonly BitSet _embeddedStatement_in_whileStatement2860 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_switchStatement2926 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LPAREN_in_switchStatement2928 = new BitSet(new ulong[]{0x64C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _conditionalOrExpression_in_switchStatement2930 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _RPAREN_in_switchStatement2932 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _LCURLY_in_switchStatement2937 = new BitSet(new ulong[]{0x64C008100100000UL,0x5CFFC0B80A200C02UL});
		public static readonly BitSet _switchCaseStatementList_in_switchStatement2939 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _RCURLY_in_switchStatement2942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseCondition_in_switchCaseStatementList2968 = new BitSet(new ulong[]{0x64C008100100002UL,0x5CFFC0B80A000C02UL});
		public static readonly BitSet _111_in_switchCaseCondition2986 = new BitSet(new ulong[]{0x164C008100100000UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_switchCaseCondition2988 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_switchCaseCondition2990 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_switchCaseCondition3005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_switchCaseCondition3019 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_switchCaseCondition3021 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _returnStatement_in_terminalStatement3045 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _110_in_terminalStatement3054 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _113_in_terminalStatement3062 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _SEMI_in_terminalStatement3069 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_returnStatement3080 = new BitSet(new ulong[]{0x164C008100100002UL,0xA420009808008D12UL});
		public static readonly BitSet _expression_in_returnStatement3082 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Unvell.ReoScript 
