//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\work\\ReoScript\\ReoScript.g 2013-03-16 11:28:44

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Unvell.ReoScript 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class ReoScriptParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "ANONYMOUS_FUNCTION", "ARGUMENT_LIST", "ARRAY_ACCESS", "ARRAY_LITERAL", "ASSIGNMENT", "ASSIGN_AND", "ASSIGN_DIV", "ASSIGN_LSHIFT", "ASSIGN_MINUS", "ASSIGN_MUL", "ASSIGN_OR", "ASSIGN_PLUS", "ASSIGN_REM", "ASSIGN_REV", "ASSIGN_RSHIFT", "BINARY_LITERATE", "BLOCK", "BREAK", "COLON", "COMBINE_OBJECT", "COMMA", "COMMENT", "CONDITION", "CONTINUE", "CREATE", "DECLARATION", "DECREMENT", "DELETE", "DIV", "DOT", "ELSE", "EQUALS", "ESCAPE_SEQUENCE", "FALSE", "FOREACH_STATEMENT", "FOR_BODY", "FOR_CONDITION", "FOR_INIT", "FOR_ITERATOR", "FOR_STATEMENT", "FUNCTION_CALL", "FUNCTION_DEFINE", "GREAT_EQUALS", "GREAT_THAN", "HEX_LITERATE", "IDENTIFIER", "IF_STATEMENT", "IMPORT", "INCREMENT", "LAMBDA_FUNCTION", "LBRACE", "LCURLY", "LESS_EQUALS", "LESS_THAN", "LINE_COMMENT", "LOCAL_DECLARE_ASSIGNMENT", "LOGICAL_AND", "LOGICAL_OR", "LPAREN", "LSHIFT", "MINUS", "MOD", "MUL", "NEWLINE", "NOT", "NOT_EQUALS", "NULL", "NUMBER_LITERATE", "OBJECT_LITERAL", "OR", "PARAMETER_DEFINES", "PLUS", "POST_UNARY_STEP", "PRE_UNARY", "PRE_UNARY_STEP", "PROPERTY_ACCESS", "RBRACE", "RCURLY", "RETURN", "RPAREN", "RSHIFT", "SEMI", "STRING_LITERATE", "SWITCH", "SWITCH_CASE", "SWITCH_CASE_ELSE", "TAG", "TAG_ATTR", "TAG_ATTR_LIST", "TAG_NAME", "THIS", "TRUE", "TYPE", "UNDEFINED", "WHILE_STATEMENT", "WS", "XOR", "'/>'", "'</'", "'=>'", "'break'", "'case'", "'continue'", "'default'", "'delete'", "'for'", "'function'", "'if'", "'import'", "'in'", "'new'", "'return'", "'switch'", "'while'", "'~'"
	};
	public const int EOF=-1;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int AND=4;
	public const int ANONYMOUS_FUNCTION=5;
	public const int ARGUMENT_LIST=6;
	public const int ARRAY_ACCESS=7;
	public const int ARRAY_LITERAL=8;
	public const int ASSIGNMENT=9;
	public const int ASSIGN_AND=10;
	public const int ASSIGN_DIV=11;
	public const int ASSIGN_LSHIFT=12;
	public const int ASSIGN_MINUS=13;
	public const int ASSIGN_MUL=14;
	public const int ASSIGN_OR=15;
	public const int ASSIGN_PLUS=16;
	public const int ASSIGN_REM=17;
	public const int ASSIGN_REV=18;
	public const int ASSIGN_RSHIFT=19;
	public const int BINARY_LITERATE=20;
	public const int BLOCK=21;
	public const int BREAK=22;
	public const int COLON=23;
	public const int COMBINE_OBJECT=24;
	public const int COMMA=25;
	public const int COMMENT=26;
	public const int CONDITION=27;
	public const int CONTINUE=28;
	public const int CREATE=29;
	public const int DECLARATION=30;
	public const int DECREMENT=31;
	public const int DELETE=32;
	public const int DIV=33;
	public const int DOT=34;
	public const int ELSE=35;
	public const int EQUALS=36;
	public const int ESCAPE_SEQUENCE=37;
	public const int FALSE=38;
	public const int FOREACH_STATEMENT=39;
	public const int FOR_BODY=40;
	public const int FOR_CONDITION=41;
	public const int FOR_INIT=42;
	public const int FOR_ITERATOR=43;
	public const int FOR_STATEMENT=44;
	public const int FUNCTION_CALL=45;
	public const int FUNCTION_DEFINE=46;
	public const int GREAT_EQUALS=47;
	public const int GREAT_THAN=48;
	public const int HEX_LITERATE=49;
	public const int IDENTIFIER=50;
	public const int IF_STATEMENT=51;
	public const int IMPORT=52;
	public const int INCREMENT=53;
	public const int LAMBDA_FUNCTION=54;
	public const int LBRACE=55;
	public const int LCURLY=56;
	public const int LESS_EQUALS=57;
	public const int LESS_THAN=58;
	public const int LINE_COMMENT=59;
	public const int LOCAL_DECLARE_ASSIGNMENT=60;
	public const int LOGICAL_AND=61;
	public const int LOGICAL_OR=62;
	public const int LPAREN=63;
	public const int LSHIFT=64;
	public const int MINUS=65;
	public const int MOD=66;
	public const int MUL=67;
	public const int NEWLINE=68;
	public const int NOT=69;
	public const int NOT_EQUALS=70;
	public const int NULL=71;
	public const int NUMBER_LITERATE=72;
	public const int OBJECT_LITERAL=73;
	public const int OR=74;
	public const int PARAMETER_DEFINES=75;
	public const int PLUS=76;
	public const int POST_UNARY_STEP=77;
	public const int PRE_UNARY=78;
	public const int PRE_UNARY_STEP=79;
	public const int PROPERTY_ACCESS=80;
	public const int RBRACE=81;
	public const int RCURLY=82;
	public const int RETURN=83;
	public const int RPAREN=84;
	public const int RSHIFT=85;
	public const int SEMI=86;
	public const int STRING_LITERATE=87;
	public const int SWITCH=88;
	public const int SWITCH_CASE=89;
	public const int SWITCH_CASE_ELSE=90;
	public const int TAG=91;
	public const int TAG_ATTR=92;
	public const int TAG_ATTR_LIST=93;
	public const int TAG_NAME=94;
	public const int THIS=95;
	public const int TRUE=96;
	public const int TYPE=97;
	public const int UNDEFINED=98;
	public const int WHILE_STATEMENT=99;
	public const int WS=100;
	public const int XOR=101;

	public ReoScriptParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ReoScriptParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ReoScriptParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\work\\ReoScript\\ReoScript.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_script();
	partial void LeaveRule_script();

	// $ANTLR start "script"
	// C:\\work\\ReoScript\\ReoScript.g:56:1: public script : ( statement )* ;
	[GrammarRule("script")]
	public AstParserRuleReturnScope<CommonTree, IToken> script()
	{
		EnterRule_script();
		EnterRule("script", 1);
		TraceIn("script", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> statement1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "script");
		DebugLocation(56, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:57:2: ( ( statement )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:61:2: ( statement )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(61, 2);
			// C:\\work\\ReoScript\\ReoScript.g:61:2: ( statement )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==BINARY_LITERATE||LA1_0==DECREMENT||LA1_0==FALSE||(LA1_0>=HEX_LITERATE && LA1_0<=IDENTIFIER)||LA1_0==INCREMENT||(LA1_0>=LBRACE && LA1_0<=LCURLY)||LA1_0==LPAREN||(LA1_0>=NULL && LA1_0<=NUMBER_LITERATE)||LA1_0==STRING_LITERATE||(LA1_0>=THIS && LA1_0<=UNDEFINED)||LA1_0==105||LA1_0==107||(LA1_0>=109 && LA1_0<=113)||(LA1_0>=115 && LA1_0<=118)))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:61:2: statement
					{
					DebugLocation(61, 2);
					PushFollow(Follow._statement_in_script437);
					statement1=statement();
					PopFollow();

					adaptor.AddChild(root_0, statement1.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("script", 1);
			LeaveRule("script", 1);
			LeaveRule_script();
		}
		DebugLocation(62, 1);
		} finally { DebugExitRule(GrammarFileName, "script"); }
		return retval;

	}
	// $ANTLR end "script"

	partial void EnterRule_function_defines();
	partial void LeaveRule_function_defines();

	// $ANTLR start "function_defines"
	// C:\\work\\ReoScript\\ReoScript.g:64:1: function_defines : ( function_define )* ;
	[GrammarRule("function_defines")]
	private AstParserRuleReturnScope<CommonTree, IToken> function_defines()
	{
		EnterRule_function_defines();
		EnterRule("function_defines", 2);
		TraceIn("function_defines", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> function_define2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "function_defines");
		DebugLocation(64, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:65:2: ( ( function_define )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:65:4: ( function_define )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(65, 4);
			// C:\\work\\ReoScript\\ReoScript.g:65:4: ( function_define )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==111))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:65:4: function_define
					{
					DebugLocation(65, 4);
					PushFollow(Follow._function_define_in_function_defines450);
					function_define2=function_define();
					PopFollow();

					adaptor.AddChild(root_0, function_define2.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function_defines", 2);
			LeaveRule("function_defines", 2);
			LeaveRule_function_defines();
		}
		DebugLocation(66, 1);
		} finally { DebugExitRule(GrammarFileName, "function_defines"); }
		return retval;

	}
	// $ANTLR end "function_defines"

	partial void EnterRule_function_define();
	partial void LeaveRule_function_define();

	// $ANTLR start "function_define"
	// C:\\work\\ReoScript\\ReoScript.g:68:1: function_define : 'function' id= IDENTIFIER '(' ( parameterDeclarationList )? ')' block -> ^( FUNCTION_DEFINE $id ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) ;
	[GrammarRule("function_define")]
	private AstParserRuleReturnScope<CommonTree, IToken> function_define()
	{
		EnterRule_function_define();
		EnterRule("function_define", 3);
		TraceIn("function_define", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken id = default(IToken);
		IToken string_literal3 = default(IToken);
		IToken char_literal4 = default(IToken);
		IToken char_literal6 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationList5 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block7 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree id_tree = default(CommonTree);
		CommonTree string_literal3_tree = default(CommonTree);
		CommonTree char_literal4_tree = default(CommonTree);
		CommonTree char_literal6_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_parameterDeclarationList=new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclarationList");
		try { DebugEnterRule(GrammarFileName, "function_define");
		DebugLocation(68, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:69:2: ( 'function' id= IDENTIFIER '(' ( parameterDeclarationList )? ')' block -> ^( FUNCTION_DEFINE $id ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:69:4: 'function' id= IDENTIFIER '(' ( parameterDeclarationList )? ')' block
			{
			DebugLocation(69, 4);
			string_literal3=(IToken)Match(input,111,Follow._111_in_function_define462);  
			stream_111.Add(string_literal3);

			DebugLocation(69, 17);
			id=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_function_define466);  
			stream_IDENTIFIER.Add(id);

			DebugLocation(69, 29);
			char_literal4=(IToken)Match(input,LPAREN,Follow._LPAREN_in_function_define468);  
			stream_LPAREN.Add(char_literal4);

			DebugLocation(69, 33);
			// C:\\work\\ReoScript\\ReoScript.g:69:33: ( parameterDeclarationList )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==IDENTIFIER))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:69:33: parameterDeclarationList
				{
				DebugLocation(69, 33);
				PushFollow(Follow._parameterDeclarationList_in_function_define470);
				parameterDeclarationList5=parameterDeclarationList();
				PopFollow();

				stream_parameterDeclarationList.Add(parameterDeclarationList5.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(69, 59);
			char_literal6=(IToken)Match(input,RPAREN,Follow._RPAREN_in_function_define473);  
			stream_RPAREN.Add(char_literal6);

			DebugLocation(69, 63);
			PushFollow(Follow._block_in_function_define475);
			block7=block();
			PopFollow();

			stream_block.Add(block7.Tree);


			{
			// AST REWRITE
			// elements: parameterDeclarationList, block, id
			// token labels: id
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_id=new RewriteRuleITokenStream(adaptor,"token id",id);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 70:3: -> ^( FUNCTION_DEFINE $id ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
			{
				DebugLocation(70, 6);
				// C:\\work\\ReoScript\\ReoScript.g:70:6: ^( FUNCTION_DEFINE $id ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(70, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_DEFINE, "FUNCTION_DEFINE"), root_1);

				DebugLocation(70, 25);
				adaptor.AddChild(root_1, stream_id.NextNode());
				DebugLocation(70, 28);
				// C:\\work\\ReoScript\\ReoScript.g:70:28: ^( PARAMETER_DEFINES ( parameterDeclarationList )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(70, 30);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

				DebugLocation(70, 48);
				// C:\\work\\ReoScript\\ReoScript.g:70:48: ( parameterDeclarationList )?
				if (stream_parameterDeclarationList.HasNext)
				{
					DebugLocation(70, 48);
					adaptor.AddChild(root_2, stream_parameterDeclarationList.NextTree());

				}
				stream_parameterDeclarationList.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(70, 75);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function_define", 3);
			LeaveRule("function_define", 3);
			LeaveRule_function_define();
		}
		DebugLocation(71, 1);
		} finally { DebugExitRule(GrammarFileName, "function_define"); }
		return retval;

	}
	// $ANTLR end "function_define"

	partial void EnterRule_anonymous_function_define();
	partial void LeaveRule_anonymous_function_define();

	// $ANTLR start "anonymous_function_define"
	// C:\\work\\ReoScript\\ReoScript.g:73:1: anonymous_function_define : ( 'function' '(' ( parameterDeclarationList )? ')' block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | '(' ( parameterDeclarationList )? ')' '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) ) ) | IDENTIFIER '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) ) ) );
	[GrammarRule("anonymous_function_define")]
	private AstParserRuleReturnScope<CommonTree, IToken> anonymous_function_define()
	{
		EnterRule_anonymous_function_define();
		EnterRule("anonymous_function_define", 4);
		TraceIn("anonymous_function_define", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal8 = default(IToken);
		IToken char_literal9 = default(IToken);
		IToken char_literal11 = default(IToken);
		IToken char_literal13 = default(IToken);
		IToken char_literal15 = default(IToken);
		IToken string_literal16 = default(IToken);
		IToken IDENTIFIER19 = default(IToken);
		IToken string_literal20 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationList10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationList14 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression18 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression22 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal8_tree = default(CommonTree);
		CommonTree char_literal9_tree = default(CommonTree);
		CommonTree char_literal11_tree = default(CommonTree);
		CommonTree char_literal13_tree = default(CommonTree);
		CommonTree char_literal15_tree = default(CommonTree);
		CommonTree string_literal16_tree = default(CommonTree);
		CommonTree IDENTIFIER19_tree = default(CommonTree);
		CommonTree string_literal20_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_parameterDeclarationList=new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclarationList");
		try { DebugEnterRule(GrammarFileName, "anonymous_function_define");
		DebugLocation(73, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:74:2: ( 'function' '(' ( parameterDeclarationList )? ')' block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | '(' ( parameterDeclarationList )? ')' '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) ) ) | IDENTIFIER '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) ) ) )
			int alt8=3;
			try { DebugEnterDecision(8, false);
			switch (input.LA(1))
			{
			case 111:
				{
				alt8 = 1;
				}
				break;
			case LPAREN:
				{
				alt8 = 2;
				}
				break;
			case IDENTIFIER:
				{
				alt8 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:74:4: 'function' '(' ( parameterDeclarationList )? ')' block
				{
				DebugLocation(74, 4);
				string_literal8=(IToken)Match(input,111,Follow._111_in_anonymous_function_define506);  
				stream_111.Add(string_literal8);

				DebugLocation(74, 15);
				char_literal9=(IToken)Match(input,LPAREN,Follow._LPAREN_in_anonymous_function_define508);  
				stream_LPAREN.Add(char_literal9);

				DebugLocation(74, 19);
				// C:\\work\\ReoScript\\ReoScript.g:74:19: ( parameterDeclarationList )?
				int alt4=2;
				try { DebugEnterSubRule(4);
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==IDENTIFIER))
				{
					alt4 = 1;
				}
				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:74:19: parameterDeclarationList
					{
					DebugLocation(74, 19);
					PushFollow(Follow._parameterDeclarationList_in_anonymous_function_define510);
					parameterDeclarationList10=parameterDeclarationList();
					PopFollow();

					stream_parameterDeclarationList.Add(parameterDeclarationList10.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(4); }

				DebugLocation(74, 45);
				char_literal11=(IToken)Match(input,RPAREN,Follow._RPAREN_in_anonymous_function_define513);  
				stream_RPAREN.Add(char_literal11);

				DebugLocation(74, 49);
				PushFollow(Follow._block_in_anonymous_function_define515);
				block12=block();
				PopFollow();

				stream_block.Add(block12.Tree);


				{
				// AST REWRITE
				// elements: block, parameterDeclarationList
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 75:3: -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
				{
					DebugLocation(75, 6);
					// C:\\work\\ReoScript\\ReoScript.g:75:6: ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(75, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANONYMOUS_FUNCTION, "ANONYMOUS_FUNCTION"), root_1);

					DebugLocation(75, 27);
					// C:\\work\\ReoScript\\ReoScript.g:75:27: ^( PARAMETER_DEFINES ( parameterDeclarationList )? )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(75, 29);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

					DebugLocation(75, 47);
					// C:\\work\\ReoScript\\ReoScript.g:75:47: ( parameterDeclarationList )?
					if (stream_parameterDeclarationList.HasNext)
					{
						DebugLocation(75, 47);
						adaptor.AddChild(root_2, stream_parameterDeclarationList.NextTree());

					}
					stream_parameterDeclarationList.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(75, 74);
					adaptor.AddChild(root_1, stream_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:76:4: '(' ( parameterDeclarationList )? ')' '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) ) )
				{
				DebugLocation(76, 4);
				char_literal13=(IToken)Match(input,LPAREN,Follow._LPAREN_in_anonymous_function_define537);  
				stream_LPAREN.Add(char_literal13);

				DebugLocation(76, 8);
				// C:\\work\\ReoScript\\ReoScript.g:76:8: ( parameterDeclarationList )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==IDENTIFIER))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:76:8: parameterDeclarationList
					{
					DebugLocation(76, 8);
					PushFollow(Follow._parameterDeclarationList_in_anonymous_function_define539);
					parameterDeclarationList14=parameterDeclarationList();
					PopFollow();

					stream_parameterDeclarationList.Add(parameterDeclarationList14.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(76, 34);
				char_literal15=(IToken)Match(input,RPAREN,Follow._RPAREN_in_anonymous_function_define542);  
				stream_RPAREN.Add(char_literal15);

				DebugLocation(76, 38);
				string_literal16=(IToken)Match(input,104,Follow._104_in_anonymous_function_define544);  
				stream_104.Add(string_literal16);

				DebugLocation(76, 43);
				// C:\\work\\ReoScript\\ReoScript.g:76:43: ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) ) )
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==LCURLY))
				{
					switch (input.LA(2))
					{
					case DECREMENT:
					case INCREMENT:
					case LBRACE:
					case LCURLY:
					case LPAREN:
					case TYPE:
					case 105:
					case 107:
					case 109:
					case 110:
					case 111:
					case 112:
					case 113:
					case 115:
					case 116:
					case 117:
					case 118:
						{
						alt6 = 1;
						}
						break;
					case IDENTIFIER:
						{
						int LA6_4 = input.LA(3);

						if (((LA6_4>=ASSIGNMENT && LA6_4<=ASSIGN_RSHIFT)||LA6_4==DECREMENT||LA6_4==DOT||LA6_4==INCREMENT||(LA6_4>=LBRACE && LA6_4<=LCURLY)||LA6_4==LPAREN||LA6_4==SEMI||LA6_4==104))
						{
							alt6 = 1;
						}
						else if ((LA6_4==COLON))
						{
							alt6 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 6, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case STRING_LITERATE:
						{
						int LA6_5 = input.LA(3);

						if (((LA6_5>=ASSIGNMENT && LA6_5<=ASSIGN_RSHIFT)||LA6_5==DECREMENT||LA6_5==DOT||LA6_5==INCREMENT||(LA6_5>=LBRACE && LA6_5<=LCURLY)||LA6_5==LPAREN||LA6_5==SEMI))
						{
							alt6 = 1;
						}
						else if ((LA6_5==COLON))
						{
							alt6 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 6, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case BINARY_LITERATE:
					case FALSE:
					case HEX_LITERATE:
					case NULL:
					case NUMBER_LITERATE:
					case RCURLY:
					case THIS:
					case TRUE:
					case UNDEFINED:
						{
						alt6 = 1;
						}
						break;
					case COMMA:
						{
						alt6 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 6, 1, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else if ((LA6_0==BINARY_LITERATE||LA6_0==DECREMENT||LA6_0==FALSE||(LA6_0>=HEX_LITERATE && LA6_0<=IDENTIFIER)||LA6_0==INCREMENT||LA6_0==LBRACE||LA6_0==LPAREN||LA6_0==MINUS||LA6_0==NOT||(LA6_0>=NULL && LA6_0<=NUMBER_LITERATE)||LA6_0==PLUS||LA6_0==STRING_LITERATE||(LA6_0>=THIS && LA6_0<=TRUE)||LA6_0==UNDEFINED||LA6_0==111||LA6_0==115||LA6_0==119))
				{
					alt6 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:77:5: block
					{
					DebugLocation(77, 5);
					PushFollow(Follow._block_in_anonymous_function_define552);
					block17=block();
					PopFollow();

					stream_block.Add(block17.Tree);


					{
					// AST REWRITE
					// elements: parameterDeclarationList, block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 78:4: -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
					{
						DebugLocation(78, 7);
						// C:\\work\\ReoScript\\ReoScript.g:78:7: ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(78, 9);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANONYMOUS_FUNCTION, "ANONYMOUS_FUNCTION"), root_1);

						DebugLocation(78, 28);
						// C:\\work\\ReoScript\\ReoScript.g:78:28: ^( PARAMETER_DEFINES ( parameterDeclarationList )? )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(78, 30);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

						DebugLocation(78, 48);
						// C:\\work\\ReoScript\\ReoScript.g:78:48: ( parameterDeclarationList )?
						if (stream_parameterDeclarationList.HasNext)
						{
							DebugLocation(78, 48);
							adaptor.AddChild(root_2, stream_parameterDeclarationList.NextTree());

						}
						stream_parameterDeclarationList.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(78, 75);
						adaptor.AddChild(root_1, stream_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:79:5: assignmentExpression
					{
					DebugLocation(79, 5);
					PushFollow(Follow._assignmentExpression_in_anonymous_function_define576);
					assignmentExpression18=assignmentExpression();
					PopFollow();

					stream_assignmentExpression.Add(assignmentExpression18.Tree);


					{
					// AST REWRITE
					// elements: assignmentExpression, parameterDeclarationList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 80:4: -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) )
					{
						DebugLocation(80, 7);
						// C:\\work\\ReoScript\\ReoScript.g:80:7: ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(80, 9);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANONYMOUS_FUNCTION, "ANONYMOUS_FUNCTION"), root_1);

						DebugLocation(80, 28);
						// C:\\work\\ReoScript\\ReoScript.g:80:28: ^( PARAMETER_DEFINES ( parameterDeclarationList )? )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(80, 30);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

						DebugLocation(80, 48);
						// C:\\work\\ReoScript\\ReoScript.g:80:48: ( parameterDeclarationList )?
						if (stream_parameterDeclarationList.HasNext)
						{
							DebugLocation(80, 48);
							adaptor.AddChild(root_2, stream_parameterDeclarationList.NextTree());

						}
						stream_parameterDeclarationList.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(80, 75);
						// C:\\work\\ReoScript\\ReoScript.g:80:75: ^( RETURN assignmentExpression )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(80, 77);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, "RETURN"), root_2);

						DebugLocation(80, 84);
						adaptor.AddChild(root_2, stream_assignmentExpression.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(6); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:82:4: IDENTIFIER '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) ) )
				{
				DebugLocation(82, 4);
				IDENTIFIER19=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_anonymous_function_define607);  
				stream_IDENTIFIER.Add(IDENTIFIER19);

				DebugLocation(82, 15);
				string_literal20=(IToken)Match(input,104,Follow._104_in_anonymous_function_define609);  
				stream_104.Add(string_literal20);

				DebugLocation(82, 20);
				// C:\\work\\ReoScript\\ReoScript.g:82:20: ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) ) )
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==LCURLY))
				{
					switch (input.LA(2))
					{
					case DECREMENT:
					case INCREMENT:
					case LBRACE:
					case LCURLY:
					case LPAREN:
					case TYPE:
					case 105:
					case 107:
					case 109:
					case 110:
					case 111:
					case 112:
					case 113:
					case 115:
					case 116:
					case 117:
					case 118:
						{
						alt7 = 1;
						}
						break;
					case IDENTIFIER:
						{
						int LA7_4 = input.LA(3);

						if (((LA7_4>=ASSIGNMENT && LA7_4<=ASSIGN_RSHIFT)||LA7_4==DECREMENT||LA7_4==DOT||LA7_4==INCREMENT||(LA7_4>=LBRACE && LA7_4<=LCURLY)||LA7_4==LPAREN||LA7_4==SEMI||LA7_4==104))
						{
							alt7 = 1;
						}
						else if ((LA7_4==COLON))
						{
							alt7 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 7, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case STRING_LITERATE:
						{
						int LA7_5 = input.LA(3);

						if (((LA7_5>=ASSIGNMENT && LA7_5<=ASSIGN_RSHIFT)||LA7_5==DECREMENT||LA7_5==DOT||LA7_5==INCREMENT||(LA7_5>=LBRACE && LA7_5<=LCURLY)||LA7_5==LPAREN||LA7_5==SEMI))
						{
							alt7 = 1;
						}
						else if ((LA7_5==COLON))
						{
							alt7 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 7, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case BINARY_LITERATE:
					case FALSE:
					case HEX_LITERATE:
					case NULL:
					case NUMBER_LITERATE:
					case RCURLY:
					case THIS:
					case TRUE:
					case UNDEFINED:
						{
						alt7 = 1;
						}
						break;
					case COMMA:
						{
						alt7 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 7, 1, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else if ((LA7_0==BINARY_LITERATE||LA7_0==DECREMENT||LA7_0==FALSE||(LA7_0>=HEX_LITERATE && LA7_0<=IDENTIFIER)||LA7_0==INCREMENT||LA7_0==LBRACE||LA7_0==LPAREN||LA7_0==MINUS||LA7_0==NOT||(LA7_0>=NULL && LA7_0<=NUMBER_LITERATE)||LA7_0==PLUS||LA7_0==STRING_LITERATE||(LA7_0>=THIS && LA7_0<=TRUE)||LA7_0==UNDEFINED||LA7_0==111||LA7_0==115||LA7_0==119))
				{
					alt7 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:83:5: block
					{
					DebugLocation(83, 5);
					PushFollow(Follow._block_in_anonymous_function_define617);
					block21=block();
					PopFollow();

					stream_block.Add(block21.Tree);


					{
					// AST REWRITE
					// elements: block, IDENTIFIER
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 84:4: -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block )
					{
						DebugLocation(84, 7);
						// C:\\work\\ReoScript\\ReoScript.g:84:7: ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(84, 9);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANONYMOUS_FUNCTION, "ANONYMOUS_FUNCTION"), root_1);

						DebugLocation(84, 28);
						// C:\\work\\ReoScript\\ReoScript.g:84:28: ^( PARAMETER_DEFINES IDENTIFIER )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(84, 30);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

						DebugLocation(84, 48);
						adaptor.AddChild(root_2, stream_IDENTIFIER.NextNode());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(84, 60);
						adaptor.AddChild(root_1, stream_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:85:5: assignmentExpression
					{
					DebugLocation(85, 5);
					PushFollow(Follow._assignmentExpression_in_anonymous_function_define640);
					assignmentExpression22=assignmentExpression();
					PopFollow();

					stream_assignmentExpression.Add(assignmentExpression22.Tree);


					{
					// AST REWRITE
					// elements: assignmentExpression, IDENTIFIER
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 86:4: -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) )
					{
						DebugLocation(86, 7);
						// C:\\work\\ReoScript\\ReoScript.g:86:7: ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(86, 9);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANONYMOUS_FUNCTION, "ANONYMOUS_FUNCTION"), root_1);

						DebugLocation(86, 28);
						// C:\\work\\ReoScript\\ReoScript.g:86:28: ^( PARAMETER_DEFINES IDENTIFIER )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(86, 30);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

						DebugLocation(86, 48);
						adaptor.AddChild(root_2, stream_IDENTIFIER.NextNode());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(86, 60);
						// C:\\work\\ReoScript\\ReoScript.g:86:60: ^( RETURN assignmentExpression )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(86, 62);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, "RETURN"), root_2);

						DebugLocation(86, 69);
						adaptor.AddChild(root_2, stream_assignmentExpression.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(7); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_function_define", 4);
			LeaveRule("anonymous_function_define", 4);
			LeaveRule_anonymous_function_define();
		}
		DebugLocation(88, 1);
		} finally { DebugExitRule(GrammarFileName, "anonymous_function_define"); }
		return retval;

	}
	// $ANTLR end "anonymous_function_define"

	partial void EnterRule_parameterDeclarationList();
	partial void LeaveRule_parameterDeclarationList();

	// $ANTLR start "parameterDeclarationList"
	// C:\\work\\ReoScript\\ReoScript.g:90:1: parameterDeclarationList : IDENTIFIER ( COMMA ! IDENTIFIER )* ;
	[GrammarRule("parameterDeclarationList")]
	private AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationList()
	{
		EnterRule_parameterDeclarationList();
		EnterRule("parameterDeclarationList", 5);
		TraceIn("parameterDeclarationList", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER23 = default(IToken);
		IToken COMMA24 = default(IToken);
		IToken IDENTIFIER25 = default(IToken);

		CommonTree IDENTIFIER23_tree = default(CommonTree);
		CommonTree COMMA24_tree = default(CommonTree);
		CommonTree IDENTIFIER25_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "parameterDeclarationList");
		DebugLocation(90, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:91:2: ( IDENTIFIER ( COMMA ! IDENTIFIER )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:91:4: IDENTIFIER ( COMMA ! IDENTIFIER )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(91, 4);
			IDENTIFIER23=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_parameterDeclarationList676); 
			IDENTIFIER23_tree = (CommonTree)adaptor.Create(IDENTIFIER23);
			adaptor.AddChild(root_0, IDENTIFIER23_tree);
			DebugLocation(91, 15);
			// C:\\work\\ReoScript\\ReoScript.g:91:15: ( COMMA ! IDENTIFIER )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==COMMA))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:91:16: COMMA ! IDENTIFIER
					{
					DebugLocation(91, 21);
					COMMA24=(IToken)Match(input,COMMA,Follow._COMMA_in_parameterDeclarationList679); 
					DebugLocation(91, 23);
					IDENTIFIER25=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_parameterDeclarationList682); 
					IDENTIFIER25_tree = (CommonTree)adaptor.Create(IDENTIFIER25);
					adaptor.AddChild(root_0, IDENTIFIER25_tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameterDeclarationList", 5);
			LeaveRule("parameterDeclarationList", 5);
			LeaveRule_parameterDeclarationList();
		}
		DebugLocation(92, 1);
		} finally { DebugExitRule(GrammarFileName, "parameterDeclarationList"); }
		return retval;

	}
	// $ANTLR end "parameterDeclarationList"

	partial void EnterRule_block();
	partial void LeaveRule_block();

	// $ANTLR start "block"
	// C:\\work\\ReoScript\\ReoScript.g:94:1: block : '{' ( statement )* '}' -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 6);
		TraceIn("block", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> statement27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(94, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:95:2: ( '{' ( statement )* '}' -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:95:4: '{' ( statement )* '}'
			{
			DebugLocation(95, 4);
			char_literal26=(IToken)Match(input,LCURLY,Follow._LCURLY_in_block695);  
			stream_LCURLY.Add(char_literal26);

			DebugLocation(95, 8);
			// C:\\work\\ReoScript\\ReoScript.g:95:8: ( statement )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==BINARY_LITERATE||LA10_0==DECREMENT||LA10_0==FALSE||(LA10_0>=HEX_LITERATE && LA10_0<=IDENTIFIER)||LA10_0==INCREMENT||(LA10_0>=LBRACE && LA10_0<=LCURLY)||LA10_0==LPAREN||(LA10_0>=NULL && LA10_0<=NUMBER_LITERATE)||LA10_0==STRING_LITERATE||(LA10_0>=THIS && LA10_0<=UNDEFINED)||LA10_0==105||LA10_0==107||(LA10_0>=109 && LA10_0<=113)||(LA10_0>=115 && LA10_0<=118)))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:95:8: statement
					{
					DebugLocation(95, 8);
					PushFollow(Follow._statement_in_block697);
					statement27=statement();
					PopFollow();

					stream_statement.Add(statement27.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(95, 19);
			char_literal28=(IToken)Match(input,RCURLY,Follow._RCURLY_in_block700);  
			stream_RCURLY.Add(char_literal28);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 96:3: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(96, 6);
				// C:\\work\\ReoScript\\ReoScript.g:96:6: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(96, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(96, 14);
				// C:\\work\\ReoScript\\ReoScript.g:96:14: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(96, 14);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 6);
			LeaveRule("block", 6);
			LeaveRule_block();
		}
		DebugLocation(97, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// C:\\work\\ReoScript\\ReoScript.g:100:1: public statement : ( importStatement SEMI !| localVariableDeclaration SEMI !| function_define ( SEMI !)? | embeddedStatement );
	[GrammarRule("statement")]
	public AstParserRuleReturnScope<CommonTree, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 7);
		TraceIn("statement", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken SEMI30 = default(IToken);
		IToken SEMI32 = default(IToken);
		IToken SEMI34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> importStatement29 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration31 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> function_define33 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement35 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI30_tree = default(CommonTree);
		CommonTree SEMI32_tree = default(CommonTree);
		CommonTree SEMI34_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(100, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:101:2: ( importStatement SEMI !| localVariableDeclaration SEMI !| function_define ( SEMI !)? | embeddedStatement )
			int alt12=4;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case 113:
				{
				alt12 = 1;
				}
				break;
			case TYPE:
				{
				alt12 = 2;
				}
				break;
			case 111:
				{
				int LA12_3 = input.LA(2);

				if ((LA12_3==IDENTIFIER))
				{
					alt12 = 3;
				}
				else if ((LA12_3==LPAREN))
				{
					alt12 = 4;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BINARY_LITERATE:
			case DECREMENT:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case INCREMENT:
			case LBRACE:
			case LCURLY:
			case LPAREN:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case UNDEFINED:
			case 105:
			case 107:
			case 109:
			case 110:
			case 112:
			case 115:
			case 116:
			case 117:
			case 118:
				{
				alt12 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:102:4: importStatement SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(102, 4);
				PushFollow(Follow._importStatement_in_statement729);
				importStatement29=importStatement();
				PopFollow();

				adaptor.AddChild(root_0, importStatement29.Tree);
				DebugLocation(102, 24);
				SEMI30=(IToken)Match(input,SEMI,Follow._SEMI_in_statement731); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:103:4: localVariableDeclaration SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(103, 4);
				PushFollow(Follow._localVariableDeclaration_in_statement737);
				localVariableDeclaration31=localVariableDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, localVariableDeclaration31.Tree);
				DebugLocation(103, 33);
				SEMI32=(IToken)Match(input,SEMI,Follow._SEMI_in_statement739); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:104:4: function_define ( SEMI !)?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(104, 4);
				PushFollow(Follow._function_define_in_statement745);
				function_define33=function_define();
				PopFollow();

				adaptor.AddChild(root_0, function_define33.Tree);
				DebugLocation(104, 24);
				// C:\\work\\ReoScript\\ReoScript.g:104:24: ( SEMI !)?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==SEMI))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:104:24: SEMI !
					{
					DebugLocation(104, 24);
					SEMI34=(IToken)Match(input,SEMI,Follow._SEMI_in_statement747); 

					}
					break;

				}
				} finally { DebugExitSubRule(11); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:105:4: embeddedStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(105, 4);
				PushFollow(Follow._embeddedStatement_in_statement754);
				embeddedStatement35=embeddedStatement();
				PopFollow();

				adaptor.AddChild(root_0, embeddedStatement35.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 7);
			LeaveRule("statement", 7);
			LeaveRule_statement();
		}
		DebugLocation(106, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_importStatement();
	partial void LeaveRule_importStatement();

	// $ANTLR start "importStatement"
	// C:\\work\\ReoScript\\ReoScript.g:108:1: importStatement : 'import' namespace -> ^( IMPORT namespace ) ;
	[GrammarRule("importStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> importStatement()
	{
		EnterRule_importStatement();
		EnterRule("importStatement", 8);
		TraceIn("importStatement", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal36 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> namespace37 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal36_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleSubtreeStream stream_namespace=new RewriteRuleSubtreeStream(adaptor,"rule namespace");
		try { DebugEnterRule(GrammarFileName, "importStatement");
		DebugLocation(108, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:109:2: ( 'import' namespace -> ^( IMPORT namespace ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:109:4: 'import' namespace
			{
			DebugLocation(109, 4);
			string_literal36=(IToken)Match(input,113,Follow._113_in_importStatement765);  
			stream_113.Add(string_literal36);

			DebugLocation(109, 13);
			PushFollow(Follow._namespace_in_importStatement767);
			namespace37=@namespace();
			PopFollow();

			stream_namespace.Add(namespace37.Tree);


			{
			// AST REWRITE
			// elements: namespace
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 110:3: -> ^( IMPORT namespace )
			{
				DebugLocation(110, 6);
				// C:\\work\\ReoScript\\ReoScript.g:110:6: ^( IMPORT namespace )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(110, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPORT, "IMPORT"), root_1);

				DebugLocation(110, 15);
				adaptor.AddChild(root_1, stream_namespace.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("importStatement", 8);
			LeaveRule("importStatement", 8);
			LeaveRule_importStatement();
		}
		DebugLocation(111, 1);
		} finally { DebugExitRule(GrammarFileName, "importStatement"); }
		return retval;

	}
	// $ANTLR end "importStatement"

	partial void EnterRule_namespace();
	partial void LeaveRule_namespace();

	// $ANTLR start "namespace"
	// C:\\work\\ReoScript\\ReoScript.g:113:1: namespace : IDENTIFIER ( '.' ( IDENTIFIER | '*' ) )* ;
	[GrammarRule("namespace")]
	private AstParserRuleReturnScope<CommonTree, IToken> @namespace()
	{
		EnterRule_namespace();
		EnterRule("namespace", 9);
		TraceIn("namespace", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER38 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken set40 = default(IToken);

		CommonTree IDENTIFIER38_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree set40_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "namespace");
		DebugLocation(113, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:114:2: ( IDENTIFIER ( '.' ( IDENTIFIER | '*' ) )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:114:4: IDENTIFIER ( '.' ( IDENTIFIER | '*' ) )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(114, 4);
			IDENTIFIER38=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_namespace788); 
			IDENTIFIER38_tree = (CommonTree)adaptor.Create(IDENTIFIER38);
			adaptor.AddChild(root_0, IDENTIFIER38_tree);
			DebugLocation(114, 15);
			// C:\\work\\ReoScript\\ReoScript.g:114:15: ( '.' ( IDENTIFIER | '*' ) )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==DOT))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:114:16: '.' ( IDENTIFIER | '*' )
					{
					DebugLocation(114, 16);
					char_literal39=(IToken)Match(input,DOT,Follow._DOT_in_namespace791); 
					char_literal39_tree = (CommonTree)adaptor.Create(char_literal39);
					adaptor.AddChild(root_0, char_literal39_tree);
					DebugLocation(114, 20);

					set40=(IToken)input.LT(1);
					if (input.LA(1)==IDENTIFIER||input.LA(1)==MUL)
					{
						input.Consume();
						adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set40));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace", 9);
			LeaveRule("namespace", 9);
			LeaveRule_namespace();
		}
		DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace"); }
		return retval;

	}
	// $ANTLR end "namespace"

	partial void EnterRule_embeddedStatement();
	partial void LeaveRule_embeddedStatement();

	// $ANTLR start "embeddedStatement"
	// C:\\work\\ReoScript\\ReoScript.g:117:1: embeddedStatement : ( block | statementExpression SEMI !| ifelse | forStatement | foreachStatement | whileStatement | switchStatement | terminalStatement );
	[GrammarRule("embeddedStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement()
	{
		EnterRule_embeddedStatement();
		EnterRule("embeddedStatement", 10);
		TraceIn("embeddedStatement", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken SEMI43 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> block41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpression42 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ifelse44 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forStatement45 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> foreachStatement46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> whileStatement47 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchStatement48 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> terminalStatement49 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI43_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "embeddedStatement");
		DebugLocation(117, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:118:2: ( block | statementExpression SEMI !| ifelse | forStatement | foreachStatement | whileStatement | switchStatement | terminalStatement )
			int alt14=8;
			try { DebugEnterDecision(14, false);
			switch (input.LA(1))
			{
			case LCURLY:
				{
				switch (input.LA(2))
				{
				case BINARY_LITERATE:
				case DECREMENT:
				case FALSE:
				case HEX_LITERATE:
				case INCREMENT:
				case LBRACE:
				case LCURLY:
				case LPAREN:
				case NULL:
				case NUMBER_LITERATE:
				case THIS:
				case TRUE:
				case TYPE:
				case UNDEFINED:
				case 105:
				case 107:
				case 109:
				case 110:
				case 111:
				case 112:
				case 113:
				case 115:
				case 116:
				case 117:
				case 118:
					{
					alt14 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA14_9 = input.LA(3);

					if (((LA14_9>=ASSIGNMENT && LA14_9<=ASSIGN_RSHIFT)||LA14_9==DECREMENT||LA14_9==DOT||LA14_9==INCREMENT||(LA14_9>=LBRACE && LA14_9<=LCURLY)||LA14_9==LPAREN||LA14_9==SEMI||LA14_9==104))
					{
						alt14 = 1;
					}
					else if ((LA14_9==COLON))
					{
						alt14 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 14, 9, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case STRING_LITERATE:
					{
					int LA14_10 = input.LA(3);

					if (((LA14_10>=ASSIGNMENT && LA14_10<=ASSIGN_RSHIFT)||LA14_10==DECREMENT||LA14_10==DOT||LA14_10==INCREMENT||(LA14_10>=LBRACE && LA14_10<=LCURLY)||LA14_10==LPAREN||LA14_10==SEMI))
					{
						alt14 = 1;
					}
					else if ((LA14_10==COLON))
					{
						alt14 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 14, 10, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case RCURLY:
					{
					switch (input.LA(3))
					{
					case BINARY_LITERATE:
					case ELSE:
					case FALSE:
					case HEX_LITERATE:
					case IDENTIFIER:
					case LBRACE:
					case LCURLY:
					case LPAREN:
					case NULL:
					case NUMBER_LITERATE:
					case RCURLY:
					case STRING_LITERATE:
					case THIS:
					case TRUE:
					case TYPE:
					case UNDEFINED:
					case 102:
					case 103:
					case 105:
					case 106:
					case 107:
					case 108:
					case 109:
					case 110:
					case 111:
					case 112:
					case 113:
					case 115:
					case 116:
					case 117:
					case 118:
						{
						alt14 = 1;
						}
						break;
					case INCREMENT:
						{
						int LA14_13 = input.LA(4);

						if ((LA14_13==BINARY_LITERATE||LA14_13==FALSE||(LA14_13>=HEX_LITERATE && LA14_13<=IDENTIFIER)||(LA14_13>=LBRACE && LA14_13<=LCURLY)||LA14_13==LPAREN||(LA14_13>=NULL && LA14_13<=NUMBER_LITERATE)||LA14_13==STRING_LITERATE||(LA14_13>=THIS && LA14_13<=TRUE)||LA14_13==UNDEFINED||LA14_13==111))
						{
							alt14 = 1;
						}
						else if ((LA14_13==SEMI))
						{
							alt14 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 14, 13, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case DECREMENT:
						{
						int LA14_14 = input.LA(4);

						if ((LA14_14==BINARY_LITERATE||LA14_14==FALSE||(LA14_14>=HEX_LITERATE && LA14_14<=IDENTIFIER)||(LA14_14>=LBRACE && LA14_14<=LCURLY)||LA14_14==LPAREN||(LA14_14>=NULL && LA14_14<=NUMBER_LITERATE)||LA14_14==STRING_LITERATE||(LA14_14>=THIS && LA14_14<=TRUE)||LA14_14==UNDEFINED||LA14_14==111))
						{
							alt14 = 1;
						}
						else if ((LA14_14==SEMI))
						{
							alt14 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 14, 14, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case ASSIGNMENT:
					case ASSIGN_AND:
					case ASSIGN_DIV:
					case ASSIGN_LSHIFT:
					case ASSIGN_MINUS:
					case ASSIGN_MUL:
					case ASSIGN_OR:
					case ASSIGN_PLUS:
					case ASSIGN_REM:
					case ASSIGN_REV:
					case ASSIGN_RSHIFT:
					case SEMI:
						{
						alt14 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 14, 11, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case COMMA:
					{
					alt14 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 14, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case BINARY_LITERATE:
			case DECREMENT:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case INCREMENT:
			case LBRACE:
			case LPAREN:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case UNDEFINED:
			case 109:
			case 111:
			case 115:
				{
				alt14 = 2;
				}
				break;
			case 112:
				{
				alt14 = 3;
				}
				break;
			case 110:
				{
				int LA14_4 = input.LA(2);

				if ((LA14_4==LPAREN))
				{
					switch (input.LA(3))
					{
					case TYPE:
						{
						int LA14_15 = input.LA(4);

						if ((LA14_15==IDENTIFIER))
						{
							int LA14_18 = input.LA(5);

							if ((LA14_18==114))
							{
								alt14 = 5;
							}
							else if ((LA14_18==ASSIGNMENT||LA14_18==COMMA||LA14_18==SEMI))
							{
								alt14 = 4;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 14, 18, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 14, 15, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IDENTIFIER:
						{
						int LA14_16 = input.LA(4);

						if (((LA14_16>=ASSIGNMENT && LA14_16<=ASSIGN_RSHIFT)||LA14_16==COMMA||LA14_16==DECREMENT||LA14_16==DOT||LA14_16==INCREMENT||(LA14_16>=LBRACE && LA14_16<=LCURLY)||LA14_16==LPAREN||LA14_16==SEMI||LA14_16==104))
						{
							alt14 = 4;
						}
						else if ((LA14_16==114))
						{
							alt14 = 5;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 14, 16, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case BINARY_LITERATE:
					case DECREMENT:
					case FALSE:
					case HEX_LITERATE:
					case INCREMENT:
					case LBRACE:
					case LCURLY:
					case LPAREN:
					case NULL:
					case NUMBER_LITERATE:
					case SEMI:
					case STRING_LITERATE:
					case THIS:
					case TRUE:
					case UNDEFINED:
					case 109:
					case 111:
					case 115:
						{
						alt14 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 14, 12, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 118:
				{
				alt14 = 6;
				}
				break;
			case 117:
				{
				alt14 = 7;
				}
				break;
			case 105:
			case 107:
			case 116:
				{
				alt14 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:119:4: block
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(119, 4);
				PushFollow(Follow._block_in_embeddedStatement814);
				block41=block();
				PopFollow();

				adaptor.AddChild(root_0, block41.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:120:4: statementExpression SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(120, 4);
				PushFollow(Follow._statementExpression_in_embeddedStatement819);
				statementExpression42=statementExpression();
				PopFollow();

				adaptor.AddChild(root_0, statementExpression42.Tree);
				DebugLocation(120, 28);
				SEMI43=(IToken)Match(input,SEMI,Follow._SEMI_in_embeddedStatement821); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:121:4: ifelse
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(121, 4);
				PushFollow(Follow._ifelse_in_embeddedStatement827);
				ifelse44=ifelse();
				PopFollow();

				adaptor.AddChild(root_0, ifelse44.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:122:4: forStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(122, 4);
				PushFollow(Follow._forStatement_in_embeddedStatement832);
				forStatement45=forStatement();
				PopFollow();

				adaptor.AddChild(root_0, forStatement45.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:123:4: foreachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(123, 4);
				PushFollow(Follow._foreachStatement_in_embeddedStatement837);
				foreachStatement46=foreachStatement();
				PopFollow();

				adaptor.AddChild(root_0, foreachStatement46.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\work\\ReoScript\\ReoScript.g:124:4: whileStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(124, 4);
				PushFollow(Follow._whileStatement_in_embeddedStatement842);
				whileStatement47=whileStatement();
				PopFollow();

				adaptor.AddChild(root_0, whileStatement47.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\work\\ReoScript\\ReoScript.g:125:4: switchStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(125, 4);
				PushFollow(Follow._switchStatement_in_embeddedStatement847);
				switchStatement48=switchStatement();
				PopFollow();

				adaptor.AddChild(root_0, switchStatement48.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\work\\ReoScript\\ReoScript.g:126:4: terminalStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(126, 4);
				PushFollow(Follow._terminalStatement_in_embeddedStatement852);
				terminalStatement49=terminalStatement();
				PopFollow();

				adaptor.AddChild(root_0, terminalStatement49.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("embeddedStatement", 10);
			LeaveRule("embeddedStatement", 10);
			LeaveRule_embeddedStatement();
		}
		DebugLocation(127, 1);
		} finally { DebugExitRule(GrammarFileName, "embeddedStatement"); }
		return retval;

	}
	// $ANTLR end "embeddedStatement"

	partial void EnterRule_statementExpression();
	partial void LeaveRule_statementExpression();

	// $ANTLR start "statementExpression"
	// C:\\work\\ReoScript\\ReoScript.g:129:1: statementExpression : ( invocationExpression | 'new' primaryExpression -> ^( CREATE primaryExpression ) | 'delete' primaryExpression -> ^( DELETE primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) );
	[GrammarRule("statementExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> statementExpression()
	{
		EnterRule_statementExpression();
		EnterRule("statementExpression", 11);
		TraceIn("statementExpression", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal51 = default(IToken);
		IToken string_literal53 = default(IToken);
		IToken string_literal55 = default(IToken);
		IToken string_literal57 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> invocationExpression50 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression56 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression58 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal51_tree = default(CommonTree);
		CommonTree string_literal53_tree = default(CommonTree);
		CommonTree string_literal55_tree = default(CommonTree);
		CommonTree string_literal57_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INCREMENT=new RewriteRuleITokenStream(adaptor,"token INCREMENT");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_DECREMENT=new RewriteRuleITokenStream(adaptor,"token DECREMENT");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "statementExpression");
		DebugLocation(129, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:130:2: ( invocationExpression | 'new' primaryExpression -> ^( CREATE primaryExpression ) | 'delete' primaryExpression -> ^( DELETE primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) )
			int alt15=5;
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case BINARY_LITERATE:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case LBRACE:
			case LCURLY:
			case LPAREN:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case UNDEFINED:
			case 111:
				{
				alt15 = 1;
				}
				break;
			case 115:
				{
				alt15 = 2;
				}
				break;
			case 109:
				{
				alt15 = 3;
				}
				break;
			case INCREMENT:
				{
				alt15 = 4;
				}
				break;
			case DECREMENT:
				{
				alt15 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:132:2: invocationExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(132, 2);
				PushFollow(Follow._invocationExpression_in_statementExpression867);
				invocationExpression50=invocationExpression();
				PopFollow();

				adaptor.AddChild(root_0, invocationExpression50.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:133:4: 'new' primaryExpression
				{
				DebugLocation(133, 4);
				string_literal51=(IToken)Match(input,115,Follow._115_in_statementExpression872);  
				stream_115.Add(string_literal51);

				DebugLocation(133, 10);
				PushFollow(Follow._primaryExpression_in_statementExpression874);
				primaryExpression52=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression52.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 134:3: -> ^( CREATE primaryExpression )
				{
					DebugLocation(134, 6);
					// C:\\work\\ReoScript\\ReoScript.g:134:6: ^( CREATE primaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(134, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CREATE, "CREATE"), root_1);

					DebugLocation(134, 15);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:135:4: 'delete' primaryExpression
				{
				DebugLocation(135, 4);
				string_literal53=(IToken)Match(input,109,Follow._109_in_statementExpression889);  
				stream_109.Add(string_literal53);

				DebugLocation(135, 13);
				PushFollow(Follow._primaryExpression_in_statementExpression891);
				primaryExpression54=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression54.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 136:3: -> ^( DELETE primaryExpression )
				{
					DebugLocation(136, 6);
					// C:\\work\\ReoScript\\ReoScript.g:136:6: ^( DELETE primaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(136, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DELETE, "DELETE"), root_1);

					DebugLocation(136, 15);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:137:4: '++' primaryExpression
				{
				DebugLocation(137, 4);
				string_literal55=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_statementExpression906);  
				stream_INCREMENT.Add(string_literal55);

				DebugLocation(137, 9);
				PushFollow(Follow._primaryExpression_in_statementExpression908);
				primaryExpression56=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression56.Tree);


				{
				// AST REWRITE
				// elements: INCREMENT, primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 138:3: -> ^( PRE_UNARY_STEP primaryExpression '++' )
				{
					DebugLocation(138, 6);
					// C:\\work\\ReoScript\\ReoScript.g:138:6: ^( PRE_UNARY_STEP primaryExpression '++' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(138, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(138, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(138, 41);
					adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:139:4: '--' primaryExpression
				{
				DebugLocation(139, 4);
				string_literal57=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_statementExpression925);  
				stream_DECREMENT.Add(string_literal57);

				DebugLocation(139, 9);
				PushFollow(Follow._primaryExpression_in_statementExpression927);
				primaryExpression58=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression58.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression, DECREMENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 140:3: -> ^( PRE_UNARY_STEP primaryExpression '--' )
				{
					DebugLocation(140, 6);
					// C:\\work\\ReoScript\\ReoScript.g:140:6: ^( PRE_UNARY_STEP primaryExpression '--' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(140, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(140, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(140, 41);
					adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statementExpression", 11);
			LeaveRule("statementExpression", 11);
			LeaveRule_statementExpression();
		}
		DebugLocation(141, 1);
		} finally { DebugExitRule(GrammarFileName, "statementExpression"); }
		return retval;

	}
	// $ANTLR end "statementExpression"

	partial void EnterRule_localMemberVariableDeclaration();
	partial void LeaveRule_localMemberVariableDeclaration();

	// $ANTLR start "localMemberVariableDeclaration"
	// C:\\work\\ReoScript\\ReoScript.g:143:1: localMemberVariableDeclaration : TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ;
	[GrammarRule("localMemberVariableDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> localMemberVariableDeclaration()
	{
		EnterRule_localMemberVariableDeclaration();
		EnterRule("localMemberVariableDeclaration", 12);
		TraceIn("localMemberVariableDeclaration", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken TYPE59 = default(IToken);
		IToken char_literal61 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment60 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment62 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree TYPE59_tree = default(CommonTree);
		CommonTree char_literal61_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_localVariableDeclarationAssignment=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclarationAssignment");
		try { DebugEnterRule(GrammarFileName, "localMemberVariableDeclaration");
		DebugLocation(143, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:144:2: ( TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:144:24: TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )*
			{
			DebugLocation(144, 24);
			TYPE59=(IToken)Match(input,TYPE,Follow._TYPE_in_localMemberVariableDeclaration952);  
			stream_TYPE.Add(TYPE59);

			DebugLocation(144, 29);
			PushFollow(Follow._localVariableDeclarationAssignment_in_localMemberVariableDeclaration954);
			localVariableDeclarationAssignment60=localVariableDeclarationAssignment();
			PopFollow();

			stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment60.Tree);
			DebugLocation(144, 64);
			// C:\\work\\ReoScript\\ReoScript.g:144:64: ( ',' localVariableDeclarationAssignment )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==COMMA))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:144:65: ',' localVariableDeclarationAssignment
					{
					DebugLocation(144, 65);
					char_literal61=(IToken)Match(input,COMMA,Follow._COMMA_in_localMemberVariableDeclaration957);  
					stream_COMMA.Add(char_literal61);

					DebugLocation(144, 69);
					PushFollow(Follow._localVariableDeclarationAssignment_in_localMemberVariableDeclaration959);
					localVariableDeclarationAssignment62=localVariableDeclarationAssignment();
					PopFollow();

					stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment62.Tree);

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }



			{
			// AST REWRITE
			// elements: TYPE, localVariableDeclarationAssignment
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 145:3: -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ )
			{
				DebugLocation(145, 6);
				// C:\\work\\ReoScript\\ReoScript.g:145:6: ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(145, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DECLARATION, "DECLARATION"), root_1);

				DebugLocation(145, 40);
				adaptor.AddChild(root_1, stream_TYPE.NextNode());
				DebugLocation(145, 45);
				if (!(stream_localVariableDeclarationAssignment.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_localVariableDeclarationAssignment.HasNext )
				{
					DebugLocation(145, 45);
					adaptor.AddChild(root_1, stream_localVariableDeclarationAssignment.NextTree());

				}
				stream_localVariableDeclarationAssignment.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localMemberVariableDeclaration", 12);
			LeaveRule("localMemberVariableDeclaration", 12);
			LeaveRule_localMemberVariableDeclaration();
		}
		DebugLocation(146, 1);
		} finally { DebugExitRule(GrammarFileName, "localMemberVariableDeclaration"); }
		return retval;

	}
	// $ANTLR end "localMemberVariableDeclaration"

	partial void EnterRule_localVariableDeclaration();
	partial void LeaveRule_localVariableDeclaration();

	// $ANTLR start "localVariableDeclaration"
	// C:\\work\\ReoScript\\ReoScript.g:148:1: localVariableDeclaration : TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ;
	[GrammarRule("localVariableDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration()
	{
		EnterRule_localVariableDeclaration();
		EnterRule("localVariableDeclaration", 13);
		TraceIn("localVariableDeclaration", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken TYPE63 = default(IToken);
		IToken char_literal65 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment64 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment66 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree TYPE63_tree = default(CommonTree);
		CommonTree char_literal65_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_localVariableDeclarationAssignment=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclarationAssignment");
		try { DebugEnterRule(GrammarFileName, "localVariableDeclaration");
		DebugLocation(148, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:149:2: ( TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:149:4: TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )*
			{
			DebugLocation(149, 4);
			TYPE63=(IToken)Match(input,TYPE,Follow._TYPE_in_localVariableDeclaration988);  
			stream_TYPE.Add(TYPE63);

			DebugLocation(149, 9);
			PushFollow(Follow._localVariableDeclarationAssignment_in_localVariableDeclaration990);
			localVariableDeclarationAssignment64=localVariableDeclarationAssignment();
			PopFollow();

			stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment64.Tree);
			DebugLocation(149, 44);
			// C:\\work\\ReoScript\\ReoScript.g:149:44: ( ',' localVariableDeclarationAssignment )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==COMMA))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:149:45: ',' localVariableDeclarationAssignment
					{
					DebugLocation(149, 45);
					char_literal65=(IToken)Match(input,COMMA,Follow._COMMA_in_localVariableDeclaration993);  
					stream_COMMA.Add(char_literal65);

					DebugLocation(149, 49);
					PushFollow(Follow._localVariableDeclarationAssignment_in_localVariableDeclaration995);
					localVariableDeclarationAssignment66=localVariableDeclarationAssignment();
					PopFollow();

					stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment66.Tree);

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }



			{
			// AST REWRITE
			// elements: localVariableDeclarationAssignment, TYPE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 150:3: -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ )
			{
				DebugLocation(150, 6);
				// C:\\work\\ReoScript\\ReoScript.g:150:6: ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(150, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DECLARATION, "DECLARATION"), root_1);

				DebugLocation(150, 20);
				adaptor.AddChild(root_1, stream_TYPE.NextNode());
				DebugLocation(150, 25);
				if (!(stream_localVariableDeclarationAssignment.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_localVariableDeclarationAssignment.HasNext )
				{
					DebugLocation(150, 25);
					adaptor.AddChild(root_1, stream_localVariableDeclarationAssignment.NextTree());

				}
				stream_localVariableDeclarationAssignment.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclaration", 13);
			LeaveRule("localVariableDeclaration", 13);
			LeaveRule_localVariableDeclaration();
		}
		DebugLocation(151, 1);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclaration"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclaration"

	partial void EnterRule_localVariableDeclarationAssignment();
	partial void LeaveRule_localVariableDeclarationAssignment();

	// $ANTLR start "localVariableDeclarationAssignment"
	// C:\\work\\ReoScript\\ReoScript.g:153:1: localVariableDeclarationAssignment : IDENTIFIER ( '=' expression )? -> ^( LOCAL_DECLARE_ASSIGNMENT IDENTIFIER ( expression )? ) ;
	[GrammarRule("localVariableDeclarationAssignment")]
	private AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment()
	{
		EnterRule_localVariableDeclarationAssignment();
		EnterRule("localVariableDeclarationAssignment", 14);
		TraceIn("localVariableDeclarationAssignment", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER67 = default(IToken);
		IToken char_literal68 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression69 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENTIFIER67_tree = default(CommonTree);
		CommonTree char_literal68_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGNMENT=new RewriteRuleITokenStream(adaptor,"token ASSIGNMENT");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "localVariableDeclarationAssignment");
		DebugLocation(153, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:154:2: ( IDENTIFIER ( '=' expression )? -> ^( LOCAL_DECLARE_ASSIGNMENT IDENTIFIER ( expression )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:154:4: IDENTIFIER ( '=' expression )?
			{
			DebugLocation(154, 4);
			IDENTIFIER67=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_localVariableDeclarationAssignment1021);  
			stream_IDENTIFIER.Add(IDENTIFIER67);

			DebugLocation(154, 15);
			// C:\\work\\ReoScript\\ReoScript.g:154:15: ( '=' expression )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==ASSIGNMENT))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:154:16: '=' expression
				{
				DebugLocation(154, 16);
				char_literal68=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_localVariableDeclarationAssignment1024);  
				stream_ASSIGNMENT.Add(char_literal68);

				DebugLocation(154, 20);
				PushFollow(Follow._expression_in_localVariableDeclarationAssignment1026);
				expression69=expression();
				PopFollow();

				stream_expression.Add(expression69.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }



			{
			// AST REWRITE
			// elements: IDENTIFIER, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 155:3: -> ^( LOCAL_DECLARE_ASSIGNMENT IDENTIFIER ( expression )? )
			{
				DebugLocation(155, 6);
				// C:\\work\\ReoScript\\ReoScript.g:155:6: ^( LOCAL_DECLARE_ASSIGNMENT IDENTIFIER ( expression )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(155, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LOCAL_DECLARE_ASSIGNMENT, "LOCAL_DECLARE_ASSIGNMENT"), root_1);

				DebugLocation(155, 33);
				adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());
				DebugLocation(155, 44);
				// C:\\work\\ReoScript\\ReoScript.g:155:44: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(155, 44);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclarationAssignment", 14);
			LeaveRule("localVariableDeclarationAssignment", 14);
			LeaveRule_localVariableDeclarationAssignment();
		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclarationAssignment"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclarationAssignment"

	partial void EnterRule_invocationExpression();
	partial void LeaveRule_invocationExpression();

	// $ANTLR start "invocationExpression"
	// C:\\work\\ReoScript\\ReoScript.g:158:1: invocationExpression : id= primaryExpression ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | -> primaryExpression ) ;
	[GrammarRule("invocationExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> invocationExpression()
	{
		EnterRule_invocationExpression();
		EnterRule("invocationExpression", 15);
		TraceIn("invocationExpression", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal70 = default(IToken);
		IToken string_literal72 = default(IToken);
		IToken string_literal74 = default(IToken);
		IToken string_literal76 = default(IToken);
		IToken string_literal78 = default(IToken);
		IToken string_literal80 = default(IToken);
		IToken string_literal82 = default(IToken);
		IToken string_literal84 = default(IToken);
		IToken string_literal86 = default(IToken);
		IToken string_literal88 = default(IToken);
		IToken string_literal90 = default(IToken);
		IToken string_literal92 = default(IToken);
		IToken string_literal93 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> id = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression77 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression79 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression85 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression91 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal70_tree = default(CommonTree);
		CommonTree string_literal72_tree = default(CommonTree);
		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree string_literal76_tree = default(CommonTree);
		CommonTree string_literal78_tree = default(CommonTree);
		CommonTree string_literal80_tree = default(CommonTree);
		CommonTree string_literal82_tree = default(CommonTree);
		CommonTree string_literal84_tree = default(CommonTree);
		CommonTree string_literal86_tree = default(CommonTree);
		CommonTree string_literal88_tree = default(CommonTree);
		CommonTree string_literal90_tree = default(CommonTree);
		CommonTree string_literal92_tree = default(CommonTree);
		CommonTree string_literal93_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INCREMENT=new RewriteRuleITokenStream(adaptor,"token INCREMENT");
		RewriteRuleITokenStream stream_ASSIGN_OR=new RewriteRuleITokenStream(adaptor,"token ASSIGN_OR");
		RewriteRuleITokenStream stream_ASSIGN_MUL=new RewriteRuleITokenStream(adaptor,"token ASSIGN_MUL");
		RewriteRuleITokenStream stream_ASSIGN_LSHIFT=new RewriteRuleITokenStream(adaptor,"token ASSIGN_LSHIFT");
		RewriteRuleITokenStream stream_ASSIGN_REM=new RewriteRuleITokenStream(adaptor,"token ASSIGN_REM");
		RewriteRuleITokenStream stream_ASSIGN_REV=new RewriteRuleITokenStream(adaptor,"token ASSIGN_REV");
		RewriteRuleITokenStream stream_ASSIGN_AND=new RewriteRuleITokenStream(adaptor,"token ASSIGN_AND");
		RewriteRuleITokenStream stream_ASSIGN_PLUS=new RewriteRuleITokenStream(adaptor,"token ASSIGN_PLUS");
		RewriteRuleITokenStream stream_ASSIGN_RSHIFT=new RewriteRuleITokenStream(adaptor,"token ASSIGN_RSHIFT");
		RewriteRuleITokenStream stream_ASSIGNMENT=new RewriteRuleITokenStream(adaptor,"token ASSIGNMENT");
		RewriteRuleITokenStream stream_DECREMENT=new RewriteRuleITokenStream(adaptor,"token DECREMENT");
		RewriteRuleITokenStream stream_ASSIGN_MINUS=new RewriteRuleITokenStream(adaptor,"token ASSIGN_MINUS");
		RewriteRuleITokenStream stream_ASSIGN_DIV=new RewriteRuleITokenStream(adaptor,"token ASSIGN_DIV");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "invocationExpression");
		DebugLocation(158, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:159:2: (id= primaryExpression ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | -> primaryExpression ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:160:4: id= primaryExpression ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | -> primaryExpression )
			{
			DebugLocation(160, 6);
			PushFollow(Follow._primaryExpression_in_invocationExpression1058);
			id=primaryExpression();
			PopFollow();

			stream_primaryExpression.Add(id.Tree);
			DebugLocation(161, 4);
			// C:\\work\\ReoScript\\ReoScript.g:161:4: ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | -> primaryExpression )
			int alt19=14;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			switch (input.LA(1))
			{
			case ASSIGNMENT:
				{
				alt19 = 1;
				}
				break;
			case ASSIGN_PLUS:
				{
				alt19 = 2;
				}
				break;
			case ASSIGN_MINUS:
				{
				alt19 = 3;
				}
				break;
			case ASSIGN_MUL:
				{
				alt19 = 4;
				}
				break;
			case ASSIGN_DIV:
				{
				alt19 = 5;
				}
				break;
			case ASSIGN_REM:
				{
				alt19 = 6;
				}
				break;
			case ASSIGN_AND:
				{
				alt19 = 7;
				}
				break;
			case ASSIGN_OR:
				{
				alt19 = 8;
				}
				break;
			case ASSIGN_REV:
				{
				alt19 = 9;
				}
				break;
			case ASSIGN_LSHIFT:
				{
				alt19 = 10;
				}
				break;
			case ASSIGN_RSHIFT:
				{
				alt19 = 11;
				}
				break;
			case INCREMENT:
				{
				alt19 = 12;
				}
				break;
			case DECREMENT:
				{
				alt19 = 13;
				}
				break;
			case COMMA:
			case RPAREN:
			case SEMI:
				{
				alt19 = 14;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:162:5: '=' expression
				{
				DebugLocation(162, 5);
				char_literal70=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_invocationExpression1069);  
				stream_ASSIGNMENT.Add(char_literal70);

				DebugLocation(162, 9);
				PushFollow(Follow._expression_in_invocationExpression1071);
				expression71=expression();
				PopFollow();

				stream_expression.Add(expression71.Tree);


				{
				// AST REWRITE
				// elements: expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 162:21: -> ^( ASSIGNMENT $id expression )
				{
					DebugLocation(162, 24);
					// C:\\work\\ReoScript\\ReoScript.g:162:24: ^( ASSIGNMENT $id expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(162, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(162, 38);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(162, 41);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:163:6: '+=' expression
				{
				DebugLocation(163, 6);
				string_literal72=(IToken)Match(input,ASSIGN_PLUS,Follow._ASSIGN_PLUS_in_invocationExpression1090);  
				stream_ASSIGN_PLUS.Add(string_literal72);

				DebugLocation(163, 11);
				PushFollow(Follow._expression_in_invocationExpression1092);
				expression73=expression();
				PopFollow();

				stream_expression.Add(expression73.Tree);


				{
				// AST REWRITE
				// elements: id, id, expression
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 163:23: -> ^( ASSIGNMENT $id ^( PLUS $id expression ) )
				{
					DebugLocation(163, 26);
					// C:\\work\\ReoScript\\ReoScript.g:163:26: ^( ASSIGNMENT $id ^( PLUS $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(163, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(163, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(163, 43);
					// C:\\work\\ReoScript\\ReoScript.g:163:43: ^( PLUS $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(163, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PLUS, "PLUS"), root_2);

					DebugLocation(163, 51);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(163, 54);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:164:6: '-=' expression
				{
				DebugLocation(164, 6);
				string_literal74=(IToken)Match(input,ASSIGN_MINUS,Follow._ASSIGN_MINUS_in_invocationExpression1118);  
				stream_ASSIGN_MINUS.Add(string_literal74);

				DebugLocation(164, 11);
				PushFollow(Follow._expression_in_invocationExpression1120);
				expression75=expression();
				PopFollow();

				stream_expression.Add(expression75.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 164:23: -> ^( ASSIGNMENT $id ^( MINUS $id expression ) )
				{
					DebugLocation(164, 26);
					// C:\\work\\ReoScript\\ReoScript.g:164:26: ^( ASSIGNMENT $id ^( MINUS $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(164, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(164, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(164, 43);
					// C:\\work\\ReoScript\\ReoScript.g:164:43: ^( MINUS $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(164, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MINUS, "MINUS"), root_2);

					DebugLocation(164, 52);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(164, 55);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:165:6: '*=' expression
				{
				DebugLocation(165, 6);
				string_literal76=(IToken)Match(input,ASSIGN_MUL,Follow._ASSIGN_MUL_in_invocationExpression1146);  
				stream_ASSIGN_MUL.Add(string_literal76);

				DebugLocation(165, 11);
				PushFollow(Follow._expression_in_invocationExpression1148);
				expression77=expression();
				PopFollow();

				stream_expression.Add(expression77.Tree);


				{
				// AST REWRITE
				// elements: id, id, expression
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 165:23: -> ^( ASSIGNMENT $id ^( MUL $id expression ) )
				{
					DebugLocation(165, 26);
					// C:\\work\\ReoScript\\ReoScript.g:165:26: ^( ASSIGNMENT $id ^( MUL $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(165, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(165, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(165, 43);
					// C:\\work\\ReoScript\\ReoScript.g:165:43: ^( MUL $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(165, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MUL, "MUL"), root_2);

					DebugLocation(165, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(165, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:166:6: '/=' expression
				{
				DebugLocation(166, 6);
				string_literal78=(IToken)Match(input,ASSIGN_DIV,Follow._ASSIGN_DIV_in_invocationExpression1174);  
				stream_ASSIGN_DIV.Add(string_literal78);

				DebugLocation(166, 11);
				PushFollow(Follow._expression_in_invocationExpression1176);
				expression79=expression();
				PopFollow();

				stream_expression.Add(expression79.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 166:23: -> ^( ASSIGNMENT $id ^( DIV $id expression ) )
				{
					DebugLocation(166, 26);
					// C:\\work\\ReoScript\\ReoScript.g:166:26: ^( ASSIGNMENT $id ^( DIV $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(166, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(166, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(166, 43);
					// C:\\work\\ReoScript\\ReoScript.g:166:43: ^( DIV $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(166, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DIV, "DIV"), root_2);

					DebugLocation(166, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(166, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\work\\ReoScript\\ReoScript.g:167:6: '%=' expression
				{
				DebugLocation(167, 6);
				string_literal80=(IToken)Match(input,ASSIGN_REM,Follow._ASSIGN_REM_in_invocationExpression1202);  
				stream_ASSIGN_REM.Add(string_literal80);

				DebugLocation(167, 11);
				PushFollow(Follow._expression_in_invocationExpression1204);
				expression81=expression();
				PopFollow();

				stream_expression.Add(expression81.Tree);


				{
				// AST REWRITE
				// elements: expression, id, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 167:23: -> ^( ASSIGNMENT $id ^( MOD $id expression ) )
				{
					DebugLocation(167, 26);
					// C:\\work\\ReoScript\\ReoScript.g:167:26: ^( ASSIGNMENT $id ^( MOD $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(167, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(167, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(167, 43);
					// C:\\work\\ReoScript\\ReoScript.g:167:43: ^( MOD $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(167, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MOD, "MOD"), root_2);

					DebugLocation(167, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(167, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\work\\ReoScript\\ReoScript.g:168:6: '&=' expression
				{
				DebugLocation(168, 6);
				string_literal82=(IToken)Match(input,ASSIGN_AND,Follow._ASSIGN_AND_in_invocationExpression1230);  
				stream_ASSIGN_AND.Add(string_literal82);

				DebugLocation(168, 11);
				PushFollow(Follow._expression_in_invocationExpression1232);
				expression83=expression();
				PopFollow();

				stream_expression.Add(expression83.Tree);


				{
				// AST REWRITE
				// elements: expression, id, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 168:23: -> ^( ASSIGNMENT $id ^( AND $id expression ) )
				{
					DebugLocation(168, 26);
					// C:\\work\\ReoScript\\ReoScript.g:168:26: ^( ASSIGNMENT $id ^( AND $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(168, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(168, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(168, 43);
					// C:\\work\\ReoScript\\ReoScript.g:168:43: ^( AND $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(168, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(AND, "AND"), root_2);

					DebugLocation(168, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(168, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\work\\ReoScript\\ReoScript.g:169:6: '|=' expression
				{
				DebugLocation(169, 6);
				string_literal84=(IToken)Match(input,ASSIGN_OR,Follow._ASSIGN_OR_in_invocationExpression1258);  
				stream_ASSIGN_OR.Add(string_literal84);

				DebugLocation(169, 11);
				PushFollow(Follow._expression_in_invocationExpression1260);
				expression85=expression();
				PopFollow();

				stream_expression.Add(expression85.Tree);


				{
				// AST REWRITE
				// elements: expression, id, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 169:23: -> ^( ASSIGNMENT $id ^( OR $id expression ) )
				{
					DebugLocation(169, 26);
					// C:\\work\\ReoScript\\ReoScript.g:169:26: ^( ASSIGNMENT $id ^( OR $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(169, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(169, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(169, 43);
					// C:\\work\\ReoScript\\ReoScript.g:169:43: ^( OR $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(169, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(OR, "OR"), root_2);

					DebugLocation(169, 49);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(169, 52);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\work\\ReoScript\\ReoScript.g:170:6: '^=' expression
				{
				DebugLocation(170, 6);
				string_literal86=(IToken)Match(input,ASSIGN_REV,Follow._ASSIGN_REV_in_invocationExpression1286);  
				stream_ASSIGN_REV.Add(string_literal86);

				DebugLocation(170, 11);
				PushFollow(Follow._expression_in_invocationExpression1288);
				expression87=expression();
				PopFollow();

				stream_expression.Add(expression87.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 170:23: -> ^( ASSIGNMENT $id ^( XOR $id expression ) )
				{
					DebugLocation(170, 26);
					// C:\\work\\ReoScript\\ReoScript.g:170:26: ^( ASSIGNMENT $id ^( XOR $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(170, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(170, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(170, 43);
					// C:\\work\\ReoScript\\ReoScript.g:170:43: ^( XOR $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(170, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(XOR, "XOR"), root_2);

					DebugLocation(170, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(170, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\work\\ReoScript\\ReoScript.g:171:6: '<<=' expression
				{
				DebugLocation(171, 6);
				string_literal88=(IToken)Match(input,ASSIGN_LSHIFT,Follow._ASSIGN_LSHIFT_in_invocationExpression1314);  
				stream_ASSIGN_LSHIFT.Add(string_literal88);

				DebugLocation(171, 12);
				PushFollow(Follow._expression_in_invocationExpression1316);
				expression89=expression();
				PopFollow();

				stream_expression.Add(expression89.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 171:23: -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) )
				{
					DebugLocation(171, 26);
					// C:\\work\\ReoScript\\ReoScript.g:171:26: ^( ASSIGNMENT $id ^( LSHIFT $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(171, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(171, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(171, 43);
					// C:\\work\\ReoScript\\ReoScript.g:171:43: ^( LSHIFT $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(171, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LSHIFT, "LSHIFT"), root_2);

					DebugLocation(171, 53);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(171, 56);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\work\\ReoScript\\ReoScript.g:172:6: '>>=' expression
				{
				DebugLocation(172, 6);
				string_literal90=(IToken)Match(input,ASSIGN_RSHIFT,Follow._ASSIGN_RSHIFT_in_invocationExpression1341);  
				stream_ASSIGN_RSHIFT.Add(string_literal90);

				DebugLocation(172, 12);
				PushFollow(Follow._expression_in_invocationExpression1343);
				expression91=expression();
				PopFollow();

				stream_expression.Add(expression91.Tree);


				{
				// AST REWRITE
				// elements: expression, id, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 172:23: -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) )
				{
					DebugLocation(172, 26);
					// C:\\work\\ReoScript\\ReoScript.g:172:26: ^( ASSIGNMENT $id ^( RSHIFT $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(172, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(172, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(172, 43);
					// C:\\work\\ReoScript\\ReoScript.g:172:43: ^( RSHIFT $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(172, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RSHIFT, "RSHIFT"), root_2);

					DebugLocation(172, 53);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(172, 56);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\work\\ReoScript\\ReoScript.g:173:6: '++'
				{
				DebugLocation(173, 6);
				string_literal92=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_invocationExpression1368);  
				stream_INCREMENT.Add(string_literal92);



				{
				// AST REWRITE
				// elements: id, INCREMENT
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 173:14: -> ^( POST_UNARY_STEP $id '++' )
				{
					DebugLocation(173, 17);
					// C:\\work\\ReoScript\\ReoScript.g:173:17: ^( POST_UNARY_STEP $id '++' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(173, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

					DebugLocation(173, 36);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(173, 39);
					adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\work\\ReoScript\\ReoScript.g:174:6: '--'
				{
				DebugLocation(174, 6);
				string_literal93=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_invocationExpression1389);  
				stream_DECREMENT.Add(string_literal93);



				{
				// AST REWRITE
				// elements: id, DECREMENT
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 174:14: -> ^( POST_UNARY_STEP $id '--' )
				{
					DebugLocation(174, 17);
					// C:\\work\\ReoScript\\ReoScript.g:174:17: ^( POST_UNARY_STEP $id '--' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(174, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

					DebugLocation(174, 36);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(174, 39);
					adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\work\\ReoScript\\ReoScript.g:175:11: 
				{

				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 175:11: -> primaryExpression
				{
					DebugLocation(175, 14);
					adaptor.AddChild(root_0, stream_primaryExpression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invocationExpression", 15);
			LeaveRule("invocationExpression", 15);
			LeaveRule_invocationExpression();
		}
		DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "invocationExpression"); }
		return retval;

	}
	// $ANTLR end "invocationExpression"

	partial void EnterRule_statementExpressionList();
	partial void LeaveRule_statementExpressionList();

	// $ANTLR start "statementExpressionList"
	// C:\\work\\ReoScript\\ReoScript.g:179:1: statementExpressionList : statementExpression ( COMMA ! statementExpression )* ;
	[GrammarRule("statementExpressionList")]
	private AstParserRuleReturnScope<CommonTree, IToken> statementExpressionList()
	{
		EnterRule_statementExpressionList();
		EnterRule("statementExpressionList", 16);
		TraceIn("statementExpressionList", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA95 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpression94 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpression96 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA95_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "statementExpressionList");
		DebugLocation(179, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:180:2: ( statementExpression ( COMMA ! statementExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:180:4: statementExpression ( COMMA ! statementExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(180, 4);
			PushFollow(Follow._statementExpression_in_statementExpressionList1433);
			statementExpression94=statementExpression();
			PopFollow();

			adaptor.AddChild(root_0, statementExpression94.Tree);
			DebugLocation(180, 24);
			// C:\\work\\ReoScript\\ReoScript.g:180:24: ( COMMA ! statementExpression )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==COMMA))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:180:25: COMMA ! statementExpression
					{
					DebugLocation(180, 30);
					COMMA95=(IToken)Match(input,COMMA,Follow._COMMA_in_statementExpressionList1436); 
					DebugLocation(180, 32);
					PushFollow(Follow._statementExpression_in_statementExpressionList1439);
					statementExpression96=statementExpression();
					PopFollow();

					adaptor.AddChild(root_0, statementExpression96.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statementExpressionList", 16);
			LeaveRule("statementExpressionList", 16);
			LeaveRule_statementExpressionList();
		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "statementExpressionList"); }
		return retval;

	}
	// $ANTLR end "statementExpressionList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// C:\\work\\ReoScript\\ReoScript.g:184:1: public expression : ( tag | assignmentExpression ( EOF !)? );
	[GrammarRule("expression")]
	public AstParserRuleReturnScope<CommonTree, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 17);
		TraceIn("expression", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken EOF99 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> tag97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression98 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EOF99_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(184, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:185:2: ( tag | assignmentExpression ( EOF !)? )
			int alt22=2;
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==LESS_THAN))
			{
				alt22 = 1;
			}
			else if ((LA22_0==BINARY_LITERATE||LA22_0==DECREMENT||LA22_0==FALSE||(LA22_0>=HEX_LITERATE && LA22_0<=IDENTIFIER)||LA22_0==INCREMENT||(LA22_0>=LBRACE && LA22_0<=LCURLY)||LA22_0==LPAREN||LA22_0==MINUS||LA22_0==NOT||(LA22_0>=NULL && LA22_0<=NUMBER_LITERATE)||LA22_0==PLUS||LA22_0==STRING_LITERATE||(LA22_0>=THIS && LA22_0<=TRUE)||LA22_0==UNDEFINED||LA22_0==111||LA22_0==115||LA22_0==119))
			{
				alt22 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:189:4: tag
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(189, 4);
				PushFollow(Follow._tag_in_expression1464);
				tag97=tag();
				PopFollow();

				adaptor.AddChild(root_0, tag97.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:190:4: assignmentExpression ( EOF !)?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(190, 4);
				PushFollow(Follow._assignmentExpression_in_expression1470);
				assignmentExpression98=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, assignmentExpression98.Tree);
				DebugLocation(190, 28);
				// C:\\work\\ReoScript\\ReoScript.g:190:28: ( EOF !)?
				int alt21=2;
				try { DebugEnterSubRule(21);
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==EOF))
				{
					alt21 = 1;
				}
				} finally { DebugExitDecision(21); }
				switch (alt21)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:190:28: EOF !
					{
					DebugLocation(190, 28);
					EOF99=(IToken)Match(input,EOF,Follow._EOF_in_expression1472); 

					}
					break;

				}
				} finally { DebugExitSubRule(21); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 17);
			LeaveRule("expression", 17);
			LeaveRule_expression();
		}
		DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_expressionList();
	partial void LeaveRule_expressionList();

	// $ANTLR start "expressionList"
	// C:\\work\\ReoScript\\ReoScript.g:193:1: expressionList : expression ( COMMA ! expression )* ;
	[GrammarRule("expressionList")]
	private AstParserRuleReturnScope<CommonTree, IToken> expressionList()
	{
		EnterRule_expressionList();
		EnterRule("expressionList", 18);
		TraceIn("expressionList", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA101 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression102 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA101_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expressionList");
		DebugLocation(193, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:194:2: ( expression ( COMMA ! expression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:194:4: expression ( COMMA ! expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(194, 4);
			PushFollow(Follow._expression_in_expressionList1486);
			expression100=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression100.Tree);
			DebugLocation(194, 15);
			// C:\\work\\ReoScript\\ReoScript.g:194:15: ( COMMA ! expression )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==COMMA))
				{
					int LA23_2 = input.LA(2);

					if ((LA23_2==BINARY_LITERATE||LA23_2==DECREMENT||LA23_2==FALSE||(LA23_2>=HEX_LITERATE && LA23_2<=IDENTIFIER)||LA23_2==INCREMENT||(LA23_2>=LBRACE && LA23_2<=LCURLY)||LA23_2==LESS_THAN||LA23_2==LPAREN||LA23_2==MINUS||LA23_2==NOT||(LA23_2>=NULL && LA23_2<=NUMBER_LITERATE)||LA23_2==PLUS||LA23_2==STRING_LITERATE||(LA23_2>=THIS && LA23_2<=TRUE)||LA23_2==UNDEFINED||LA23_2==111||LA23_2==115||LA23_2==119))
					{
						alt23 = 1;
					}


				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:194:16: COMMA ! expression
					{
					DebugLocation(194, 21);
					COMMA101=(IToken)Match(input,COMMA,Follow._COMMA_in_expressionList1489); 
					DebugLocation(194, 23);
					PushFollow(Follow._expression_in_expressionList1492);
					expression102=expression();
					PopFollow();

					adaptor.AddChild(root_0, expression102.Tree);

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionList", 18);
			LeaveRule("expressionList", 18);
			LeaveRule_expressionList();
		}
		DebugLocation(195, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionList"); }
		return retval;

	}
	// $ANTLR end "expressionList"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();

	// $ANTLR start "assignmentExpression"
	// C:\\work\\ReoScript\\ReoScript.g:197:1: assignmentExpression : conditionalExpression ( ASSIGNMENT ^ expression )? ;
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 19);
		TraceIn("assignmentExpression", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken ASSIGNMENT104 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression103 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression105 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSIGNMENT104_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(197, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:198:2: ( conditionalExpression ( ASSIGNMENT ^ expression )? )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:198:4: conditionalExpression ( ASSIGNMENT ^ expression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(198, 4);
			PushFollow(Follow._conditionalExpression_in_assignmentExpression1506);
			conditionalExpression103=conditionalExpression();
			PopFollow();

			adaptor.AddChild(root_0, conditionalExpression103.Tree);
			DebugLocation(198, 26);
			// C:\\work\\ReoScript\\ReoScript.g:198:26: ( ASSIGNMENT ^ expression )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==ASSIGNMENT))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:198:27: ASSIGNMENT ^ expression
				{
				DebugLocation(198, 37);
				ASSIGNMENT104=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_assignmentExpression1509); 
				ASSIGNMENT104_tree = (CommonTree)adaptor.Create(ASSIGNMENT104);
				root_0 = (CommonTree)adaptor.BecomeRoot(ASSIGNMENT104_tree, root_0);
				DebugLocation(198, 39);
				PushFollow(Follow._expression_in_assignmentExpression1512);
				expression105=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression105.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 19);
			LeaveRule("assignmentExpression", 19);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(199, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();

	// $ANTLR start "conditionalExpression"
	// C:\\work\\ReoScript\\ReoScript.g:201:1: conditionalExpression : conditionalOrExpression ( CONDITION ^ expression COLON ! expression )? ;
	[GrammarRule("conditionalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 20);
		TraceIn("conditionalExpression", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken CONDITION107 = default(IToken);
		IToken COLON109 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree CONDITION107_tree = default(CommonTree);
		CommonTree COLON109_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(201, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:202:2: ( conditionalOrExpression ( CONDITION ^ expression COLON ! expression )? )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:202:4: conditionalOrExpression ( CONDITION ^ expression COLON ! expression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(202, 4);
			PushFollow(Follow._conditionalOrExpression_in_conditionalExpression1526);
			conditionalOrExpression106=conditionalOrExpression();
			PopFollow();

			adaptor.AddChild(root_0, conditionalOrExpression106.Tree);
			DebugLocation(202, 28);
			// C:\\work\\ReoScript\\ReoScript.g:202:28: ( CONDITION ^ expression COLON ! expression )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==CONDITION))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:202:29: CONDITION ^ expression COLON ! expression
				{
				DebugLocation(202, 38);
				CONDITION107=(IToken)Match(input,CONDITION,Follow._CONDITION_in_conditionalExpression1529); 
				CONDITION107_tree = (CommonTree)adaptor.Create(CONDITION107);
				root_0 = (CommonTree)adaptor.BecomeRoot(CONDITION107_tree, root_0);
				DebugLocation(202, 40);
				PushFollow(Follow._expression_in_conditionalExpression1532);
				expression108=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression108.Tree);
				DebugLocation(202, 56);
				COLON109=(IToken)Match(input,COLON,Follow._COLON_in_conditionalExpression1534); 
				DebugLocation(202, 58);
				PushFollow(Follow._expression_in_conditionalExpression1537);
				expression110=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression110.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpression", 20);
			LeaveRule("conditionalExpression", 20);
			LeaveRule_conditionalExpression();
		}
		DebugLocation(203, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_conditionalOrExpression();
	partial void LeaveRule_conditionalOrExpression();

	// $ANTLR start "conditionalOrExpression"
	// C:\\work\\ReoScript\\ReoScript.g:205:1: conditionalOrExpression : conditionalAndExpression ( LOGICAL_OR ^ conditionalAndExpression )* ;
	[GrammarRule("conditionalOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression()
	{
		EnterRule_conditionalOrExpression();
		EnterRule("conditionalOrExpression", 21);
		TraceIn("conditionalOrExpression", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_OR112 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalAndExpression111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalAndExpression113 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_OR112_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalOrExpression");
		DebugLocation(205, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:206:2: ( conditionalAndExpression ( LOGICAL_OR ^ conditionalAndExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:206:4: conditionalAndExpression ( LOGICAL_OR ^ conditionalAndExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(206, 4);
			PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression1550);
			conditionalAndExpression111=conditionalAndExpression();
			PopFollow();

			adaptor.AddChild(root_0, conditionalAndExpression111.Tree);
			DebugLocation(206, 29);
			// C:\\work\\ReoScript\\ReoScript.g:206:29: ( LOGICAL_OR ^ conditionalAndExpression )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==LOGICAL_OR))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:206:30: LOGICAL_OR ^ conditionalAndExpression
					{
					DebugLocation(206, 40);
					LOGICAL_OR112=(IToken)Match(input,LOGICAL_OR,Follow._LOGICAL_OR_in_conditionalOrExpression1553); 
					LOGICAL_OR112_tree = (CommonTree)adaptor.Create(LOGICAL_OR112);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_OR112_tree, root_0);
					DebugLocation(206, 42);
					PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression1556);
					conditionalAndExpression113=conditionalAndExpression();
					PopFollow();

					adaptor.AddChild(root_0, conditionalAndExpression113.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalOrExpression", 21);
			LeaveRule("conditionalOrExpression", 21);
			LeaveRule_conditionalOrExpression();
		}
		DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalOrExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalOrExpression"

	partial void EnterRule_conditionalAndExpression();
	partial void LeaveRule_conditionalAndExpression();

	// $ANTLR start "conditionalAndExpression"
	// C:\\work\\ReoScript\\ReoScript.g:209:1: conditionalAndExpression : inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* ;
	[GrammarRule("conditionalAndExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalAndExpression()
	{
		EnterRule_conditionalAndExpression();
		EnterRule("conditionalAndExpression", 22);
		TraceIn("conditionalAndExpression", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_AND115 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression114 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression116 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_AND115_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalAndExpression");
		DebugLocation(209, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:210:2: ( inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:210:4: inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(210, 4);
			PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression1569);
			inclusiveOrExpression114=inclusiveOrExpression();
			PopFollow();

			adaptor.AddChild(root_0, inclusiveOrExpression114.Tree);
			DebugLocation(210, 26);
			// C:\\work\\ReoScript\\ReoScript.g:210:26: ( LOGICAL_AND ^ inclusiveOrExpression )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==LOGICAL_AND))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:210:27: LOGICAL_AND ^ inclusiveOrExpression
					{
					DebugLocation(210, 38);
					LOGICAL_AND115=(IToken)Match(input,LOGICAL_AND,Follow._LOGICAL_AND_in_conditionalAndExpression1572); 
					LOGICAL_AND115_tree = (CommonTree)adaptor.Create(LOGICAL_AND115);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_AND115_tree, root_0);
					DebugLocation(210, 40);
					PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression1575);
					inclusiveOrExpression116=inclusiveOrExpression();
					PopFollow();

					adaptor.AddChild(root_0, inclusiveOrExpression116.Tree);

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalAndExpression", 22);
			LeaveRule("conditionalAndExpression", 22);
			LeaveRule_conditionalAndExpression();
		}
		DebugLocation(211, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalAndExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalAndExpression"

	partial void EnterRule_inclusiveOrExpression();
	partial void LeaveRule_inclusiveOrExpression();

	// $ANTLR start "inclusiveOrExpression"
	// C:\\work\\ReoScript\\ReoScript.g:213:1: inclusiveOrExpression : exclusiveOrExpression ( OR ^ exclusiveOrExpression )* ;
	[GrammarRule("inclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression()
	{
		EnterRule_inclusiveOrExpression();
		EnterRule("inclusiveOrExpression", 23);
		TraceIn("inclusiveOrExpression", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken OR118 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression119 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree OR118_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "inclusiveOrExpression");
		DebugLocation(213, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:214:2: ( exclusiveOrExpression ( OR ^ exclusiveOrExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:214:4: exclusiveOrExpression ( OR ^ exclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(214, 4);
			PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression1590);
			exclusiveOrExpression117=exclusiveOrExpression();
			PopFollow();

			adaptor.AddChild(root_0, exclusiveOrExpression117.Tree);
			DebugLocation(214, 26);
			// C:\\work\\ReoScript\\ReoScript.g:214:26: ( OR ^ exclusiveOrExpression )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==OR))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:214:27: OR ^ exclusiveOrExpression
					{
					DebugLocation(214, 29);
					OR118=(IToken)Match(input,OR,Follow._OR_in_inclusiveOrExpression1593); 
					OR118_tree = (CommonTree)adaptor.Create(OR118);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR118_tree, root_0);
					DebugLocation(214, 31);
					PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression1596);
					exclusiveOrExpression119=exclusiveOrExpression();
					PopFollow();

					adaptor.AddChild(root_0, exclusiveOrExpression119.Tree);

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusiveOrExpression", 23);
			LeaveRule("inclusiveOrExpression", 23);
			LeaveRule_inclusiveOrExpression();
		}
		DebugLocation(215, 1);
		} finally { DebugExitRule(GrammarFileName, "inclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "inclusiveOrExpression"

	partial void EnterRule_exclusiveOrExpression();
	partial void LeaveRule_exclusiveOrExpression();

	// $ANTLR start "exclusiveOrExpression"
	// C:\\work\\ReoScript\\ReoScript.g:217:1: exclusiveOrExpression : andExpression ( XOR ^ andExpression )* ;
	[GrammarRule("exclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression()
	{
		EnterRule_exclusiveOrExpression();
		EnterRule("exclusiveOrExpression", 24);
		TraceIn("exclusiveOrExpression", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken XOR121 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression120 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression122 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree XOR121_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "exclusiveOrExpression");
		DebugLocation(217, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:218:2: ( andExpression ( XOR ^ andExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:218:4: andExpression ( XOR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(218, 4);
			PushFollow(Follow._andExpression_in_exclusiveOrExpression1610);
			andExpression120=andExpression();
			PopFollow();

			adaptor.AddChild(root_0, andExpression120.Tree);
			DebugLocation(218, 18);
			// C:\\work\\ReoScript\\ReoScript.g:218:18: ( XOR ^ andExpression )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==XOR))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:218:19: XOR ^ andExpression
					{
					DebugLocation(218, 22);
					XOR121=(IToken)Match(input,XOR,Follow._XOR_in_exclusiveOrExpression1613); 
					XOR121_tree = (CommonTree)adaptor.Create(XOR121);
					root_0 = (CommonTree)adaptor.BecomeRoot(XOR121_tree, root_0);
					DebugLocation(218, 24);
					PushFollow(Follow._andExpression_in_exclusiveOrExpression1616);
					andExpression122=andExpression();
					PopFollow();

					adaptor.AddChild(root_0, andExpression122.Tree);

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusiveOrExpression", 24);
			LeaveRule("exclusiveOrExpression", 24);
			LeaveRule_exclusiveOrExpression();
		}
		DebugLocation(219, 1);
		} finally { DebugExitRule(GrammarFileName, "exclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "exclusiveOrExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();

	// $ANTLR start "andExpression"
	// C:\\work\\ReoScript\\ReoScript.g:221:1: andExpression : equalityExpression ( AND ^ equalityExpression )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 25);
		TraceIn("andExpression", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken AND124 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> equalityExpression123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> equalityExpression125 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree AND124_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(221, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:222:2: ( equalityExpression ( AND ^ equalityExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:222:4: equalityExpression ( AND ^ equalityExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(222, 4);
			PushFollow(Follow._equalityExpression_in_andExpression1630);
			equalityExpression123=equalityExpression();
			PopFollow();

			adaptor.AddChild(root_0, equalityExpression123.Tree);
			DebugLocation(222, 23);
			// C:\\work\\ReoScript\\ReoScript.g:222:23: ( AND ^ equalityExpression )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==AND))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:222:24: AND ^ equalityExpression
					{
					DebugLocation(222, 27);
					AND124=(IToken)Match(input,AND,Follow._AND_in_andExpression1633); 
					AND124_tree = (CommonTree)adaptor.Create(AND124);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND124_tree, root_0);
					DebugLocation(222, 29);
					PushFollow(Follow._equalityExpression_in_andExpression1636);
					equalityExpression125=equalityExpression();
					PopFollow();

					adaptor.AddChild(root_0, equalityExpression125.Tree);

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 25);
			LeaveRule("andExpression", 25);
			LeaveRule_andExpression();
		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();

	// $ANTLR start "equalityExpression"
	// C:\\work\\ReoScript\\ReoScript.g:225:1: equalityExpression : relationalExpression ( ( EQUALS | NOT_EQUALS ) ^ relationalExpression )* ;
	[GrammarRule("equalityExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 26);
		TraceIn("equalityExpression", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set127 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> relationalExpression126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> relationalExpression128 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set127_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(225, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:226:2: ( relationalExpression ( ( EQUALS | NOT_EQUALS ) ^ relationalExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:226:4: relationalExpression ( ( EQUALS | NOT_EQUALS ) ^ relationalExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(226, 4);
			PushFollow(Follow._relationalExpression_in_equalityExpression1649);
			relationalExpression126=relationalExpression();
			PopFollow();

			adaptor.AddChild(root_0, relationalExpression126.Tree);
			DebugLocation(226, 25);
			// C:\\work\\ReoScript\\ReoScript.g:226:25: ( ( EQUALS | NOT_EQUALS ) ^ relationalExpression )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==EQUALS||LA31_0==NOT_EQUALS))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:226:26: ( EQUALS | NOT_EQUALS ) ^ relationalExpression
					{
					DebugLocation(226, 47);

					set127=(IToken)input.LT(1);
					set127=(IToken)input.LT(1);
					if (input.LA(1)==EQUALS||input.LA(1)==NOT_EQUALS)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set127), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(226, 49);
					PushFollow(Follow._relationalExpression_in_equalityExpression1661);
					relationalExpression128=relationalExpression();
					PopFollow();

					adaptor.AddChild(root_0, relationalExpression128.Tree);

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 26);
			LeaveRule("equalityExpression", 26);
			LeaveRule_equalityExpression();
		}
		DebugLocation(227, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();

	// $ANTLR start "relationalExpression"
	// C:\\work\\ReoScript\\ReoScript.g:229:1: relationalExpression : shiftExpression ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 27);
		TraceIn("relationalExpression", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set130 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression129 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression131 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set130_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(229, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:230:2: ( shiftExpression ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:230:4: shiftExpression ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(230, 4);
			PushFollow(Follow._shiftExpression_in_relationalExpression1676);
			shiftExpression129=shiftExpression();
			PopFollow();

			adaptor.AddChild(root_0, shiftExpression129.Tree);
			DebugLocation(230, 20);
			// C:\\work\\ReoScript\\ReoScript.g:230:20: ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==GREAT_THAN))
				{
					alt32 = 1;
				}
				else if ((LA32_0==GREAT_EQUALS||(LA32_0>=LESS_EQUALS && LA32_0<=LESS_THAN)))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:230:21: ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression
					{
					DebugLocation(230, 74);

					set130=(IToken)input.LT(1);
					set130=(IToken)input.LT(1);
					if ((input.LA(1)>=GREAT_EQUALS && input.LA(1)<=GREAT_THAN)||(input.LA(1)>=LESS_EQUALS && input.LA(1)<=LESS_THAN))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set130), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(230, 76);
					PushFollow(Follow._shiftExpression_in_relationalExpression1696);
					shiftExpression131=shiftExpression();
					PopFollow();

					adaptor.AddChild(root_0, shiftExpression131.Tree);

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 27);
			LeaveRule("relationalExpression", 27);
			LeaveRule_relationalExpression();
		}
		DebugLocation(231, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();

	// $ANTLR start "shiftExpression"
	// C:\\work\\ReoScript\\ReoScript.g:233:1: shiftExpression : additiveExpression ( ( LSHIFT | RSHIFT ) ^ additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 28);
		TraceIn("shiftExpression", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set133 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression132 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression134 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set133_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(233, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:234:2: ( additiveExpression ( ( LSHIFT | RSHIFT ) ^ additiveExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:234:4: additiveExpression ( ( LSHIFT | RSHIFT ) ^ additiveExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(234, 4);
			PushFollow(Follow._additiveExpression_in_shiftExpression1710);
			additiveExpression132=additiveExpression();
			PopFollow();

			adaptor.AddChild(root_0, additiveExpression132.Tree);
			DebugLocation(234, 23);
			// C:\\work\\ReoScript\\ReoScript.g:234:23: ( ( LSHIFT | RSHIFT ) ^ additiveExpression )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if ((LA33_0==LSHIFT||LA33_0==RSHIFT))
				{
					alt33 = 1;
				}


				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:234:24: ( LSHIFT | RSHIFT ) ^ additiveExpression
					{
					DebugLocation(234, 39);

					set133=(IToken)input.LT(1);
					set133=(IToken)input.LT(1);
					if (input.LA(1)==LSHIFT||input.LA(1)==RSHIFT)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set133), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(234, 41);
					PushFollow(Follow._additiveExpression_in_shiftExpression1720);
					additiveExpression134=additiveExpression();
					PopFollow();

					adaptor.AddChild(root_0, additiveExpression134.Tree);

					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftExpression", 28);
			LeaveRule("shiftExpression", 28);
			LeaveRule_shiftExpression();
		}
		DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return retval;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();

	// $ANTLR start "additiveExpression"
	// C:\\work\\ReoScript\\ReoScript.g:237:1: additiveExpression : multiplicativeExpression ( ( PLUS | MINUS ) ^ multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 29);
		TraceIn("additiveExpression", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set136 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression135 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression137 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set136_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(237, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:238:2: ( multiplicativeExpression ( ( PLUS | MINUS ) ^ multiplicativeExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:238:4: multiplicativeExpression ( ( PLUS | MINUS ) ^ multiplicativeExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(238, 4);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression1735);
			multiplicativeExpression135=multiplicativeExpression();
			PopFollow();

			adaptor.AddChild(root_0, multiplicativeExpression135.Tree);
			DebugLocation(238, 29);
			// C:\\work\\ReoScript\\ReoScript.g:238:29: ( ( PLUS | MINUS ) ^ multiplicativeExpression )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0==MINUS||LA34_0==PLUS))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:238:30: ( PLUS | MINUS ) ^ multiplicativeExpression
					{
					DebugLocation(238, 42);

					set136=(IToken)input.LT(1);
					set136=(IToken)input.LT(1);
					if (input.LA(1)==MINUS||input.LA(1)==PLUS)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set136), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(238, 44);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression1745);
					multiplicativeExpression137=multiplicativeExpression();
					PopFollow();

					adaptor.AddChild(root_0, multiplicativeExpression137.Tree);

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 29);
			LeaveRule("additiveExpression", 29);
			LeaveRule_additiveExpression();
		}
		DebugLocation(239, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();

	// $ANTLR start "multiplicativeExpression"
	// C:\\work\\ReoScript\\ReoScript.g:241:1: multiplicativeExpression : unaryExpression ( ( MUL | DIV | MOD ) ^ unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 30);
		TraceIn("multiplicativeExpression", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set139 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression138 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression140 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set139_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(241, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:242:2: ( unaryExpression ( ( MUL | DIV | MOD ) ^ unaryExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:242:4: unaryExpression ( ( MUL | DIV | MOD ) ^ unaryExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(242, 4);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression1759);
			unaryExpression138=unaryExpression();
			PopFollow();

			adaptor.AddChild(root_0, unaryExpression138.Tree);
			DebugLocation(242, 20);
			// C:\\work\\ReoScript\\ReoScript.g:242:20: ( ( MUL | DIV | MOD ) ^ unaryExpression )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if ((LA35_0==DIV||(LA35_0>=MOD && LA35_0<=MUL)))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:242:21: ( MUL | DIV | MOD ) ^ unaryExpression
					{
					DebugLocation(242, 38);

					set139=(IToken)input.LT(1);
					set139=(IToken)input.LT(1);
					if (input.LA(1)==DIV||(input.LA(1)>=MOD && input.LA(1)<=MUL))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set139), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(242, 40);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression1775);
					unaryExpression140=unaryExpression();
					PopFollow();

					adaptor.AddChild(root_0, unaryExpression140.Tree);

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 30);
			LeaveRule("multiplicativeExpression", 30);
			LeaveRule_multiplicativeExpression();
		}
		DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();

	// $ANTLR start "unaryExpression"
	// C:\\work\\ReoScript\\ReoScript.g:245:1: unaryExpression : ( primaryExpression ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) | 'new' primaryExpression -> ^( CREATE primaryExpression ) | (op= '+' |op= '-' |op= '!' |op= '~' ) unaryExpression -> ^( PRE_UNARY $op unaryExpression ) );
	[GrammarRule("unaryExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 31);
		TraceIn("unaryExpression", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken op = default(IToken);
		IToken string_literal142 = default(IToken);
		IToken string_literal143 = default(IToken);
		IToken string_literal144 = default(IToken);
		IToken string_literal146 = default(IToken);
		IToken string_literal148 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression141 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression145 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression149 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression150 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree op_tree = default(CommonTree);
		CommonTree string_literal142_tree = default(CommonTree);
		CommonTree string_literal143_tree = default(CommonTree);
		CommonTree string_literal144_tree = default(CommonTree);
		CommonTree string_literal146_tree = default(CommonTree);
		CommonTree string_literal148_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INCREMENT=new RewriteRuleITokenStream(adaptor,"token INCREMENT");
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
		RewriteRuleITokenStream stream_MINUS=new RewriteRuleITokenStream(adaptor,"token MINUS");
		RewriteRuleITokenStream stream_DECREMENT=new RewriteRuleITokenStream(adaptor,"token DECREMENT");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(245, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:246:2: ( primaryExpression ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) | 'new' primaryExpression -> ^( CREATE primaryExpression ) | (op= '+' |op= '-' |op= '!' |op= '~' ) unaryExpression -> ^( PRE_UNARY $op unaryExpression ) )
			int alt38=5;
			try { DebugEnterDecision(38, false);
			switch (input.LA(1))
			{
			case BINARY_LITERATE:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case LBRACE:
			case LCURLY:
			case LPAREN:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case UNDEFINED:
			case 111:
				{
				alt38 = 1;
				}
				break;
			case INCREMENT:
				{
				alt38 = 2;
				}
				break;
			case DECREMENT:
				{
				alt38 = 3;
				}
				break;
			case 115:
				{
				alt38 = 4;
				}
				break;
			case MINUS:
			case NOT:
			case PLUS:
			case 119:
				{
				alt38 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:247:4: primaryExpression ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression )
				{
				DebugLocation(247, 4);
				PushFollow(Follow._primaryExpression_in_unaryExpression1794);
				primaryExpression141=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression141.Tree);
				DebugLocation(247, 22);
				// C:\\work\\ReoScript\\ReoScript.g:247:22: ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression )
				int alt36=3;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, false);
				switch (input.LA(1))
				{
				case INCREMENT:
					{
					alt36 = 1;
					}
					break;
				case DECREMENT:
					{
					alt36 = 2;
					}
					break;
				case EOF:
				case AND:
				case ASSIGNMENT:
				case ASSIGN_AND:
				case ASSIGN_DIV:
				case ASSIGN_LSHIFT:
				case ASSIGN_MINUS:
				case ASSIGN_MUL:
				case ASSIGN_OR:
				case ASSIGN_PLUS:
				case ASSIGN_REM:
				case ASSIGN_REV:
				case ASSIGN_RSHIFT:
				case COLON:
				case COMMA:
				case CONDITION:
				case DIV:
				case DOT:
				case EQUALS:
				case GREAT_EQUALS:
				case GREAT_THAN:
				case IDENTIFIER:
				case LBRACE:
				case LCURLY:
				case LESS_EQUALS:
				case LESS_THAN:
				case LOGICAL_AND:
				case LOGICAL_OR:
				case LPAREN:
				case LSHIFT:
				case MINUS:
				case MOD:
				case MUL:
				case NOT_EQUALS:
				case OR:
				case PLUS:
				case RBRACE:
				case RCURLY:
				case RPAREN:
				case RSHIFT:
				case SEMI:
				case XOR:
					{
					alt36 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:248:6: '++'
					{
					DebugLocation(248, 6);
					string_literal142=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_unaryExpression1804);  
					stream_INCREMENT.Add(string_literal142);



					{
					// AST REWRITE
					// elements: primaryExpression, INCREMENT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 248:12: -> ^( POST_UNARY_STEP primaryExpression '++' )
					{
						DebugLocation(248, 15);
						// C:\\work\\ReoScript\\ReoScript.g:248:15: ^( POST_UNARY_STEP primaryExpression '++' )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(248, 17);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

						DebugLocation(248, 33);
						adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
						DebugLocation(248, 51);
						adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:249:10: '--'
					{
					DebugLocation(249, 10);
					string_literal143=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_unaryExpression1826);  
					stream_DECREMENT.Add(string_literal143);



					{
					// AST REWRITE
					// elements: DECREMENT, primaryExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 249:16: -> ^( POST_UNARY_STEP primaryExpression '--' )
					{
						DebugLocation(249, 19);
						// C:\\work\\ReoScript\\ReoScript.g:249:19: ^( POST_UNARY_STEP primaryExpression '--' )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(249, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

						DebugLocation(249, 37);
						adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
						DebugLocation(249, 55);
						adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\work\\ReoScript\\ReoScript.g:250:10: 
					{

					{
					// AST REWRITE
					// elements: primaryExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 250:10: -> primaryExpression
					{
						DebugLocation(250, 13);
						adaptor.AddChild(root_0, stream_primaryExpression.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(36); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:252:4: '++' primaryExpression
				{
				DebugLocation(252, 4);
				string_literal144=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_unaryExpression1864);  
				stream_INCREMENT.Add(string_literal144);

				DebugLocation(252, 9);
				PushFollow(Follow._primaryExpression_in_unaryExpression1866);
				primaryExpression145=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression145.Tree);


				{
				// AST REWRITE
				// elements: INCREMENT, primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 253:3: -> ^( PRE_UNARY_STEP primaryExpression '++' )
				{
					DebugLocation(253, 6);
					// C:\\work\\ReoScript\\ReoScript.g:253:6: ^( PRE_UNARY_STEP primaryExpression '++' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(253, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(253, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(253, 41);
					adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:254:4: '--' primaryExpression
				{
				DebugLocation(254, 4);
				string_literal146=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_unaryExpression1883);  
				stream_DECREMENT.Add(string_literal146);

				DebugLocation(254, 9);
				PushFollow(Follow._primaryExpression_in_unaryExpression1885);
				primaryExpression147=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression147.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression, DECREMENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 255:3: -> ^( PRE_UNARY_STEP primaryExpression '--' )
				{
					DebugLocation(255, 6);
					// C:\\work\\ReoScript\\ReoScript.g:255:6: ^( PRE_UNARY_STEP primaryExpression '--' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(255, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(255, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(255, 41);
					adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:256:4: 'new' primaryExpression
				{
				DebugLocation(256, 4);
				string_literal148=(IToken)Match(input,115,Follow._115_in_unaryExpression1902);  
				stream_115.Add(string_literal148);

				DebugLocation(256, 10);
				PushFollow(Follow._primaryExpression_in_unaryExpression1904);
				primaryExpression149=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression149.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 257:3: -> ^( CREATE primaryExpression )
				{
					DebugLocation(257, 6);
					// C:\\work\\ReoScript\\ReoScript.g:257:6: ^( CREATE primaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(257, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CREATE, "CREATE"), root_1);

					DebugLocation(257, 15);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:258:4: (op= '+' |op= '-' |op= '!' |op= '~' ) unaryExpression
				{
				DebugLocation(258, 4);
				// C:\\work\\ReoScript\\ReoScript.g:258:4: (op= '+' |op= '-' |op= '!' |op= '~' )
				int alt37=4;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				switch (input.LA(1))
				{
				case PLUS:
					{
					alt37 = 1;
					}
					break;
				case MINUS:
					{
					alt37 = 2;
					}
					break;
				case NOT:
					{
					alt37 = 3;
					}
					break;
				case 119:
					{
					alt37 = 4;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:258:5: op= '+'
					{
					DebugLocation(258, 7);
					op=(IToken)Match(input,PLUS,Follow._PLUS_in_unaryExpression1922);  
					stream_PLUS.Add(op);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:258:12: op= '-'
					{
					DebugLocation(258, 14);
					op=(IToken)Match(input,MINUS,Follow._MINUS_in_unaryExpression1926);  
					stream_MINUS.Add(op);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\work\\ReoScript\\ReoScript.g:258:19: op= '!'
					{
					DebugLocation(258, 21);
					op=(IToken)Match(input,NOT,Follow._NOT_in_unaryExpression1930);  
					stream_NOT.Add(op);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\work\\ReoScript\\ReoScript.g:258:26: op= '~'
					{
					DebugLocation(258, 28);
					op=(IToken)Match(input,119,Follow._119_in_unaryExpression1934);  
					stream_119.Add(op);


					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(258, 34);
				PushFollow(Follow._unaryExpression_in_unaryExpression1937);
				unaryExpression150=unaryExpression();
				PopFollow();

				stream_unaryExpression.Add(unaryExpression150.Tree);


				{
				// AST REWRITE
				// elements: op, unaryExpression
				// token labels: op
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_op=new RewriteRuleITokenStream(adaptor,"token op",op);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 259:3: -> ^( PRE_UNARY $op unaryExpression )
				{
					DebugLocation(259, 6);
					// C:\\work\\ReoScript\\ReoScript.g:259:6: ^( PRE_UNARY $op unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(259, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY, "PRE_UNARY"), root_1);

					DebugLocation(259, 19);
					adaptor.AddChild(root_1, stream_op.NextNode());
					DebugLocation(259, 22);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 31);
			LeaveRule("unaryExpression", 31);
			LeaveRule_unaryExpression();
		}
		DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();

	// $ANTLR start "primaryExpression"
	// C:\\work\\ReoScript\\ReoScript.g:262:1: primaryExpression : ( ( variable -> variable | literal -> literal | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define | '(' expression ')' -> expression ) ( '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' idx= expression ']' -> ^( ARRAY_ACCESS $primaryExpression $idx) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )* | object_literal -> object_literal );
	[GrammarRule("primaryExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 32);
		TraceIn("primaryExpression", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal155 = default(IToken);
		IToken char_literal157 = default(IToken);
		IToken char_literal158 = default(IToken);
		IToken char_literal159 = default(IToken);
		IToken char_literal160 = default(IToken);
		IToken char_literal161 = default(IToken);
		IToken IDENTIFIER162 = default(IToken);
		IToken char_literal163 = default(IToken);
		IToken char_literal164 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> exp = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> idx = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variable151 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> literal152 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> array_literal153 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> anonymous_function_define154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> object_literal165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> object_literal166 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal155_tree = default(CommonTree);
		CommonTree char_literal157_tree = default(CommonTree);
		CommonTree char_literal158_tree = default(CommonTree);
		CommonTree char_literal159_tree = default(CommonTree);
		CommonTree char_literal160_tree = default(CommonTree);
		CommonTree char_literal161_tree = default(CommonTree);
		CommonTree IDENTIFIER162_tree = default(CommonTree);
		CommonTree char_literal163_tree = default(CommonTree);
		CommonTree char_literal164_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_RBRACE=new RewriteRuleITokenStream(adaptor,"token RBRACE");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_LBRACE=new RewriteRuleITokenStream(adaptor,"token LBRACE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_anonymous_function_define=new RewriteRuleSubtreeStream(adaptor,"rule anonymous_function_define");
		RewriteRuleSubtreeStream stream_array_literal=new RewriteRuleSubtreeStream(adaptor,"rule array_literal");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		RewriteRuleSubtreeStream stream_object_literal=new RewriteRuleSubtreeStream(adaptor,"rule object_literal");
		RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(262, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:263:2: ( ( variable -> variable | literal -> literal | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define | '(' expression ')' -> expression ) ( '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' idx= expression ']' -> ^( ARRAY_ACCESS $primaryExpression $idx) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )* | object_literal -> object_literal )
			int alt42=2;
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==BINARY_LITERATE||LA42_0==FALSE||(LA42_0>=HEX_LITERATE && LA42_0<=IDENTIFIER)||LA42_0==LBRACE||LA42_0==LPAREN||(LA42_0>=NULL && LA42_0<=NUMBER_LITERATE)||LA42_0==STRING_LITERATE||(LA42_0>=THIS && LA42_0<=TRUE)||LA42_0==UNDEFINED||LA42_0==111))
			{
				alt42 = 1;
			}
			else if ((LA42_0==LCURLY))
			{
				alt42 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:264:2: ( variable -> variable | literal -> literal | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define | '(' expression ')' -> expression ) ( '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' idx= expression ']' -> ^( ARRAY_ACCESS $primaryExpression $idx) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )*
				{
				DebugLocation(264, 2);
				// C:\\work\\ReoScript\\ReoScript.g:264:2: ( variable -> variable | literal -> literal | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define | '(' expression ')' -> expression )
				int alt39=5;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					int LA39_1 = input.LA(2);

					if ((LA39_1==104))
					{
						alt39 = 4;
					}
					else if ((LA39_1==EOF||LA39_1==AND||(LA39_1>=ASSIGNMENT && LA39_1<=ASSIGN_RSHIFT)||LA39_1==COLON||LA39_1==COMMA||LA39_1==CONDITION||LA39_1==DECREMENT||(LA39_1>=DIV && LA39_1<=DOT)||LA39_1==EQUALS||(LA39_1>=GREAT_EQUALS && LA39_1<=GREAT_THAN)||LA39_1==IDENTIFIER||LA39_1==INCREMENT||(LA39_1>=LBRACE && LA39_1<=LESS_THAN)||(LA39_1>=LOGICAL_AND && LA39_1<=MUL)||LA39_1==NOT_EQUALS||LA39_1==OR||LA39_1==PLUS||(LA39_1>=RBRACE && LA39_1<=RCURLY)||(LA39_1>=RPAREN && LA39_1<=SEMI)||LA39_1==XOR))
					{
						alt39 = 1;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 39, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case BINARY_LITERATE:
				case FALSE:
				case HEX_LITERATE:
				case NULL:
				case NUMBER_LITERATE:
				case STRING_LITERATE:
				case THIS:
				case TRUE:
				case UNDEFINED:
					{
					alt39 = 2;
					}
					break;
				case LBRACE:
					{
					alt39 = 3;
					}
					break;
				case 111:
					{
					alt39 = 4;
					}
					break;
				case LPAREN:
					{
					switch (input.LA(2))
					{
					case IDENTIFIER:
						{
						switch (input.LA(3))
						{
						case EOF:
						case AND:
						case ASSIGNMENT:
						case CONDITION:
						case DECREMENT:
						case DIV:
						case DOT:
						case EQUALS:
						case GREAT_EQUALS:
						case GREAT_THAN:
						case INCREMENT:
						case LBRACE:
						case LCURLY:
						case LESS_EQUALS:
						case LESS_THAN:
						case LOGICAL_AND:
						case LOGICAL_OR:
						case LPAREN:
						case LSHIFT:
						case MINUS:
						case MOD:
						case MUL:
						case NOT_EQUALS:
						case OR:
						case PLUS:
						case RSHIFT:
						case XOR:
						case 104:
							{
							alt39 = 5;
							}
							break;
						case COMMA:
							{
							alt39 = 4;
							}
							break;
						case RPAREN:
							{
							int LA39_9 = input.LA(4);

							if ((LA39_9==104))
							{
								alt39 = 4;
							}
							else if ((LA39_9==EOF||LA39_9==AND||(LA39_9>=ASSIGNMENT && LA39_9<=ASSIGN_RSHIFT)||LA39_9==COLON||LA39_9==COMMA||LA39_9==CONDITION||LA39_9==DECREMENT||(LA39_9>=DIV && LA39_9<=DOT)||LA39_9==EQUALS||(LA39_9>=GREAT_EQUALS && LA39_9<=GREAT_THAN)||LA39_9==IDENTIFIER||LA39_9==INCREMENT||(LA39_9>=LBRACE && LA39_9<=LESS_THAN)||(LA39_9>=LOGICAL_AND && LA39_9<=MUL)||LA39_9==NOT_EQUALS||LA39_9==OR||LA39_9==PLUS||(LA39_9>=RBRACE && LA39_9<=RCURLY)||(LA39_9>=RPAREN && LA39_9<=SEMI)||LA39_9==XOR))
							{
								alt39 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 39, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 39, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case RPAREN:
						{
						alt39 = 4;
						}
						break;
					case BINARY_LITERATE:
					case DECREMENT:
					case FALSE:
					case HEX_LITERATE:
					case INCREMENT:
					case LBRACE:
					case LCURLY:
					case LESS_THAN:
					case LPAREN:
					case MINUS:
					case NOT:
					case NULL:
					case NUMBER_LITERATE:
					case PLUS:
					case STRING_LITERATE:
					case THIS:
					case TRUE:
					case UNDEFINED:
					case 111:
					case 115:
					case 119:
						{
						alt39 = 5;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 39, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:265:5: variable
					{
					DebugLocation(265, 5);
					PushFollow(Follow._variable_in_primaryExpression1969);
					variable151=variable();
					PopFollow();

					stream_variable.Add(variable151.Tree);


					{
					// AST REWRITE
					// elements: variable
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 265:19: -> variable
					{
						DebugLocation(265, 22);
						adaptor.AddChild(root_0, stream_variable.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:266:5: literal
					{
					DebugLocation(266, 5);
					PushFollow(Follow._literal_in_primaryExpression1984);
					literal152=literal();
					PopFollow();

					stream_literal.Add(literal152.Tree);


					{
					// AST REWRITE
					// elements: literal
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 266:19: -> literal
					{
						DebugLocation(266, 22);
						adaptor.AddChild(root_0, stream_literal.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\work\\ReoScript\\ReoScript.g:267:5: array_literal
					{
					DebugLocation(267, 5);
					PushFollow(Follow._array_literal_in_primaryExpression2000);
					array_literal153=array_literal();
					PopFollow();

					stream_array_literal.Add(array_literal153.Tree);


					{
					// AST REWRITE
					// elements: array_literal
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 267:22: -> array_literal
					{
						DebugLocation(267, 25);
						adaptor.AddChild(root_0, stream_array_literal.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\work\\ReoScript\\ReoScript.g:268:5: anonymous_function_define
					{
					DebugLocation(268, 5);
					PushFollow(Follow._anonymous_function_define_in_primaryExpression2013);
					anonymous_function_define154=anonymous_function_define();
					PopFollow();

					stream_anonymous_function_define.Add(anonymous_function_define154.Tree);


					{
					// AST REWRITE
					// elements: anonymous_function_define
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 268:32: -> anonymous_function_define
					{
						DebugLocation(268, 35);
						adaptor.AddChild(root_0, stream_anonymous_function_define.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C:\\work\\ReoScript\\ReoScript.g:269:5: '(' expression ')'
					{
					DebugLocation(269, 5);
					char_literal155=(IToken)Match(input,LPAREN,Follow._LPAREN_in_primaryExpression2024);  
					stream_LPAREN.Add(char_literal155);

					DebugLocation(269, 9);
					PushFollow(Follow._expression_in_primaryExpression2026);
					expression156=expression();
					PopFollow();

					stream_expression.Add(expression156.Tree);
					DebugLocation(269, 20);
					char_literal157=(IToken)Match(input,RPAREN,Follow._RPAREN_in_primaryExpression2028);  
					stream_RPAREN.Add(char_literal157);



					{
					// AST REWRITE
					// elements: expression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 269:26: -> expression
					{
						DebugLocation(269, 29);
						adaptor.AddChild(root_0, stream_expression.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(39); }

				DebugLocation(271, 2);
				// C:\\work\\ReoScript\\ReoScript.g:271:2: ( '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' idx= expression ']' -> ^( ARRAY_ACCESS $primaryExpression $idx) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )*
				try { DebugEnterSubRule(41);
				while (true)
				{
					int alt41=5;
					try { DebugEnterDecision(41, false);
					switch (input.LA(1))
					{
					case LPAREN:
						{
						alt41 = 1;
						}
						break;
					case DOT:
						{
						alt41 = 2;
						}
						break;
					case LBRACE:
						{
						alt41 = 3;
						}
						break;
					case LCURLY:
						{
						alt41 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(41); }
					switch ( alt41 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\work\\ReoScript\\ReoScript.g:272:3: '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) )
						{
						DebugLocation(272, 3);
						char_literal158=(IToken)Match(input,LPAREN,Follow._LPAREN_in_primaryExpression2044);  
						stream_LPAREN.Add(char_literal158);

						DebugLocation(272, 7);
						// C:\\work\\ReoScript\\ReoScript.g:272:7: ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) )
						int alt40=2;
						try { DebugEnterSubRule(40);
						try { DebugEnterDecision(40, false);
						int LA40_0 = input.LA(1);

						if ((LA40_0==RPAREN))
						{
							alt40 = 1;
						}
						else if ((LA40_0==BINARY_LITERATE||LA40_0==DECREMENT||LA40_0==FALSE||(LA40_0>=HEX_LITERATE && LA40_0<=IDENTIFIER)||LA40_0==INCREMENT||(LA40_0>=LBRACE && LA40_0<=LCURLY)||LA40_0==LESS_THAN||LA40_0==LPAREN||LA40_0==MINUS||LA40_0==NOT||(LA40_0>=NULL && LA40_0<=NUMBER_LITERATE)||LA40_0==PLUS||LA40_0==STRING_LITERATE||(LA40_0>=THIS && LA40_0<=TRUE)||LA40_0==UNDEFINED||LA40_0==111||LA40_0==115||LA40_0==119))
						{
							alt40 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(40); }
						switch (alt40)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\work\\ReoScript\\ReoScript.g:273:4: ')'
							{
							DebugLocation(273, 4);
							char_literal159=(IToken)Match(input,RPAREN,Follow._RPAREN_in_primaryExpression2052);  
							stream_RPAREN.Add(char_literal159);



							{
							// AST REWRITE
							// elements: primaryExpression
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 273:9: -> ^( FUNCTION_CALL $primaryExpression)
							{
								DebugLocation(273, 12);
								// C:\\work\\ReoScript\\ReoScript.g:273:12: ^( FUNCTION_CALL $primaryExpression)
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(273, 14);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

								DebugLocation(273, 29);
								adaptor.AddChild(root_1, stream_retval.NextTree());

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\work\\ReoScript\\ReoScript.g:274:6: exp= expressionList ')'
							{
							DebugLocation(274, 9);
							PushFollow(Follow._expressionList_in_primaryExpression2071);
							exp=expressionList();
							PopFollow();

							stream_expressionList.Add(exp.Tree);
							DebugLocation(274, 25);
							char_literal160=(IToken)Match(input,RPAREN,Follow._RPAREN_in_primaryExpression2073);  
							stream_RPAREN.Add(char_literal160);



							{
							// AST REWRITE
							// elements: primaryExpression, exp
							// token labels: 
							// rule labels: exp, retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_exp=new RewriteRuleSubtreeStream(adaptor,"rule exp",exp!=null?exp.Tree:null);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 275:6: -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) )
							{
								DebugLocation(275, 9);
								// C:\\work\\ReoScript\\ReoScript.g:275:9: ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) )
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(275, 11);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

								DebugLocation(275, 26);
								adaptor.AddChild(root_1, stream_retval.NextTree());
								DebugLocation(275, 44);
								// C:\\work\\ReoScript\\ReoScript.g:275:44: ^( ARGUMENT_LIST $exp)
								{
								CommonTree root_2 = (CommonTree)adaptor.Nil();
								DebugLocation(275, 46);
								root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGUMENT_LIST, "ARGUMENT_LIST"), root_2);

								DebugLocation(275, 61);
								adaptor.AddChild(root_2, stream_exp.NextTree());

								adaptor.AddChild(root_1, root_2);
								}

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}

							}
							break;

						}
						} finally { DebugExitSubRule(40); }


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\work\\ReoScript\\ReoScript.g:277:5: '.' IDENTIFIER
						{
						DebugLocation(277, 5);
						char_literal161=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression2105);  
						stream_DOT.Add(char_literal161);

						DebugLocation(277, 9);
						IDENTIFIER162=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primaryExpression2107);  
						stream_IDENTIFIER.Add(IDENTIFIER162);



						{
						// AST REWRITE
						// elements: primaryExpression, IDENTIFIER
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 278:4: -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER )
						{
							DebugLocation(278, 7);
							// C:\\work\\ReoScript\\ReoScript.g:278:7: ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(278, 9);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROPERTY_ACCESS, "PROPERTY_ACCESS"), root_1);

							DebugLocation(278, 26);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(278, 44);
							adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\work\\ReoScript\\ReoScript.g:279:5: '[' idx= expression ']'
						{
						DebugLocation(279, 5);
						char_literal163=(IToken)Match(input,LBRACE,Follow._LBRACE_in_primaryExpression2127);  
						stream_LBRACE.Add(char_literal163);

						DebugLocation(279, 12);
						PushFollow(Follow._expression_in_primaryExpression2131);
						idx=expression();
						PopFollow();

						stream_expression.Add(idx.Tree);
						DebugLocation(279, 24);
						char_literal164=(IToken)Match(input,RBRACE,Follow._RBRACE_in_primaryExpression2133);  
						stream_RBRACE.Add(char_literal164);



						{
						// AST REWRITE
						// elements: idx, primaryExpression
						// token labels: 
						// rule labels: retval, idx
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_idx=new RewriteRuleSubtreeStream(adaptor,"rule idx",idx!=null?idx.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 280:4: -> ^( ARRAY_ACCESS $primaryExpression $idx)
						{
							DebugLocation(280, 7);
							// C:\\work\\ReoScript\\ReoScript.g:280:7: ^( ARRAY_ACCESS $primaryExpression $idx)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(280, 9);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_ACCESS, "ARRAY_ACCESS"), root_1);

							DebugLocation(280, 23);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(280, 42);
							adaptor.AddChild(root_1, stream_idx.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\work\\ReoScript\\ReoScript.g:281:5: object_literal
						{
						DebugLocation(281, 5);
						PushFollow(Follow._object_literal_in_primaryExpression2154);
						object_literal165=object_literal();
						PopFollow();

						stream_object_literal.Add(object_literal165.Tree);


						{
						// AST REWRITE
						// elements: primaryExpression, object_literal
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 282:4: -> ^( COMBINE_OBJECT $primaryExpression object_literal )
						{
							DebugLocation(282, 7);
							// C:\\work\\ReoScript\\ReoScript.g:282:7: ^( COMBINE_OBJECT $primaryExpression object_literal )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(282, 9);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(COMBINE_OBJECT, "COMBINE_OBJECT"), root_1);

							DebugLocation(282, 25);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(282, 43);
							adaptor.AddChild(root_1, stream_object_literal.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					default:
						goto loop41;
					}
				}

				loop41:
					;

				} finally { DebugExitSubRule(41); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:284:4: object_literal
				{
				DebugLocation(284, 4);
				PushFollow(Follow._object_literal_in_primaryExpression2177);
				object_literal166=object_literal();
				PopFollow();

				stream_object_literal.Add(object_literal166.Tree);


				{
				// AST REWRITE
				// elements: object_literal
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 284:22: -> object_literal
				{
					DebugLocation(284, 25);
					adaptor.AddChild(root_0, stream_object_literal.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primaryExpression", 32);
			LeaveRule("primaryExpression", 32);
			LeaveRule_primaryExpression();
		}
		DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return retval;

	}
	// $ANTLR end "primaryExpression"

	partial void EnterRule_tag();
	partial void LeaveRule_tag();

	// $ANTLR start "tag"
	// C:\\work\\ReoScript\\ReoScript.g:288:1: tag : '<' (ns= IDENTIFIER ':' )? name= IDENTIFIER ( tagAttr )* '>' ( tag )* exp= script ( '</' ( IDENTIFIER ':' )? IDENTIFIER '>' | '/>' ) -> ^( TAG ^( TAG_NAME $name ( $ns)? ) ^( TAG_ATTR_LIST ( tagAttr )* ) ( tag )* ( $exp)? ) ;
	[GrammarRule("tag")]
	private AstParserRuleReturnScope<CommonTree, IToken> tag()
	{
		EnterRule_tag();
		EnterRule("tag", 33);
		TraceIn("tag", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken ns = default(IToken);
		IToken name = default(IToken);
		IToken char_literal167 = default(IToken);
		IToken char_literal168 = default(IToken);
		IToken char_literal170 = default(IToken);
		IToken string_literal172 = default(IToken);
		IToken IDENTIFIER173 = default(IToken);
		IToken char_literal174 = default(IToken);
		IToken IDENTIFIER175 = default(IToken);
		IToken char_literal176 = default(IToken);
		IToken string_literal177 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> exp = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> tagAttr169 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> tag171 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ns_tree = default(CommonTree);
		CommonTree name_tree = default(CommonTree);
		CommonTree char_literal167_tree = default(CommonTree);
		CommonTree char_literal168_tree = default(CommonTree);
		CommonTree char_literal170_tree = default(CommonTree);
		CommonTree string_literal172_tree = default(CommonTree);
		CommonTree IDENTIFIER173_tree = default(CommonTree);
		CommonTree char_literal174_tree = default(CommonTree);
		CommonTree IDENTIFIER175_tree = default(CommonTree);
		CommonTree char_literal176_tree = default(CommonTree);
		CommonTree string_literal177_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_GREAT_THAN=new RewriteRuleITokenStream(adaptor,"token GREAT_THAN");
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleSubtreeStream stream_tagAttr=new RewriteRuleSubtreeStream(adaptor,"rule tagAttr");
		RewriteRuleSubtreeStream stream_tag=new RewriteRuleSubtreeStream(adaptor,"rule tag");
		RewriteRuleSubtreeStream stream_script=new RewriteRuleSubtreeStream(adaptor,"rule script");
		try { DebugEnterRule(GrammarFileName, "tag");
		DebugLocation(288, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:289:2: ( '<' (ns= IDENTIFIER ':' )? name= IDENTIFIER ( tagAttr )* '>' ( tag )* exp= script ( '</' ( IDENTIFIER ':' )? IDENTIFIER '>' | '/>' ) -> ^( TAG ^( TAG_NAME $name ( $ns)? ) ^( TAG_ATTR_LIST ( tagAttr )* ) ( tag )* ( $exp)? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:289:4: '<' (ns= IDENTIFIER ':' )? name= IDENTIFIER ( tagAttr )* '>' ( tag )* exp= script ( '</' ( IDENTIFIER ':' )? IDENTIFIER '>' | '/>' )
			{
			DebugLocation(289, 4);
			char_literal167=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_tag2196);  
			stream_LESS_THAN.Add(char_literal167);

			DebugLocation(289, 8);
			// C:\\work\\ReoScript\\ReoScript.g:289:8: (ns= IDENTIFIER ':' )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==IDENTIFIER))
			{
				int LA43_1 = input.LA(2);

				if ((LA43_1==COLON))
				{
					alt43 = 1;
				}
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:289:9: ns= IDENTIFIER ':'
				{
				DebugLocation(289, 11);
				ns=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tag2201);  
				stream_IDENTIFIER.Add(ns);

				DebugLocation(289, 23);
				char_literal168=(IToken)Match(input,COLON,Follow._COLON_in_tag2203);  
				stream_COLON.Add(char_literal168);


				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(289, 34);
			name=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tag2210);  
			stream_IDENTIFIER.Add(name);

			DebugLocation(289, 46);
			// C:\\work\\ReoScript\\ReoScript.g:289:46: ( tagAttr )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==IDENTIFIER))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:289:46: tagAttr
					{
					DebugLocation(289, 46);
					PushFollow(Follow._tagAttr_in_tag2212);
					tagAttr169=tagAttr();
					PopFollow();

					stream_tagAttr.Add(tagAttr169.Tree);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }

			DebugLocation(289, 55);
			char_literal170=(IToken)Match(input,GREAT_THAN,Follow._GREAT_THAN_in_tag2215);  
			stream_GREAT_THAN.Add(char_literal170);

			DebugLocation(289, 59);
			// C:\\work\\ReoScript\\ReoScript.g:289:59: ( tag )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==LESS_THAN))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:289:59: tag
					{
					DebugLocation(289, 59);
					PushFollow(Follow._tag_in_tag2217);
					tag171=tag();
					PopFollow();

					stream_tag.Add(tag171.Tree);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }

			DebugLocation(289, 67);
			PushFollow(Follow._script_in_tag2222);
			exp=script();
			PopFollow();

			stream_script.Add(exp.Tree);
			DebugLocation(289, 75);
			// C:\\work\\ReoScript\\ReoScript.g:289:75: ( '</' ( IDENTIFIER ':' )? IDENTIFIER '>' | '/>' )
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			int LA47_0 = input.LA(1);

			if ((LA47_0==103))
			{
				alt47 = 1;
			}
			else if ((LA47_0==102))
			{
				alt47 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:289:77: '</' ( IDENTIFIER ':' )? IDENTIFIER '>'
				{
				DebugLocation(289, 77);
				string_literal172=(IToken)Match(input,103,Follow._103_in_tag2226);  
				stream_103.Add(string_literal172);

				DebugLocation(289, 82);
				// C:\\work\\ReoScript\\ReoScript.g:289:82: ( IDENTIFIER ':' )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==IDENTIFIER))
				{
					int LA46_1 = input.LA(2);

					if ((LA46_1==COLON))
					{
						alt46 = 1;
					}
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:289:83: IDENTIFIER ':'
					{
					DebugLocation(289, 83);
					IDENTIFIER173=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tag2229);  
					stream_IDENTIFIER.Add(IDENTIFIER173);

					DebugLocation(289, 94);
					char_literal174=(IToken)Match(input,COLON,Follow._COLON_in_tag2231);  
					stream_COLON.Add(char_literal174);


					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(289, 100);
				IDENTIFIER175=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tag2235);  
				stream_IDENTIFIER.Add(IDENTIFIER175);

				DebugLocation(289, 111);
				char_literal176=(IToken)Match(input,GREAT_THAN,Follow._GREAT_THAN_in_tag2237);  
				stream_GREAT_THAN.Add(char_literal176);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:289:117: '/>'
				{
				DebugLocation(289, 117);
				string_literal177=(IToken)Match(input,102,Follow._102_in_tag2241);  
				stream_102.Add(string_literal177);


				}
				break;

			}
			} finally { DebugExitSubRule(47); }



			{
			// AST REWRITE
			// elements: tagAttr, ns, tag, exp, name
			// token labels: ns, name
			// rule labels: exp, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_ns=new RewriteRuleITokenStream(adaptor,"token ns",ns);
			RewriteRuleITokenStream stream_name=new RewriteRuleITokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_exp=new RewriteRuleSubtreeStream(adaptor,"rule exp",exp!=null?exp.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 290:4: -> ^( TAG ^( TAG_NAME $name ( $ns)? ) ^( TAG_ATTR_LIST ( tagAttr )* ) ( tag )* ( $exp)? )
			{
				DebugLocation(290, 7);
				// C:\\work\\ReoScript\\ReoScript.g:290:7: ^( TAG ^( TAG_NAME $name ( $ns)? ) ^( TAG_ATTR_LIST ( tagAttr )* ) ( tag )* ( $exp)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(290, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAG, "TAG"), root_1);

				DebugLocation(290, 13);
				// C:\\work\\ReoScript\\ReoScript.g:290:13: ^( TAG_NAME $name ( $ns)? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(290, 15);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAG_NAME, "TAG_NAME"), root_2);

				DebugLocation(290, 25);
				adaptor.AddChild(root_2, stream_name.NextNode());
				DebugLocation(290, 31);
				// C:\\work\\ReoScript\\ReoScript.g:290:31: ( $ns)?
				if (stream_ns.HasNext)
				{
					DebugLocation(290, 31);
					adaptor.AddChild(root_2, stream_ns.NextNode());

				}
				stream_ns.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(290, 36);
				// C:\\work\\ReoScript\\ReoScript.g:290:36: ^( TAG_ATTR_LIST ( tagAttr )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(290, 38);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAG_ATTR_LIST, "TAG_ATTR_LIST"), root_2);

				DebugLocation(290, 52);
				// C:\\work\\ReoScript\\ReoScript.g:290:52: ( tagAttr )*
				while ( stream_tagAttr.HasNext )
				{
					DebugLocation(290, 52);
					adaptor.AddChild(root_2, stream_tagAttr.NextTree());

				}
				stream_tagAttr.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(290, 62);
				// C:\\work\\ReoScript\\ReoScript.g:290:62: ( tag )*
				while ( stream_tag.HasNext )
				{
					DebugLocation(290, 62);
					adaptor.AddChild(root_1, stream_tag.NextTree());

				}
				stream_tag.Reset();
				DebugLocation(290, 68);
				// C:\\work\\ReoScript\\ReoScript.g:290:68: ( $exp)?
				if (stream_exp.HasNext)
				{
					DebugLocation(290, 68);
					adaptor.AddChild(root_1, stream_exp.NextTree());

				}
				stream_exp.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tag", 33);
			LeaveRule("tag", 33);
			LeaveRule_tag();
		}
		DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "tag"); }
		return retval;

	}
	// $ANTLR end "tag"

	partial void EnterRule_tagAttr();
	partial void LeaveRule_tagAttr();

	// $ANTLR start "tagAttr"
	// C:\\work\\ReoScript\\ReoScript.g:307:1: tagAttr : name= IDENTIFIER '=' val= primaryExpression -> ^( TAG_ATTR $name $val) ;
	[GrammarRule("tagAttr")]
	private AstParserRuleReturnScope<CommonTree, IToken> tagAttr()
	{
		EnterRule_tagAttr();
		EnterRule("tagAttr", 34);
		TraceIn("tagAttr", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken name = default(IToken);
		IToken char_literal178 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> val = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree name_tree = default(CommonTree);
		CommonTree char_literal178_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGNMENT=new RewriteRuleITokenStream(adaptor,"token ASSIGNMENT");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "tagAttr");
		DebugLocation(307, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:308:2: (name= IDENTIFIER '=' val= primaryExpression -> ^( TAG_ATTR $name $val) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:308:4: name= IDENTIFIER '=' val= primaryExpression
			{
			DebugLocation(308, 8);
			name=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tagAttr2295);  
			stream_IDENTIFIER.Add(name);

			DebugLocation(308, 20);
			char_literal178=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_tagAttr2297);  
			stream_ASSIGNMENT.Add(char_literal178);

			DebugLocation(308, 27);
			PushFollow(Follow._primaryExpression_in_tagAttr2301);
			val=primaryExpression();
			PopFollow();

			stream_primaryExpression.Add(val.Tree);


			{
			// AST REWRITE
			// elements: name, val
			// token labels: name
			// rule labels: val, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_name=new RewriteRuleITokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_val=new RewriteRuleSubtreeStream(adaptor,"rule val",val!=null?val.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 309:3: -> ^( TAG_ATTR $name $val)
			{
				DebugLocation(309, 6);
				// C:\\work\\ReoScript\\ReoScript.g:309:6: ^( TAG_ATTR $name $val)
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(309, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAG_ATTR, "TAG_ATTR"), root_1);

				DebugLocation(309, 18);
				adaptor.AddChild(root_1, stream_name.NextNode());
				DebugLocation(309, 24);
				adaptor.AddChild(root_1, stream_val.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tagAttr", 34);
			LeaveRule("tagAttr", 34);
			LeaveRule_tagAttr();
		}
		DebugLocation(310, 1);
		} finally { DebugExitRule(GrammarFileName, "tagAttr"); }
		return retval;

	}
	// $ANTLR end "tagAttr"

	partial void EnterRule_variable();
	partial void LeaveRule_variable();

	// $ANTLR start "variable"
	// C:\\work\\ReoScript\\ReoScript.g:312:1: variable : IDENTIFIER ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<CommonTree, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 35);
		TraceIn("variable", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER179 = default(IToken);

		CommonTree IDENTIFIER179_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(312, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:313:2: ( IDENTIFIER )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:313:4: IDENTIFIER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(313, 4);
			IDENTIFIER179=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_variable2326); 
			IDENTIFIER179_tree = (CommonTree)adaptor.Create(IDENTIFIER179);
			adaptor.AddChild(root_0, IDENTIFIER179_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 35);
			LeaveRule("variable", 35);
			LeaveRule_variable();
		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"

	partial void EnterRule_array_literal();
	partial void LeaveRule_array_literal();

	// $ANTLR start "array_literal"
	// C:\\work\\ReoScript\\ReoScript.g:316:1: array_literal : '[' ( expressionList )? ( ',' )* ']' -> ^( ARRAY_LITERAL ( expressionList )? ) ;
	[GrammarRule("array_literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> array_literal()
	{
		EnterRule_array_literal();
		EnterRule("array_literal", 36);
		TraceIn("array_literal", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal180 = default(IToken);
		IToken char_literal182 = default(IToken);
		IToken char_literal183 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expressionList181 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal180_tree = default(CommonTree);
		CommonTree char_literal182_tree = default(CommonTree);
		CommonTree char_literal183_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RBRACE=new RewriteRuleITokenStream(adaptor,"token RBRACE");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_LBRACE=new RewriteRuleITokenStream(adaptor,"token LBRACE");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		try { DebugEnterRule(GrammarFileName, "array_literal");
		DebugLocation(316, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:317:2: ( '[' ( expressionList )? ( ',' )* ']' -> ^( ARRAY_LITERAL ( expressionList )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:317:4: '[' ( expressionList )? ( ',' )* ']'
			{
			DebugLocation(317, 4);
			char_literal180=(IToken)Match(input,LBRACE,Follow._LBRACE_in_array_literal2337);  
			stream_LBRACE.Add(char_literal180);

			DebugLocation(317, 8);
			// C:\\work\\ReoScript\\ReoScript.g:317:8: ( expressionList )?
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==BINARY_LITERATE||LA48_0==DECREMENT||LA48_0==FALSE||(LA48_0>=HEX_LITERATE && LA48_0<=IDENTIFIER)||LA48_0==INCREMENT||(LA48_0>=LBRACE && LA48_0<=LCURLY)||LA48_0==LESS_THAN||LA48_0==LPAREN||LA48_0==MINUS||LA48_0==NOT||(LA48_0>=NULL && LA48_0<=NUMBER_LITERATE)||LA48_0==PLUS||LA48_0==STRING_LITERATE||(LA48_0>=THIS && LA48_0<=TRUE)||LA48_0==UNDEFINED||LA48_0==111||LA48_0==115||LA48_0==119))
			{
				alt48 = 1;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:317:8: expressionList
				{
				DebugLocation(317, 8);
				PushFollow(Follow._expressionList_in_array_literal2339);
				expressionList181=expressionList();
				PopFollow();

				stream_expressionList.Add(expressionList181.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(48); }

			DebugLocation(317, 24);
			// C:\\work\\ReoScript\\ReoScript.g:317:24: ( ',' )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==COMMA))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:317:24: ','
					{
					DebugLocation(317, 24);
					char_literal182=(IToken)Match(input,COMMA,Follow._COMMA_in_array_literal2342);  
					stream_COMMA.Add(char_literal182);


					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }

			DebugLocation(317, 29);
			char_literal183=(IToken)Match(input,RBRACE,Follow._RBRACE_in_array_literal2345);  
			stream_RBRACE.Add(char_literal183);



			{
			// AST REWRITE
			// elements: expressionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 318:4: -> ^( ARRAY_LITERAL ( expressionList )? )
			{
				DebugLocation(318, 7);
				// C:\\work\\ReoScript\\ReoScript.g:318:7: ^( ARRAY_LITERAL ( expressionList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(318, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_LITERAL, "ARRAY_LITERAL"), root_1);

				DebugLocation(318, 23);
				// C:\\work\\ReoScript\\ReoScript.g:318:23: ( expressionList )?
				if (stream_expressionList.HasNext)
				{
					DebugLocation(318, 23);
					adaptor.AddChild(root_1, stream_expressionList.NextTree());

				}
				stream_expressionList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("array_literal", 36);
			LeaveRule("array_literal", 36);
			LeaveRule_array_literal();
		}
		DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "array_literal"); }
		return retval;

	}
	// $ANTLR end "array_literal"

	partial void EnterRule_object_literal();
	partial void LeaveRule_object_literal();

	// $ANTLR start "object_literal"
	// C:\\work\\ReoScript\\ReoScript.g:321:1: object_literal : '{' ( keypair )? ( ',' keypair )* ( ',' )* '}' -> ^( OBJECT_LITERAL ( keypair )* ) ;
	[GrammarRule("object_literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> object_literal()
	{
		EnterRule_object_literal();
		EnterRule("object_literal", 37);
		TraceIn("object_literal", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal184 = default(IToken);
		IToken char_literal186 = default(IToken);
		IToken char_literal188 = default(IToken);
		IToken char_literal189 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> keypair185 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> keypair187 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal184_tree = default(CommonTree);
		CommonTree char_literal186_tree = default(CommonTree);
		CommonTree char_literal188_tree = default(CommonTree);
		CommonTree char_literal189_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_keypair=new RewriteRuleSubtreeStream(adaptor,"rule keypair");
		try { DebugEnterRule(GrammarFileName, "object_literal");
		DebugLocation(321, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:322:2: ( '{' ( keypair )? ( ',' keypair )* ( ',' )* '}' -> ^( OBJECT_LITERAL ( keypair )* ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:322:4: '{' ( keypair )? ( ',' keypair )* ( ',' )* '}'
			{
			DebugLocation(322, 4);
			char_literal184=(IToken)Match(input,LCURLY,Follow._LCURLY_in_object_literal2368);  
			stream_LCURLY.Add(char_literal184);

			DebugLocation(322, 8);
			// C:\\work\\ReoScript\\ReoScript.g:322:8: ( keypair )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==IDENTIFIER||LA50_0==STRING_LITERATE))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:322:8: keypair
				{
				DebugLocation(322, 8);
				PushFollow(Follow._keypair_in_object_literal2370);
				keypair185=keypair();
				PopFollow();

				stream_keypair.Add(keypair185.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(50); }

			DebugLocation(322, 17);
			// C:\\work\\ReoScript\\ReoScript.g:322:17: ( ',' keypair )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==COMMA))
				{
					int LA51_1 = input.LA(2);

					if ((LA51_1==IDENTIFIER||LA51_1==STRING_LITERATE))
					{
						alt51 = 1;
					}


				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:322:18: ',' keypair
					{
					DebugLocation(322, 18);
					char_literal186=(IToken)Match(input,COMMA,Follow._COMMA_in_object_literal2374);  
					stream_COMMA.Add(char_literal186);

					DebugLocation(322, 22);
					PushFollow(Follow._keypair_in_object_literal2376);
					keypair187=keypair();
					PopFollow();

					stream_keypair.Add(keypair187.Tree);

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }

			DebugLocation(322, 32);
			// C:\\work\\ReoScript\\ReoScript.g:322:32: ( ',' )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==COMMA))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:322:32: ','
					{
					DebugLocation(322, 32);
					char_literal188=(IToken)Match(input,COMMA,Follow._COMMA_in_object_literal2380);  
					stream_COMMA.Add(char_literal188);


					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }

			DebugLocation(322, 37);
			char_literal189=(IToken)Match(input,RCURLY,Follow._RCURLY_in_object_literal2383);  
			stream_RCURLY.Add(char_literal189);



			{
			// AST REWRITE
			// elements: keypair
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 323:4: -> ^( OBJECT_LITERAL ( keypair )* )
			{
				DebugLocation(323, 7);
				// C:\\work\\ReoScript\\ReoScript.g:323:7: ^( OBJECT_LITERAL ( keypair )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(323, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(OBJECT_LITERAL, "OBJECT_LITERAL"), root_1);

				DebugLocation(323, 24);
				// C:\\work\\ReoScript\\ReoScript.g:323:24: ( keypair )*
				while ( stream_keypair.HasNext )
				{
					DebugLocation(323, 24);
					adaptor.AddChild(root_1, stream_keypair.NextTree());

				}
				stream_keypair.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("object_literal", 37);
			LeaveRule("object_literal", 37);
			LeaveRule_object_literal();
		}
		DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "object_literal"); }
		return retval;

	}
	// $ANTLR end "object_literal"

	partial void EnterRule_keypair();
	partial void LeaveRule_keypair();

	// $ANTLR start "keypair"
	// C:\\work\\ReoScript\\ReoScript.g:326:1: keypair : ( variable | STRING_LITERATE ) ':' ! expression ;
	[GrammarRule("keypair")]
	private AstParserRuleReturnScope<CommonTree, IToken> keypair()
	{
		EnterRule_keypair();
		EnterRule("keypair", 38);
		TraceIn("keypair", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken STRING_LITERATE191 = default(IToken);
		IToken char_literal192 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variable190 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression193 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree STRING_LITERATE191_tree = default(CommonTree);
		CommonTree char_literal192_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "keypair");
		DebugLocation(326, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:327:2: ( ( variable | STRING_LITERATE ) ':' ! expression )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:327:4: ( variable | STRING_LITERATE ) ':' ! expression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(327, 4);
			// C:\\work\\ReoScript\\ReoScript.g:327:4: ( variable | STRING_LITERATE )
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==IDENTIFIER))
			{
				alt53 = 1;
			}
			else if ((LA53_0==STRING_LITERATE))
			{
				alt53 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:327:5: variable
				{
				DebugLocation(327, 5);
				PushFollow(Follow._variable_in_keypair2408);
				variable190=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable190.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:327:14: STRING_LITERATE
				{
				DebugLocation(327, 14);
				STRING_LITERATE191=(IToken)Match(input,STRING_LITERATE,Follow._STRING_LITERATE_in_keypair2410); 
				STRING_LITERATE191_tree = (CommonTree)adaptor.Create(STRING_LITERATE191);
				adaptor.AddChild(root_0, STRING_LITERATE191_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(327, 34);
			char_literal192=(IToken)Match(input,COLON,Follow._COLON_in_keypair2413); 
			DebugLocation(327, 36);
			PushFollow(Follow._expression_in_keypair2416);
			expression193=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression193.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keypair", 38);
			LeaveRule("keypair", 38);
			LeaveRule_keypair();
		}
		DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "keypair"); }
		return retval;

	}
	// $ANTLR end "keypair"

	partial void EnterRule_ifelse();
	partial void LeaveRule_ifelse();

	// $ANTLR start "ifelse"
	// C:\\work\\ReoScript\\ReoScript.g:332:1: ifelse : 'if' LPAREN conditionalOrExpression RPAREN es1= embeddedStatement ( 'else' es2= embeddedStatement )? -> ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? ) ;
	[GrammarRule("ifelse")]
	private AstParserRuleReturnScope<CommonTree, IToken> ifelse()
	{
		EnterRule_ifelse();
		EnterRule("ifelse", 39);
		TraceIn("ifelse", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal194 = default(IToken);
		IToken LPAREN195 = default(IToken);
		IToken RPAREN197 = default(IToken);
		IToken string_literal198 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> es1 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> es2 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression196 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal194_tree = default(CommonTree);
		CommonTree LPAREN195_tree = default(CommonTree);
		CommonTree RPAREN197_tree = default(CommonTree);
		CommonTree string_literal198_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		try { DebugEnterRule(GrammarFileName, "ifelse");
		DebugLocation(332, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:333:2: ( 'if' LPAREN conditionalOrExpression RPAREN es1= embeddedStatement ( 'else' es2= embeddedStatement )? -> ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:333:4: 'if' LPAREN conditionalOrExpression RPAREN es1= embeddedStatement ( 'else' es2= embeddedStatement )?
			{
			DebugLocation(333, 4);
			string_literal194=(IToken)Match(input,112,Follow._112_in_ifelse2431);  
			stream_112.Add(string_literal194);

			DebugLocation(333, 9);
			LPAREN195=(IToken)Match(input,LPAREN,Follow._LPAREN_in_ifelse2433);  
			stream_LPAREN.Add(LPAREN195);

			DebugLocation(333, 16);
			PushFollow(Follow._conditionalOrExpression_in_ifelse2435);
			conditionalOrExpression196=conditionalOrExpression();
			PopFollow();

			stream_conditionalOrExpression.Add(conditionalOrExpression196.Tree);
			DebugLocation(333, 40);
			RPAREN197=(IToken)Match(input,RPAREN,Follow._RPAREN_in_ifelse2437);  
			stream_RPAREN.Add(RPAREN197);

			DebugLocation(333, 50);
			PushFollow(Follow._embeddedStatement_in_ifelse2441);
			es1=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(es1.Tree);
			DebugLocation(333, 69);
			// C:\\work\\ReoScript\\ReoScript.g:333:69: ( 'else' es2= embeddedStatement )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==ELSE))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:333:70: 'else' es2= embeddedStatement
				{
				DebugLocation(333, 70);
				string_literal198=(IToken)Match(input,ELSE,Follow._ELSE_in_ifelse2444);  
				stream_ELSE.Add(string_literal198);

				DebugLocation(333, 80);
				PushFollow(Follow._embeddedStatement_in_ifelse2448);
				es2=embeddedStatement();
				PopFollow();

				stream_embeddedStatement.Add(es2.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(54); }



			{
			// AST REWRITE
			// elements: es1, conditionalOrExpression, es2
			// token labels: 
			// rule labels: retval, es2, es1
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_es2=new RewriteRuleSubtreeStream(adaptor,"rule es2",es2!=null?es2.Tree:null);
			RewriteRuleSubtreeStream stream_es1=new RewriteRuleSubtreeStream(adaptor,"rule es1",es1!=null?es1.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 334:3: -> ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? )
			{
				DebugLocation(334, 6);
				// C:\\work\\ReoScript\\ReoScript.g:334:6: ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(334, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IF_STATEMENT, "IF_STATEMENT"), root_1);

				DebugLocation(334, 21);
				adaptor.AddChild(root_1, stream_conditionalOrExpression.NextTree());
				DebugLocation(334, 46);
				adaptor.AddChild(root_1, stream_es1.NextTree());
				DebugLocation(334, 51);
				// C:\\work\\ReoScript\\ReoScript.g:334:51: ( $es2)?
				if (stream_es2.HasNext)
				{
					DebugLocation(334, 51);
					adaptor.AddChild(root_1, stream_es2.NextTree());

				}
				stream_es2.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ifelse", 39);
			LeaveRule("ifelse", 39);
			LeaveRule_ifelse();
		}
		DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "ifelse"); }
		return retval;

	}
	// $ANTLR end "ifelse"

	partial void EnterRule_forStatement();
	partial void LeaveRule_forStatement();

	// $ANTLR start "forStatement"
	// C:\\work\\ReoScript\\ReoScript.g:337:1: forStatement : 'for' '(' ( forInit )? SEMI ( conditionalOrExpression )? SEMI ( statementExpressionList )? ')' embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) ) ;
	[GrammarRule("forStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> forStatement()
	{
		EnterRule_forStatement();
		EnterRule("forStatement", 40);
		TraceIn("forStatement", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal199 = default(IToken);
		IToken char_literal200 = default(IToken);
		IToken SEMI202 = default(IToken);
		IToken SEMI204 = default(IToken);
		IToken char_literal206 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> forInit201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpressionList205 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement207 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal199_tree = default(CommonTree);
		CommonTree char_literal200_tree = default(CommonTree);
		CommonTree SEMI202_tree = default(CommonTree);
		CommonTree SEMI204_tree = default(CommonTree);
		CommonTree char_literal206_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
		RewriteRuleSubtreeStream stream_statementExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule statementExpressionList");
		try { DebugEnterRule(GrammarFileName, "forStatement");
		DebugLocation(337, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:338:2: ( 'for' '(' ( forInit )? SEMI ( conditionalOrExpression )? SEMI ( statementExpressionList )? ')' embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:338:4: 'for' '(' ( forInit )? SEMI ( conditionalOrExpression )? SEMI ( statementExpressionList )? ')' embeddedStatement
			{
			DebugLocation(338, 4);
			string_literal199=(IToken)Match(input,110,Follow._110_in_forStatement2482);  
			stream_110.Add(string_literal199);

			DebugLocation(338, 10);
			char_literal200=(IToken)Match(input,LPAREN,Follow._LPAREN_in_forStatement2484);  
			stream_LPAREN.Add(char_literal200);

			DebugLocation(338, 14);
			// C:\\work\\ReoScript\\ReoScript.g:338:14: ( forInit )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==BINARY_LITERATE||LA55_0==DECREMENT||LA55_0==FALSE||(LA55_0>=HEX_LITERATE && LA55_0<=IDENTIFIER)||LA55_0==INCREMENT||(LA55_0>=LBRACE && LA55_0<=LCURLY)||LA55_0==LPAREN||(LA55_0>=NULL && LA55_0<=NUMBER_LITERATE)||LA55_0==STRING_LITERATE||(LA55_0>=THIS && LA55_0<=UNDEFINED)||LA55_0==109||LA55_0==111||LA55_0==115))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:338:14: forInit
				{
				DebugLocation(338, 14);
				PushFollow(Follow._forInit_in_forStatement2486);
				forInit201=forInit();
				PopFollow();

				stream_forInit.Add(forInit201.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(338, 23);
			SEMI202=(IToken)Match(input,SEMI,Follow._SEMI_in_forStatement2489);  
			stream_SEMI.Add(SEMI202);

			DebugLocation(338, 28);
			// C:\\work\\ReoScript\\ReoScript.g:338:28: ( conditionalOrExpression )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==BINARY_LITERATE||LA56_0==DECREMENT||LA56_0==FALSE||(LA56_0>=HEX_LITERATE && LA56_0<=IDENTIFIER)||LA56_0==INCREMENT||(LA56_0>=LBRACE && LA56_0<=LCURLY)||LA56_0==LPAREN||LA56_0==MINUS||LA56_0==NOT||(LA56_0>=NULL && LA56_0<=NUMBER_LITERATE)||LA56_0==PLUS||LA56_0==STRING_LITERATE||(LA56_0>=THIS && LA56_0<=TRUE)||LA56_0==UNDEFINED||LA56_0==111||LA56_0==115||LA56_0==119))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:338:28: conditionalOrExpression
				{
				DebugLocation(338, 28);
				PushFollow(Follow._conditionalOrExpression_in_forStatement2491);
				conditionalOrExpression203=conditionalOrExpression();
				PopFollow();

				stream_conditionalOrExpression.Add(conditionalOrExpression203.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(56); }

			DebugLocation(338, 53);
			SEMI204=(IToken)Match(input,SEMI,Follow._SEMI_in_forStatement2494);  
			stream_SEMI.Add(SEMI204);

			DebugLocation(338, 58);
			// C:\\work\\ReoScript\\ReoScript.g:338:58: ( statementExpressionList )?
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==BINARY_LITERATE||LA57_0==DECREMENT||LA57_0==FALSE||(LA57_0>=HEX_LITERATE && LA57_0<=IDENTIFIER)||LA57_0==INCREMENT||(LA57_0>=LBRACE && LA57_0<=LCURLY)||LA57_0==LPAREN||(LA57_0>=NULL && LA57_0<=NUMBER_LITERATE)||LA57_0==STRING_LITERATE||(LA57_0>=THIS && LA57_0<=TRUE)||LA57_0==UNDEFINED||LA57_0==109||LA57_0==111||LA57_0==115))
			{
				alt57 = 1;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:338:58: statementExpressionList
				{
				DebugLocation(338, 58);
				PushFollow(Follow._statementExpressionList_in_forStatement2496);
				statementExpressionList205=statementExpressionList();
				PopFollow();

				stream_statementExpressionList.Add(statementExpressionList205.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(57); }

			DebugLocation(338, 83);
			char_literal206=(IToken)Match(input,RPAREN,Follow._RPAREN_in_forStatement2499);  
			stream_RPAREN.Add(char_literal206);

			DebugLocation(338, 87);
			PushFollow(Follow._embeddedStatement_in_forStatement2501);
			embeddedStatement207=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(embeddedStatement207.Tree);


			{
			// AST REWRITE
			// elements: statementExpressionList, embeddedStatement, forInit, conditionalOrExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 339:3: -> ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) )
			{
				DebugLocation(339, 6);
				// C:\\work\\ReoScript\\ReoScript.g:339:6: ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(339, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_STATEMENT, "FOR_STATEMENT"), root_1);

				DebugLocation(340, 5);
				// C:\\work\\ReoScript\\ReoScript.g:340:5: ^( FOR_INIT ( forInit )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(340, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_2);

				DebugLocation(340, 16);
				// C:\\work\\ReoScript\\ReoScript.g:340:16: ( forInit )?
				if (stream_forInit.HasNext)
				{
					DebugLocation(340, 16);
					adaptor.AddChild(root_2, stream_forInit.NextTree());

				}
				stream_forInit.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(341, 5);
				// C:\\work\\ReoScript\\ReoScript.g:341:5: ^( FOR_CONDITION ( conditionalOrExpression )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(341, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_CONDITION, "FOR_CONDITION"), root_2);

				DebugLocation(341, 21);
				// C:\\work\\ReoScript\\ReoScript.g:341:21: ( conditionalOrExpression )?
				if (stream_conditionalOrExpression.HasNext)
				{
					DebugLocation(341, 21);
					adaptor.AddChild(root_2, stream_conditionalOrExpression.NextTree());

				}
				stream_conditionalOrExpression.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(342, 5);
				// C:\\work\\ReoScript\\ReoScript.g:342:5: ^( FOR_ITERATOR ( statementExpressionList )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(342, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_ITERATOR, "FOR_ITERATOR"), root_2);

				DebugLocation(342, 20);
				// C:\\work\\ReoScript\\ReoScript.g:342:20: ( statementExpressionList )?
				if (stream_statementExpressionList.HasNext)
				{
					DebugLocation(342, 20);
					adaptor.AddChild(root_2, stream_statementExpressionList.NextTree());

				}
				stream_statementExpressionList.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(343, 5);
				// C:\\work\\ReoScript\\ReoScript.g:343:5: ^( FOR_BODY embeddedStatement )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(343, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_BODY, "FOR_BODY"), root_2);

				DebugLocation(343, 16);
				adaptor.AddChild(root_2, stream_embeddedStatement.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forStatement", 40);
			LeaveRule("forStatement", 40);
			LeaveRule_forStatement();
		}
		DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "forStatement"); }
		return retval;

	}
	// $ANTLR end "forStatement"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();

	// $ANTLR start "forInit"
	// C:\\work\\ReoScript\\ReoScript.g:347:1: forInit : ( localVariableDeclaration | statementExpressionList );
	[GrammarRule("forInit")]
	private AstParserRuleReturnScope<CommonTree, IToken> forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 41);
		TraceIn("forInit", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration208 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpressionList209 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(347, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:348:2: ( localVariableDeclaration | statementExpressionList )
			int alt58=2;
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==TYPE))
			{
				alt58 = 1;
			}
			else if ((LA58_0==BINARY_LITERATE||LA58_0==DECREMENT||LA58_0==FALSE||(LA58_0>=HEX_LITERATE && LA58_0<=IDENTIFIER)||LA58_0==INCREMENT||(LA58_0>=LBRACE && LA58_0<=LCURLY)||LA58_0==LPAREN||(LA58_0>=NULL && LA58_0<=NUMBER_LITERATE)||LA58_0==STRING_LITERATE||(LA58_0>=THIS && LA58_0<=TRUE)||LA58_0==UNDEFINED||LA58_0==109||LA58_0==111||LA58_0==115))
			{
				alt58 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:348:4: localVariableDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(348, 4);
				PushFollow(Follow._localVariableDeclaration_in_forInit2573);
				localVariableDeclaration208=localVariableDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, localVariableDeclaration208.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:349:4: statementExpressionList
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(349, 4);
				PushFollow(Follow._statementExpressionList_in_forInit2579);
				statementExpressionList209=statementExpressionList();
				PopFollow();

				adaptor.AddChild(root_0, statementExpressionList209.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 41);
			LeaveRule("forInit", 41);
			LeaveRule_forInit();
		}
		DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_foreachStatement();
	partial void LeaveRule_foreachStatement();

	// $ANTLR start "foreachStatement"
	// C:\\work\\ReoScript\\ReoScript.g:352:1: foreachStatement : 'for' '(' ( 'var' )? IDENTIFIER 'in' expression ')' embeddedStatement -> ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement ) ;
	[GrammarRule("foreachStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> foreachStatement()
	{
		EnterRule_foreachStatement();
		EnterRule("foreachStatement", 42);
		TraceIn("foreachStatement", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal210 = default(IToken);
		IToken char_literal211 = default(IToken);
		IToken string_literal212 = default(IToken);
		IToken IDENTIFIER213 = default(IToken);
		IToken string_literal214 = default(IToken);
		IToken char_literal216 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement217 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal210_tree = default(CommonTree);
		CommonTree char_literal211_tree = default(CommonTree);
		CommonTree string_literal212_tree = default(CommonTree);
		CommonTree IDENTIFIER213_tree = default(CommonTree);
		CommonTree string_literal214_tree = default(CommonTree);
		CommonTree char_literal216_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		try { DebugEnterRule(GrammarFileName, "foreachStatement");
		DebugLocation(352, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:353:2: ( 'for' '(' ( 'var' )? IDENTIFIER 'in' expression ')' embeddedStatement -> ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:353:4: 'for' '(' ( 'var' )? IDENTIFIER 'in' expression ')' embeddedStatement
			{
			DebugLocation(353, 4);
			string_literal210=(IToken)Match(input,110,Follow._110_in_foreachStatement2591);  
			stream_110.Add(string_literal210);

			DebugLocation(353, 10);
			char_literal211=(IToken)Match(input,LPAREN,Follow._LPAREN_in_foreachStatement2593);  
			stream_LPAREN.Add(char_literal211);

			DebugLocation(353, 14);
			// C:\\work\\ReoScript\\ReoScript.g:353:14: ( 'var' )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==TYPE))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:353:14: 'var'
				{
				DebugLocation(353, 14);
				string_literal212=(IToken)Match(input,TYPE,Follow._TYPE_in_foreachStatement2595);  
				stream_TYPE.Add(string_literal212);


				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(353, 21);
			IDENTIFIER213=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_foreachStatement2598);  
			stream_IDENTIFIER.Add(IDENTIFIER213);

			DebugLocation(353, 32);
			string_literal214=(IToken)Match(input,114,Follow._114_in_foreachStatement2600);  
			stream_114.Add(string_literal214);

			DebugLocation(353, 37);
			PushFollow(Follow._expression_in_foreachStatement2602);
			expression215=expression();
			PopFollow();

			stream_expression.Add(expression215.Tree);
			DebugLocation(353, 48);
			char_literal216=(IToken)Match(input,RPAREN,Follow._RPAREN_in_foreachStatement2604);  
			stream_RPAREN.Add(char_literal216);

			DebugLocation(353, 52);
			PushFollow(Follow._embeddedStatement_in_foreachStatement2606);
			embeddedStatement217=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(embeddedStatement217.Tree);


			{
			// AST REWRITE
			// elements: expression, IDENTIFIER, embeddedStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 354:3: -> ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement )
			{
				DebugLocation(354, 6);
				// C:\\work\\ReoScript\\ReoScript.g:354:6: ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(354, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOREACH_STATEMENT, "FOREACH_STATEMENT"), root_1);

				DebugLocation(354, 26);
				adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());
				DebugLocation(354, 37);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(354, 48);
				adaptor.AddChild(root_1, stream_embeddedStatement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("foreachStatement", 42);
			LeaveRule("foreachStatement", 42);
			LeaveRule_foreachStatement();
		}
		DebugLocation(355, 1);
		} finally { DebugExitRule(GrammarFileName, "foreachStatement"); }
		return retval;

	}
	// $ANTLR end "foreachStatement"

	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();

	// $ANTLR start "whileStatement"
	// C:\\work\\ReoScript\\ReoScript.g:357:1: whileStatement : 'while' LPAREN ( conditionalOrExpression ) RPAREN embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) ) ;
	[GrammarRule("whileStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 43);
		TraceIn("whileStatement", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal218 = default(IToken);
		IToken LPAREN219 = default(IToken);
		IToken RPAREN221 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression220 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement222 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal218_tree = default(CommonTree);
		CommonTree LPAREN219_tree = default(CommonTree);
		CommonTree RPAREN221_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(357, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:358:2: ( 'while' LPAREN ( conditionalOrExpression ) RPAREN embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:358:4: 'while' LPAREN ( conditionalOrExpression ) RPAREN embeddedStatement
			{
			DebugLocation(358, 4);
			string_literal218=(IToken)Match(input,118,Follow._118_in_whileStatement2631);  
			stream_118.Add(string_literal218);

			DebugLocation(358, 12);
			LPAREN219=(IToken)Match(input,LPAREN,Follow._LPAREN_in_whileStatement2633);  
			stream_LPAREN.Add(LPAREN219);

			DebugLocation(358, 19);
			// C:\\work\\ReoScript\\ReoScript.g:358:19: ( conditionalOrExpression )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:358:20: conditionalOrExpression
			{
			DebugLocation(358, 20);
			PushFollow(Follow._conditionalOrExpression_in_whileStatement2636);
			conditionalOrExpression220=conditionalOrExpression();
			PopFollow();

			stream_conditionalOrExpression.Add(conditionalOrExpression220.Tree);

			}

			DebugLocation(358, 45);
			RPAREN221=(IToken)Match(input,RPAREN,Follow._RPAREN_in_whileStatement2639);  
			stream_RPAREN.Add(RPAREN221);

			DebugLocation(358, 52);
			PushFollow(Follow._embeddedStatement_in_whileStatement2641);
			embeddedStatement222=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(embeddedStatement222.Tree);


			{
			// AST REWRITE
			// elements: conditionalOrExpression, embeddedStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 359:3: -> ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) )
			{
				DebugLocation(359, 7);
				// C:\\work\\ReoScript\\ReoScript.g:359:7: ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(359, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_STATEMENT, "FOR_STATEMENT"), root_1);

				DebugLocation(360, 5);
				// C:\\work\\ReoScript\\ReoScript.g:360:5: ^( FOR_INIT )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(360, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_2);

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(361, 5);
				// C:\\work\\ReoScript\\ReoScript.g:361:5: ^( FOR_CONDITION ( conditionalOrExpression )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(361, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_CONDITION, "FOR_CONDITION"), root_2);

				DebugLocation(361, 21);
				// C:\\work\\ReoScript\\ReoScript.g:361:21: ( conditionalOrExpression )?
				if (stream_conditionalOrExpression.HasNext)
				{
					DebugLocation(361, 21);
					adaptor.AddChild(root_2, stream_conditionalOrExpression.NextTree());

				}
				stream_conditionalOrExpression.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(362, 5);
				// C:\\work\\ReoScript\\ReoScript.g:362:5: ^( FOR_ITERATOR )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(362, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_ITERATOR, "FOR_ITERATOR"), root_2);

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(363, 5);
				// C:\\work\\ReoScript\\ReoScript.g:363:5: ^( FOR_BODY embeddedStatement )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(363, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_BODY, "FOR_BODY"), root_2);

				DebugLocation(363, 16);
				adaptor.AddChild(root_2, stream_embeddedStatement.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whileStatement", 43);
			LeaveRule("whileStatement", 43);
			LeaveRule_whileStatement();
		}
		DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return retval;

	}
	// $ANTLR end "whileStatement"

	partial void EnterRule_switchStatement();
	partial void LeaveRule_switchStatement();

	// $ANTLR start "switchStatement"
	// C:\\work\\ReoScript\\ReoScript.g:367:1: switchStatement : 'switch' '(' conditionalOrExpression ')' '{' ( switchCaseStatementList )? '}' -> ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? ) ;
	[GrammarRule("switchStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchStatement()
	{
		EnterRule_switchStatement();
		EnterRule("switchStatement", 44);
		TraceIn("switchStatement", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal223 = default(IToken);
		IToken char_literal224 = default(IToken);
		IToken char_literal226 = default(IToken);
		IToken char_literal227 = default(IToken);
		IToken char_literal229 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchCaseStatementList228 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal223_tree = default(CommonTree);
		CommonTree char_literal224_tree = default(CommonTree);
		CommonTree char_literal226_tree = default(CommonTree);
		CommonTree char_literal227_tree = default(CommonTree);
		CommonTree char_literal229_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_switchCaseStatementList=new RewriteRuleSubtreeStream(adaptor,"rule switchCaseStatementList");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		try { DebugEnterRule(GrammarFileName, "switchStatement");
		DebugLocation(367, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:368:2: ( 'switch' '(' conditionalOrExpression ')' '{' ( switchCaseStatementList )? '}' -> ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:368:4: 'switch' '(' conditionalOrExpression ')' '{' ( switchCaseStatementList )? '}'
			{
			DebugLocation(368, 4);
			string_literal223=(IToken)Match(input,117,Follow._117_in_switchStatement2707);  
			stream_117.Add(string_literal223);

			DebugLocation(368, 13);
			char_literal224=(IToken)Match(input,LPAREN,Follow._LPAREN_in_switchStatement2709);  
			stream_LPAREN.Add(char_literal224);

			DebugLocation(368, 17);
			PushFollow(Follow._conditionalOrExpression_in_switchStatement2711);
			conditionalOrExpression225=conditionalOrExpression();
			PopFollow();

			stream_conditionalOrExpression.Add(conditionalOrExpression225.Tree);
			DebugLocation(368, 41);
			char_literal226=(IToken)Match(input,RPAREN,Follow._RPAREN_in_switchStatement2713);  
			stream_RPAREN.Add(char_literal226);

			DebugLocation(369, 4);
			char_literal227=(IToken)Match(input,LCURLY,Follow._LCURLY_in_switchStatement2718);  
			stream_LCURLY.Add(char_literal227);

			DebugLocation(369, 8);
			// C:\\work\\ReoScript\\ReoScript.g:369:8: ( switchCaseStatementList )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_0 = input.LA(1);

			if ((LA60_0==BINARY_LITERATE||LA60_0==DECREMENT||LA60_0==FALSE||(LA60_0>=HEX_LITERATE && LA60_0<=IDENTIFIER)||LA60_0==INCREMENT||(LA60_0>=LBRACE && LA60_0<=LCURLY)||LA60_0==LPAREN||(LA60_0>=NULL && LA60_0<=NUMBER_LITERATE)||LA60_0==STRING_LITERATE||(LA60_0>=THIS && LA60_0<=UNDEFINED)||(LA60_0>=105 && LA60_0<=113)||(LA60_0>=115 && LA60_0<=118)))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:369:8: switchCaseStatementList
				{
				DebugLocation(369, 8);
				PushFollow(Follow._switchCaseStatementList_in_switchStatement2720);
				switchCaseStatementList228=switchCaseStatementList();
				PopFollow();

				stream_switchCaseStatementList.Add(switchCaseStatementList228.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(369, 33);
			char_literal229=(IToken)Match(input,RCURLY,Follow._RCURLY_in_switchStatement2723);  
			stream_RCURLY.Add(char_literal229);



			{
			// AST REWRITE
			// elements: switchCaseStatementList, conditionalOrExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 370:4: -> ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? )
			{
				DebugLocation(370, 7);
				// C:\\work\\ReoScript\\ReoScript.g:370:7: ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(370, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH, "SWITCH"), root_1);

				DebugLocation(370, 16);
				adaptor.AddChild(root_1, stream_conditionalOrExpression.NextTree());
				DebugLocation(370, 40);
				// C:\\work\\ReoScript\\ReoScript.g:370:40: ( switchCaseStatementList )?
				if (stream_switchCaseStatementList.HasNext)
				{
					DebugLocation(370, 40);
					adaptor.AddChild(root_1, stream_switchCaseStatementList.NextTree());

				}
				stream_switchCaseStatementList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchStatement", 44);
			LeaveRule("switchStatement", 44);
			LeaveRule_switchStatement();
		}
		DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "switchStatement"); }
		return retval;

	}
	// $ANTLR end "switchStatement"

	partial void EnterRule_switchCaseStatementList();
	partial void LeaveRule_switchCaseStatementList();

	// $ANTLR start "switchCaseStatementList"
	// C:\\work\\ReoScript\\ReoScript.g:373:1: switchCaseStatementList : ( switchCaseCondition )+ ;
	[GrammarRule("switchCaseStatementList")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseStatementList()
	{
		EnterRule_switchCaseStatementList();
		EnterRule("switchCaseStatementList", 45);
		TraceIn("switchCaseStatementList", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> switchCaseCondition230 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "switchCaseStatementList");
		DebugLocation(373, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:374:2: ( ( switchCaseCondition )+ )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:374:4: ( switchCaseCondition )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(374, 4);
			// C:\\work\\ReoScript\\ReoScript.g:374:4: ( switchCaseCondition )+
			int cnt61=0;
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==BINARY_LITERATE||LA61_0==DECREMENT||LA61_0==FALSE||(LA61_0>=HEX_LITERATE && LA61_0<=IDENTIFIER)||LA61_0==INCREMENT||(LA61_0>=LBRACE && LA61_0<=LCURLY)||LA61_0==LPAREN||(LA61_0>=NULL && LA61_0<=NUMBER_LITERATE)||LA61_0==STRING_LITERATE||(LA61_0>=THIS && LA61_0<=UNDEFINED)||(LA61_0>=105 && LA61_0<=113)||(LA61_0>=115 && LA61_0<=118)))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:374:5: switchCaseCondition
					{
					DebugLocation(374, 5);
					PushFollow(Follow._switchCaseCondition_in_switchCaseStatementList2749);
					switchCaseCondition230=switchCaseCondition();
					PopFollow();

					adaptor.AddChild(root_0, switchCaseCondition230.Tree);

					}
					break;

				default:
					if (cnt61 >= 1)
						goto loop61;

					EarlyExitException eee61 = new EarlyExitException( 61, input );
					DebugRecognitionException(eee61);
					throw eee61;
				}
				cnt61++;
			}
			loop61:
				;

			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseStatementList", 45);
			LeaveRule("switchCaseStatementList", 45);
			LeaveRule_switchCaseStatementList();
		}
		DebugLocation(375, 1);
		} finally { DebugExitRule(GrammarFileName, "switchCaseStatementList"); }
		return retval;

	}
	// $ANTLR end "switchCaseStatementList"

	partial void EnterRule_switchCaseCondition();
	partial void LeaveRule_switchCaseCondition();

	// $ANTLR start "switchCaseCondition"
	// C:\\work\\ReoScript\\ReoScript.g:377:1: switchCaseCondition : ( 'case' expression ':' -> ^( SWITCH_CASE expression ) | statement -> statement | 'default' ':' -> ^( SWITCH_CASE_ELSE ) );
	[GrammarRule("switchCaseCondition")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseCondition()
	{
		EnterRule_switchCaseCondition();
		EnterRule("switchCaseCondition", 46);
		TraceIn("switchCaseCondition", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal231 = default(IToken);
		IToken char_literal233 = default(IToken);
		IToken string_literal235 = default(IToken);
		IToken char_literal236 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement234 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal231_tree = default(CommonTree);
		CommonTree char_literal233_tree = default(CommonTree);
		CommonTree string_literal235_tree = default(CommonTree);
		CommonTree char_literal236_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "switchCaseCondition");
		DebugLocation(377, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:378:2: ( 'case' expression ':' -> ^( SWITCH_CASE expression ) | statement -> statement | 'default' ':' -> ^( SWITCH_CASE_ELSE ) )
			int alt62=3;
			try { DebugEnterDecision(62, false);
			switch (input.LA(1))
			{
			case 106:
				{
				alt62 = 1;
				}
				break;
			case BINARY_LITERATE:
			case DECREMENT:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case INCREMENT:
			case LBRACE:
			case LCURLY:
			case LPAREN:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case TYPE:
			case UNDEFINED:
			case 105:
			case 107:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 115:
			case 116:
			case 117:
			case 118:
				{
				alt62 = 2;
				}
				break;
			case 108:
				{
				alt62 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:379:4: 'case' expression ':'
				{
				DebugLocation(379, 4);
				string_literal231=(IToken)Match(input,106,Follow._106_in_switchCaseCondition2767);  
				stream_106.Add(string_literal231);

				DebugLocation(379, 11);
				PushFollow(Follow._expression_in_switchCaseCondition2769);
				expression232=expression();
				PopFollow();

				stream_expression.Add(expression232.Tree);
				DebugLocation(379, 22);
				char_literal233=(IToken)Match(input,COLON,Follow._COLON_in_switchCaseCondition2771);  
				stream_COLON.Add(char_literal233);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 379:28: -> ^( SWITCH_CASE expression )
				{
					DebugLocation(379, 31);
					// C:\\work\\ReoScript\\ReoScript.g:379:31: ^( SWITCH_CASE expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(379, 33);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH_CASE, "SWITCH_CASE"), root_1);

					DebugLocation(379, 45);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:380:4: statement
				{
				DebugLocation(380, 4);
				PushFollow(Follow._statement_in_switchCaseCondition2786);
				statement234=statement();
				PopFollow();

				stream_statement.Add(statement234.Tree);


				{
				// AST REWRITE
				// elements: statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 380:19: -> statement
				{
					DebugLocation(380, 22);
					adaptor.AddChild(root_0, stream_statement.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:381:4: 'default' ':'
				{
				DebugLocation(381, 4);
				string_literal235=(IToken)Match(input,108,Follow._108_in_switchCaseCondition2800);  
				stream_108.Add(string_literal235);

				DebugLocation(381, 14);
				char_literal236=(IToken)Match(input,COLON,Follow._COLON_in_switchCaseCondition2802);  
				stream_COLON.Add(char_literal236);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 381:22: -> ^( SWITCH_CASE_ELSE )
				{
					DebugLocation(381, 25);
					// C:\\work\\ReoScript\\ReoScript.g:381:25: ^( SWITCH_CASE_ELSE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(381, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH_CASE_ELSE, "SWITCH_CASE_ELSE"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseCondition", 46);
			LeaveRule("switchCaseCondition", 46);
			LeaveRule_switchCaseCondition();
		}
		DebugLocation(382, 1);
		} finally { DebugExitRule(GrammarFileName, "switchCaseCondition"); }
		return retval;

	}
	// $ANTLR end "switchCaseCondition"

	partial void EnterRule_terminalStatement();
	partial void LeaveRule_terminalStatement();

	// $ANTLR start "terminalStatement"
	// C:\\work\\ReoScript\\ReoScript.g:384:1: terminalStatement : ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE ) SEMI ;
	[GrammarRule("terminalStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> terminalStatement()
	{
		EnterRule_terminalStatement();
		EnterRule("terminalStatement", 47);
		TraceIn("terminalStatement", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal238 = default(IToken);
		IToken string_literal239 = default(IToken);
		IToken SEMI240 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> returnStatement237 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal238_tree = default(CommonTree);
		CommonTree string_literal239_tree = default(CommonTree);
		CommonTree SEMI240_tree = default(CommonTree);
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_returnStatement=new RewriteRuleSubtreeStream(adaptor,"rule returnStatement");
		try { DebugEnterRule(GrammarFileName, "terminalStatement");
		DebugLocation(384, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:385:2: ( ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE ) SEMI )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:385:4: ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE ) SEMI
			{
			DebugLocation(385, 4);
			// C:\\work\\ReoScript\\ReoScript.g:385:4: ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE )
			int alt63=3;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			switch (input.LA(1))
			{
			case 116:
				{
				alt63 = 1;
				}
				break;
			case 105:
				{
				alt63 = 2;
				}
				break;
			case 107:
				{
				alt63 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:385:6: returnStatement
				{
				DebugLocation(385, 6);
				PushFollow(Follow._returnStatement_in_terminalStatement2826);
				returnStatement237=returnStatement();
				PopFollow();

				stream_returnStatement.Add(returnStatement237.Tree);


				{
				// AST REWRITE
				// elements: returnStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 385:22: -> returnStatement
				{
					DebugLocation(385, 25);
					adaptor.AddChild(root_0, stream_returnStatement.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:385:43: ( 'break' )
				{
				DebugLocation(385, 43);
				// C:\\work\\ReoScript\\ReoScript.g:385:43: ( 'break' )
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:385:44: 'break'
				{
				DebugLocation(385, 44);
				string_literal238=(IToken)Match(input,105,Follow._105_in_terminalStatement2835);  
				stream_105.Add(string_literal238);


				}



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 385:52: -> BREAK
				{
					DebugLocation(385, 54);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(BREAK, "BREAK"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:385:62: ( 'continue' )
				{
				DebugLocation(385, 62);
				// C:\\work\\ReoScript\\ReoScript.g:385:62: ( 'continue' )
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:385:63: 'continue'
				{
				DebugLocation(385, 63);
				string_literal239=(IToken)Match(input,107,Follow._107_in_terminalStatement2843);  
				stream_107.Add(string_literal239);


				}



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 385:74: -> CONTINUE
				{
					DebugLocation(385, 76);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CONTINUE, "CONTINUE"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(63); }

			DebugLocation(385, 87);
			SEMI240=(IToken)Match(input,SEMI,Follow._SEMI_in_terminalStatement2850);  
			stream_SEMI.Add(SEMI240);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("terminalStatement", 47);
			LeaveRule("terminalStatement", 47);
			LeaveRule_terminalStatement();
		}
		DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "terminalStatement"); }
		return retval;

	}
	// $ANTLR end "terminalStatement"

	partial void EnterRule_returnStatement();
	partial void LeaveRule_returnStatement();

	// $ANTLR start "returnStatement"
	// C:\\work\\ReoScript\\ReoScript.g:388:1: returnStatement : 'return' ( expression )? -> ^( RETURN ( expression )? ) ;
	[GrammarRule("returnStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> returnStatement()
	{
		EnterRule_returnStatement();
		EnterRule("returnStatement", 48);
		TraceIn("returnStatement", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal241 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression242 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal241_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "returnStatement");
		DebugLocation(388, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:389:2: ( 'return' ( expression )? -> ^( RETURN ( expression )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:389:4: 'return' ( expression )?
			{
			DebugLocation(389, 4);
			string_literal241=(IToken)Match(input,116,Follow._116_in_returnStatement2861);  
			stream_116.Add(string_literal241);

			DebugLocation(389, 13);
			// C:\\work\\ReoScript\\ReoScript.g:389:13: ( expression )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==BINARY_LITERATE||LA64_0==DECREMENT||LA64_0==FALSE||(LA64_0>=HEX_LITERATE && LA64_0<=IDENTIFIER)||LA64_0==INCREMENT||(LA64_0>=LBRACE && LA64_0<=LCURLY)||LA64_0==LESS_THAN||LA64_0==LPAREN||LA64_0==MINUS||LA64_0==NOT||(LA64_0>=NULL && LA64_0<=NUMBER_LITERATE)||LA64_0==PLUS||LA64_0==STRING_LITERATE||(LA64_0>=THIS && LA64_0<=TRUE)||LA64_0==UNDEFINED||LA64_0==111||LA64_0==115||LA64_0==119))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:389:13: expression
				{
				DebugLocation(389, 13);
				PushFollow(Follow._expression_in_returnStatement2863);
				expression242=expression();
				PopFollow();

				stream_expression.Add(expression242.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 389:25: -> ^( RETURN ( expression )? )
			{
				DebugLocation(389, 28);
				// C:\\work\\ReoScript\\ReoScript.g:389:28: ^( RETURN ( expression )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(389, 30);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, "RETURN"), root_1);

				DebugLocation(389, 37);
				// C:\\work\\ReoScript\\ReoScript.g:389:37: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(389, 37);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("returnStatement", 48);
			LeaveRule("returnStatement", 48);
			LeaveRule_returnStatement();
		}
		DebugLocation(390, 1);
		} finally { DebugExitRule(GrammarFileName, "returnStatement"); }
		return retval;

	}
	// $ANTLR end "returnStatement"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();

	// $ANTLR start "literal"
	// C:\\work\\ReoScript\\ReoScript.g:395:1: literal : ( TRUE | FALSE | NUMBER_LITERATE | STRING_LITERATE | THIS | NULL | UNDEFINED | HEX_LITERATE | BINARY_LITERATE );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 49);
		TraceIn("literal", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set243 = default(IToken);

		CommonTree set243_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(395, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:396:2: ( TRUE | FALSE | NUMBER_LITERATE | STRING_LITERATE | THIS | NULL | UNDEFINED | HEX_LITERATE | BINARY_LITERATE )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(396, 2);

			set243=(IToken)input.LT(1);
			if (input.LA(1)==BINARY_LITERATE||input.LA(1)==FALSE||input.LA(1)==HEX_LITERATE||(input.LA(1)>=NULL && input.LA(1)<=NUMBER_LITERATE)||input.LA(1)==STRING_LITERATE||(input.LA(1)>=THIS && input.LA(1)<=TRUE)||input.LA(1)==UNDEFINED)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set243));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 49);
			LeaveRule("literal", 49);
			LeaveRule_literal();
		}
		DebugLocation(406, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _statement_in_script437 = new BitSet(new ulong[]{0x81A6004080100002UL,0x7BEA0780800180UL});
		public static readonly BitSet _function_define_in_function_defines450 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _111_in_function_define462 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_function_define466 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _LPAREN_in_function_define468 = new BitSet(new ulong[]{0x4000000000000UL,0x100000UL});
		public static readonly BitSet _parameterDeclarationList_in_function_define470 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_function_define473 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _block_in_function_define475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_anonymous_function_define506 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _LPAREN_in_anonymous_function_define508 = new BitSet(new ulong[]{0x4000000000000UL,0x100000UL});
		public static readonly BitSet _parameterDeclarationList_in_anonymous_function_define510 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_anonymous_function_define513 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _block_in_anonymous_function_define515 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_anonymous_function_define537 = new BitSet(new ulong[]{0x4000000000000UL,0x100000UL});
		public static readonly BitSet _parameterDeclarationList_in_anonymous_function_define539 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_anonymous_function_define542 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_anonymous_function_define544 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _block_in_anonymous_function_define552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_anonymous_function_define576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_anonymous_function_define607 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_anonymous_function_define609 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _block_in_anonymous_function_define617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_anonymous_function_define640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_parameterDeclarationList676 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_parameterDeclarationList679 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_parameterDeclarationList682 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _LCURLY_in_block695 = new BitSet(new ulong[]{0x81A6004080100000UL,0x7BEA0780840180UL});
		public static readonly BitSet _statement_in_block697 = new BitSet(new ulong[]{0x81A6004080100000UL,0x7BEA0780840180UL});
		public static readonly BitSet _RCURLY_in_block700 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _importStatement_in_statement729 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _SEMI_in_statement731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_statement737 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _SEMI_in_statement739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_define_in_statement745 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _SEMI_in_statement747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _embeddedStatement_in_statement754 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_importStatement765 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _namespace_in_importStatement767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_namespace788 = new BitSet(new ulong[]{0x400000002UL});
		public static readonly BitSet _DOT_in_namespace791 = new BitSet(new ulong[]{0x4000000000000UL,0x8UL});
		public static readonly BitSet _set_in_namespace793 = new BitSet(new ulong[]{0x400000002UL});
		public static readonly BitSet _block_in_embeddedStatement814 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementExpression_in_embeddedStatement819 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _SEMI_in_embeddedStatement821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifelse_in_embeddedStatement827 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_embeddedStatement832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _foreachStatement_in_embeddedStatement837 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_embeddedStatement842 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchStatement_in_embeddedStatement847 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _terminalStatement_in_embeddedStatement852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _invocationExpression_in_statementExpression867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_statementExpression872 = new BitSet(new ulong[]{0x8186004000100000UL,0x800580800180UL});
		public static readonly BitSet _primaryExpression_in_statementExpression874 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_statementExpression889 = new BitSet(new ulong[]{0x8186004000100000UL,0x800580800180UL});
		public static readonly BitSet _primaryExpression_in_statementExpression891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCREMENT_in_statementExpression906 = new BitSet(new ulong[]{0x8186004000100000UL,0x800580800180UL});
		public static readonly BitSet _primaryExpression_in_statementExpression908 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_statementExpression925 = new BitSet(new ulong[]{0x8186004000100000UL,0x800580800180UL});
		public static readonly BitSet _primaryExpression_in_statementExpression927 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TYPE_in_localMemberVariableDeclaration952 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localMemberVariableDeclaration954 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_localMemberVariableDeclaration957 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localMemberVariableDeclaration959 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _TYPE_in_localVariableDeclaration988 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localVariableDeclaration990 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_localVariableDeclaration993 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localVariableDeclaration995 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _IDENTIFIER_in_localVariableDeclarationAssignment1021 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _ASSIGNMENT_in_localVariableDeclarationAssignment1024 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_localVariableDeclarationAssignment1026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_invocationExpression1058 = new BitSet(new ulong[]{0x200000800FFE02UL});
		public static readonly BitSet _ASSIGNMENT_in_invocationExpression1069 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_invocationExpression1071 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_PLUS_in_invocationExpression1090 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_invocationExpression1092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_MINUS_in_invocationExpression1118 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_invocationExpression1120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_MUL_in_invocationExpression1146 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_invocationExpression1148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_DIV_in_invocationExpression1174 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_invocationExpression1176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_REM_in_invocationExpression1202 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_invocationExpression1204 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_AND_in_invocationExpression1230 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_invocationExpression1232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_OR_in_invocationExpression1258 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_invocationExpression1260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_REV_in_invocationExpression1286 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_invocationExpression1288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_LSHIFT_in_invocationExpression1314 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_invocationExpression1316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_RSHIFT_in_invocationExpression1341 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_invocationExpression1343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCREMENT_in_invocationExpression1368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_invocationExpression1389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementExpression_in_statementExpressionList1433 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_statementExpressionList1436 = new BitSet(new ulong[]{0x81A6004080100000UL,0x8A00580800180UL});
		public static readonly BitSet _statementExpression_in_statementExpressionList1439 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _tag_in_expression1464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_expression1470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOF_in_expression1472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionList1486 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_expressionList1489 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_expressionList1492 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _conditionalExpression_in_assignmentExpression1506 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _ASSIGNMENT_in_assignmentExpression1509 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_assignmentExpression1512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalOrExpression_in_conditionalExpression1526 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _CONDITION_in_conditionalExpression1529 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_conditionalExpression1532 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _COLON_in_conditionalExpression1534 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_conditionalExpression1537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression1550 = new BitSet(new ulong[]{0x4000000000000002UL});
		public static readonly BitSet _LOGICAL_OR_in_conditionalOrExpression1553 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression1556 = new BitSet(new ulong[]{0x4000000000000002UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression1569 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _LOGICAL_AND_in_conditionalAndExpression1572 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression1575 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression1590 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _OR_in_inclusiveOrExpression1593 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression1596 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression1610 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _XOR_in_exclusiveOrExpression1613 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression1616 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _equalityExpression_in_andExpression1630 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_andExpression1633 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _equalityExpression_in_andExpression1636 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression1649 = new BitSet(new ulong[]{0x1000000002UL,0x40UL});
		public static readonly BitSet _set_in_equalityExpression1652 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression1661 = new BitSet(new ulong[]{0x1000000002UL,0x40UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression1676 = new BitSet(new ulong[]{0x601800000000002UL});
		public static readonly BitSet _set_in_relationalExpression1679 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression1696 = new BitSet(new ulong[]{0x601800000000002UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression1710 = new BitSet(new ulong[]{0x2UL,0x200001UL});
		public static readonly BitSet _set_in_shiftExpression1713 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression1720 = new BitSet(new ulong[]{0x2UL,0x200001UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression1735 = new BitSet(new ulong[]{0x2UL,0x1002UL});
		public static readonly BitSet _set_in_additiveExpression1738 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression1745 = new BitSet(new ulong[]{0x2UL,0x1002UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression1759 = new BitSet(new ulong[]{0x200000002UL,0xCUL});
		public static readonly BitSet _set_in_multiplicativeExpression1762 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression1775 = new BitSet(new ulong[]{0x200000002UL,0xCUL});
		public static readonly BitSet _primaryExpression_in_unaryExpression1794 = new BitSet(new ulong[]{0x20000080000002UL});
		public static readonly BitSet _INCREMENT_in_unaryExpression1804 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_unaryExpression1826 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCREMENT_in_unaryExpression1864 = new BitSet(new ulong[]{0x8186004000100000UL,0x800580800180UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression1866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_unaryExpression1883 = new BitSet(new ulong[]{0x8186004000100000UL,0x800580800180UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression1885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_unaryExpression1902 = new BitSet(new ulong[]{0x8186004000100000UL,0x800580800180UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression1904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_unaryExpression1922 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _MINUS_in_unaryExpression1926 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _NOT_in_unaryExpression1930 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _119_in_unaryExpression1934 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression1937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_primaryExpression1969 = new BitSet(new ulong[]{0x8180000400000002UL});
		public static readonly BitSet _literal_in_primaryExpression1984 = new BitSet(new ulong[]{0x8180000400000002UL});
		public static readonly BitSet _array_literal_in_primaryExpression2000 = new BitSet(new ulong[]{0x8180000400000002UL});
		public static readonly BitSet _anonymous_function_define_in_primaryExpression2013 = new BitSet(new ulong[]{0x8180000400000002UL});
		public static readonly BitSet _LPAREN_in_primaryExpression2024 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_primaryExpression2026 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_primaryExpression2028 = new BitSet(new ulong[]{0x8180000400000002UL});
		public static readonly BitSet _LPAREN_in_primaryExpression2044 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005809011A2UL});
		public static readonly BitSet _RPAREN_in_primaryExpression2052 = new BitSet(new ulong[]{0x8180000400000002UL});
		public static readonly BitSet _expressionList_in_primaryExpression2071 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_primaryExpression2073 = new BitSet(new ulong[]{0x8180000400000002UL});
		public static readonly BitSet _DOT_in_primaryExpression2105 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_primaryExpression2107 = new BitSet(new ulong[]{0x8180000400000002UL});
		public static readonly BitSet _LBRACE_in_primaryExpression2127 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_primaryExpression2131 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _RBRACE_in_primaryExpression2133 = new BitSet(new ulong[]{0x8180000400000002UL});
		public static readonly BitSet _object_literal_in_primaryExpression2154 = new BitSet(new ulong[]{0x8180000400000002UL});
		public static readonly BitSet _object_literal_in_primaryExpression2177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LESS_THAN_in_tag2196 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tag2201 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _COLON_in_tag2203 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tag2210 = new BitSet(new ulong[]{0x5000000000000UL});
		public static readonly BitSet _tagAttr_in_tag2212 = new BitSet(new ulong[]{0x5000000000000UL});
		public static readonly BitSet _GREAT_THAN_in_tag2215 = new BitSet(new ulong[]{0x85A6004080100000UL,0x7BEAC780800180UL});
		public static readonly BitSet _tag_in_tag2217 = new BitSet(new ulong[]{0x85A6004080100000UL,0x7BEAC780800180UL});
		public static readonly BitSet _script_in_tag2222 = new BitSet(new ulong[]{0x0UL,0xC000000000UL});
		public static readonly BitSet _103_in_tag2226 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tag2229 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _COLON_in_tag2231 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tag2235 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _GREAT_THAN_in_tag2237 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_tag2241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_tagAttr2295 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _ASSIGNMENT_in_tagAttr2297 = new BitSet(new ulong[]{0x8186004000100000UL,0x800580800180UL});
		public static readonly BitSet _primaryExpression_in_tagAttr2301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_variable2326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_array_literal2337 = new BitSet(new ulong[]{0x85A6004082100000UL,0x888005808211A2UL});
		public static readonly BitSet _expressionList_in_array_literal2339 = new BitSet(new ulong[]{0x2000000UL,0x20000UL});
		public static readonly BitSet _COMMA_in_array_literal2342 = new BitSet(new ulong[]{0x2000000UL,0x20000UL});
		public static readonly BitSet _RBRACE_in_array_literal2345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_object_literal2368 = new BitSet(new ulong[]{0x4000002000000UL,0x840000UL});
		public static readonly BitSet _keypair_in_object_literal2370 = new BitSet(new ulong[]{0x2000000UL,0x40000UL});
		public static readonly BitSet _COMMA_in_object_literal2374 = new BitSet(new ulong[]{0x4000000000000UL,0x800000UL});
		public static readonly BitSet _keypair_in_object_literal2376 = new BitSet(new ulong[]{0x2000000UL,0x40000UL});
		public static readonly BitSet _COMMA_in_object_literal2380 = new BitSet(new ulong[]{0x2000000UL,0x40000UL});
		public static readonly BitSet _RCURLY_in_object_literal2383 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_keypair2408 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _STRING_LITERATE_in_keypair2410 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _COLON_in_keypair2413 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_keypair2416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_ifelse2431 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _LPAREN_in_ifelse2433 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _conditionalOrExpression_in_ifelse2435 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_ifelse2437 = new BitSet(new ulong[]{0x81A6004080100000UL,0x79EA0580800180UL});
		public static readonly BitSet _embeddedStatement_in_ifelse2441 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _ELSE_in_ifelse2444 = new BitSet(new ulong[]{0x81A6004080100000UL,0x79EA0580800180UL});
		public static readonly BitSet _embeddedStatement_in_ifelse2448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_forStatement2482 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _LPAREN_in_forStatement2484 = new BitSet(new ulong[]{0x81A6004080100000UL,0x8A00780C00180UL});
		public static readonly BitSet _forInit_in_forStatement2486 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _SEMI_in_forStatement2489 = new BitSet(new ulong[]{0x81A6004080100000UL,0x88800580C011A2UL});
		public static readonly BitSet _conditionalOrExpression_in_forStatement2491 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _SEMI_in_forStatement2494 = new BitSet(new ulong[]{0x81A6004080100000UL,0x8A00580900180UL});
		public static readonly BitSet _statementExpressionList_in_forStatement2496 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_forStatement2499 = new BitSet(new ulong[]{0x81A6004080100000UL,0x79EA0580800180UL});
		public static readonly BitSet _embeddedStatement_in_forStatement2501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_forInit2573 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementExpressionList_in_forInit2579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_foreachStatement2591 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _LPAREN_in_foreachStatement2593 = new BitSet(new ulong[]{0x4000000000000UL,0x200000000UL});
		public static readonly BitSet _TYPE_in_foreachStatement2595 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_foreachStatement2598 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_foreachStatement2600 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_foreachStatement2602 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_foreachStatement2604 = new BitSet(new ulong[]{0x81A6004080100000UL,0x79EA0580800180UL});
		public static readonly BitSet _embeddedStatement_in_foreachStatement2606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_whileStatement2631 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _LPAREN_in_whileStatement2633 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _conditionalOrExpression_in_whileStatement2636 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_whileStatement2639 = new BitSet(new ulong[]{0x81A6004080100000UL,0x79EA0580800180UL});
		public static readonly BitSet _embeddedStatement_in_whileStatement2641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_switchStatement2707 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _LPAREN_in_switchStatement2709 = new BitSet(new ulong[]{0x81A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _conditionalOrExpression_in_switchStatement2711 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _RPAREN_in_switchStatement2713 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _LCURLY_in_switchStatement2718 = new BitSet(new ulong[]{0x81A6004080100000UL,0x7BFE0780840180UL});
		public static readonly BitSet _switchCaseStatementList_in_switchStatement2720 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _RCURLY_in_switchStatement2723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseCondition_in_switchCaseStatementList2749 = new BitSet(new ulong[]{0x81A6004080100002UL,0x7BFE0780800180UL});
		public static readonly BitSet _106_in_switchCaseCondition2767 = new BitSet(new ulong[]{0x85A6004080100000UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_switchCaseCondition2769 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _COLON_in_switchCaseCondition2771 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_switchCaseCondition2786 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_switchCaseCondition2800 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _COLON_in_switchCaseCondition2802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _returnStatement_in_terminalStatement2826 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _105_in_terminalStatement2835 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _107_in_terminalStatement2843 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _SEMI_in_terminalStatement2850 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_returnStatement2861 = new BitSet(new ulong[]{0x85A6004080100002UL,0x888005808011A2UL});
		public static readonly BitSet _expression_in_returnStatement2863 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Unvell.ReoScript 
