//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\work\\ReoScript\\ReoScript.g 2013-03-31 10:38:23

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Unvell.ReoScript 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class ReoScriptParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "ANONYMOUS_FUNCTION", "ARGUMENT_LIST", "ARRAY_ACCESS", "ARRAY_LITERAL", "ASSIGNMENT", "ASSIGN_AND", "ASSIGN_DIV", "ASSIGN_LSHIFT", "ASSIGN_MINUS", "ASSIGN_MUL", "ASSIGN_OR", "ASSIGN_PLUS", "ASSIGN_REM", "ASSIGN_REV", "ASSIGN_RSHIFT", "BINARY_LITERATE", "BLOCK", "BREAK", "CLASS", "COLON", "COMBINE_OBJECT", "COMMA", "COMMENT", "CONDITION", "CONTINUE", "CREATE", "DECLARATION", "DECREMENT", "DELETE", "DIV", "DOT", "ELSE", "EQUALS", "ESCAPE_SEQUENCE", "FALSE", "FOREACH_STATEMENT", "FOR_BODY", "FOR_CONDITION", "FOR_INIT", "FOR_ITERATOR", "FOR_STATEMENT", "FUNCTION_CALL", "FUNCTION_DEFINE", "GREAT_EQUALS", "GREAT_THAN", "HEX_LITERATE", "IDENTIFIER", "IF_STATEMENT", "IMPORT", "INCREMENT", "INSTANCEOF", "LAMBDA_FUNCTION", "LBRACE", "LCURLY", "LESS_EQUALS", "LESS_THAN", "LINE_COMMENT", "LOCAL_DECLARE_ASSIGNMENT", "LOGICAL_AND", "LOGICAL_OR", "LPAREN", "LSHIFT", "MEMBER_DECLARATION", "MEMBER_MODIFIER", "MINUS", "MOD", "MUL", "NAN", "NEWLINE", "NOT", "NOT_EQUALS", "NULL", "NUMBER_LITERATE", "OBJECT_LITERAL", "OR", "PARAMETER_DEFINES", "PARAMETER_DEFINE_WITH_DEFAULT_VALUE", "PARAMETER_DEFINE_WITH_DEFAULT_VALUE_LIST", "PLUS", "POST_UNARY_STEP", "PRE_UNARY", "PRE_UNARY_STEP", "PRIVATE", "PROPERTY_ACCESS", "PROTECTED", "PUBLIC", "RBRACE", "RCURLY", "RETURN", "RPAREN", "RSHIFT", "SEMI", "STRING_LITERATE", "SWITCH", "SWITCH_CASE", "SWITCH_CASE_ELSE", "TAG", "TAG_ATTR", "TAG_ATTR_LIST", "TAG_NAME", "TEMPLATE_DEFINE", "TEMPLATE_TAG", "THIS", "TRUE", "TYPE", "TYPEOF", "UNDEFINED", "WHILE_STATEMENT", "WS", "XOR", "'/>'", "'</'", "'=>'", "'break'", "'case'", "'class'", "'continue'", "'default'", "'delete'", "'for'", "'function'", "'if'", "'import'", "'in'", "'instanceof'", "'new'", "'return'", "'switch'", "'template'", "'typeof'", "'while'", "'~'"
	};
	public const int EOF=-1;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int AND=4;
	public const int ANONYMOUS_FUNCTION=5;
	public const int ARGUMENT_LIST=6;
	public const int ARRAY_ACCESS=7;
	public const int ARRAY_LITERAL=8;
	public const int ASSIGNMENT=9;
	public const int ASSIGN_AND=10;
	public const int ASSIGN_DIV=11;
	public const int ASSIGN_LSHIFT=12;
	public const int ASSIGN_MINUS=13;
	public const int ASSIGN_MUL=14;
	public const int ASSIGN_OR=15;
	public const int ASSIGN_PLUS=16;
	public const int ASSIGN_REM=17;
	public const int ASSIGN_REV=18;
	public const int ASSIGN_RSHIFT=19;
	public const int BINARY_LITERATE=20;
	public const int BLOCK=21;
	public const int BREAK=22;
	public const int CLASS=23;
	public const int COLON=24;
	public const int COMBINE_OBJECT=25;
	public const int COMMA=26;
	public const int COMMENT=27;
	public const int CONDITION=28;
	public const int CONTINUE=29;
	public const int CREATE=30;
	public const int DECLARATION=31;
	public const int DECREMENT=32;
	public const int DELETE=33;
	public const int DIV=34;
	public const int DOT=35;
	public const int ELSE=36;
	public const int EQUALS=37;
	public const int ESCAPE_SEQUENCE=38;
	public const int FALSE=39;
	public const int FOREACH_STATEMENT=40;
	public const int FOR_BODY=41;
	public const int FOR_CONDITION=42;
	public const int FOR_INIT=43;
	public const int FOR_ITERATOR=44;
	public const int FOR_STATEMENT=45;
	public const int FUNCTION_CALL=46;
	public const int FUNCTION_DEFINE=47;
	public const int GREAT_EQUALS=48;
	public const int GREAT_THAN=49;
	public const int HEX_LITERATE=50;
	public const int IDENTIFIER=51;
	public const int IF_STATEMENT=52;
	public const int IMPORT=53;
	public const int INCREMENT=54;
	public const int INSTANCEOF=55;
	public const int LAMBDA_FUNCTION=56;
	public const int LBRACE=57;
	public const int LCURLY=58;
	public const int LESS_EQUALS=59;
	public const int LESS_THAN=60;
	public const int LINE_COMMENT=61;
	public const int LOCAL_DECLARE_ASSIGNMENT=62;
	public const int LOGICAL_AND=63;
	public const int LOGICAL_OR=64;
	public const int LPAREN=65;
	public const int LSHIFT=66;
	public const int MEMBER_DECLARATION=67;
	public const int MEMBER_MODIFIER=68;
	public const int MINUS=69;
	public const int MOD=70;
	public const int MUL=71;
	public const int NAN=72;
	public const int NEWLINE=73;
	public const int NOT=74;
	public const int NOT_EQUALS=75;
	public const int NULL=76;
	public const int NUMBER_LITERATE=77;
	public const int OBJECT_LITERAL=78;
	public const int OR=79;
	public const int PARAMETER_DEFINES=80;
	public const int PARAMETER_DEFINE_WITH_DEFAULT_VALUE=81;
	public const int PARAMETER_DEFINE_WITH_DEFAULT_VALUE_LIST=82;
	public const int PLUS=83;
	public const int POST_UNARY_STEP=84;
	public const int PRE_UNARY=85;
	public const int PRE_UNARY_STEP=86;
	public const int PRIVATE=87;
	public const int PROPERTY_ACCESS=88;
	public const int PROTECTED=89;
	public const int PUBLIC=90;
	public const int RBRACE=91;
	public const int RCURLY=92;
	public const int RETURN=93;
	public const int RPAREN=94;
	public const int RSHIFT=95;
	public const int SEMI=96;
	public const int STRING_LITERATE=97;
	public const int SWITCH=98;
	public const int SWITCH_CASE=99;
	public const int SWITCH_CASE_ELSE=100;
	public const int TAG=101;
	public const int TAG_ATTR=102;
	public const int TAG_ATTR_LIST=103;
	public const int TAG_NAME=104;
	public const int TEMPLATE_DEFINE=105;
	public const int TEMPLATE_TAG=106;
	public const int THIS=107;
	public const int TRUE=108;
	public const int TYPE=109;
	public const int TYPEOF=110;
	public const int UNDEFINED=111;
	public const int WHILE_STATEMENT=112;
	public const int WS=113;
	public const int XOR=114;

	public ReoScriptParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ReoScriptParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ReoScriptParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\work\\ReoScript\\ReoScript.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_script();
	partial void LeaveRule_script();

	// $ANTLR start "script"
	// C:\\work\\ReoScript\\ReoScript.g:59:1: public script : ( statement )* ;
	[GrammarRule("script")]
	public AstParserRuleReturnScope<CommonTree, IToken> script()
	{
		EnterRule_script();
		EnterRule("script", 1);
		TraceIn("script", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> statement1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "script");
		DebugLocation(59, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:60:2: ( ( statement )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:61:2: ( statement )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(61, 2);
			// C:\\work\\ReoScript\\ReoScript.g:61:2: ( statement )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==BINARY_LITERATE||LA1_0==DECREMENT||LA1_0==FALSE||(LA1_0>=HEX_LITERATE && LA1_0<=IDENTIFIER)||LA1_0==INCREMENT||(LA1_0>=LBRACE && LA1_0<=LCURLY)||LA1_0==LPAREN||LA1_0==NAN||(LA1_0>=NULL && LA1_0<=NUMBER_LITERATE)||LA1_0==PRIVATE||(LA1_0>=PROTECTED && LA1_0<=PUBLIC)||LA1_0==STRING_LITERATE||(LA1_0>=THIS && LA1_0<=TYPE)||LA1_0==UNDEFINED||LA1_0==118||(LA1_0>=120 && LA1_0<=121)||(LA1_0>=123 && LA1_0<=127)||(LA1_0>=130 && LA1_0<=133)||LA1_0==135))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:61:2: statement
					{
					DebugLocation(61, 2);
					PushFollow(Follow._statement_in_script461);
					statement1=statement();
					PopFollow();

					adaptor.AddChild(root_0, statement1.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("script", 1);
			LeaveRule("script", 1);
			LeaveRule_script();
		}
		DebugLocation(62, 1);
		} finally { DebugExitRule(GrammarFileName, "script"); }
		return retval;

	}
	// $ANTLR end "script"

	partial void EnterRule_function_defines();
	partial void LeaveRule_function_defines();

	// $ANTLR start "function_defines"
	// C:\\work\\ReoScript\\ReoScript.g:64:1: function_defines : ( function_define )* ;
	[GrammarRule("function_defines")]
	private AstParserRuleReturnScope<CommonTree, IToken> function_defines()
	{
		EnterRule_function_defines();
		EnterRule("function_defines", 2);
		TraceIn("function_defines", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> function_define2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "function_defines");
		DebugLocation(64, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:65:2: ( ( function_define )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:65:4: ( function_define )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(65, 4);
			// C:\\work\\ReoScript\\ReoScript.g:65:4: ( function_define )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==PRIVATE||(LA2_0>=PROTECTED && LA2_0<=PUBLIC)||LA2_0==125))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:65:4: function_define
					{
					DebugLocation(65, 4);
					PushFollow(Follow._function_define_in_function_defines474);
					function_define2=function_define();
					PopFollow();

					adaptor.AddChild(root_0, function_define2.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function_defines", 2);
			LeaveRule("function_defines", 2);
			LeaveRule_function_defines();
		}
		DebugLocation(66, 1);
		} finally { DebugExitRule(GrammarFileName, "function_defines"); }
		return retval;

	}
	// $ANTLR end "function_defines"

	partial void EnterRule_function_define();
	partial void LeaveRule_function_define();

	// $ANTLR start "function_define"
	// C:\\work\\ReoScript\\ReoScript.g:68:1: function_define : ( memberModifier )? 'function' id= IDENTIFIER '(' ( parameterDeclarationList )? ')' block -> ^( FUNCTION_DEFINE $id ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ^( MEMBER_MODIFIER ( memberModifier )? ) ) ;
	[GrammarRule("function_define")]
	private AstParserRuleReturnScope<CommonTree, IToken> function_define()
	{
		EnterRule_function_define();
		EnterRule("function_define", 3);
		TraceIn("function_define", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken id = default(IToken);
		IToken string_literal4 = default(IToken);
		IToken char_literal5 = default(IToken);
		IToken char_literal7 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> memberModifier3 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationList6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block8 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree id_tree = default(CommonTree);
		CommonTree string_literal4_tree = default(CommonTree);
		CommonTree char_literal5_tree = default(CommonTree);
		CommonTree char_literal7_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_memberModifier=new RewriteRuleSubtreeStream(adaptor,"rule memberModifier");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_parameterDeclarationList=new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclarationList");
		try { DebugEnterRule(GrammarFileName, "function_define");
		DebugLocation(68, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:69:2: ( ( memberModifier )? 'function' id= IDENTIFIER '(' ( parameterDeclarationList )? ')' block -> ^( FUNCTION_DEFINE $id ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ^( MEMBER_MODIFIER ( memberModifier )? ) ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:69:4: ( memberModifier )? 'function' id= IDENTIFIER '(' ( parameterDeclarationList )? ')' block
			{
			DebugLocation(69, 4);
			// C:\\work\\ReoScript\\ReoScript.g:69:4: ( memberModifier )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==PRIVATE||(LA3_0>=PROTECTED && LA3_0<=PUBLIC)))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:69:4: memberModifier
				{
				DebugLocation(69, 4);
				PushFollow(Follow._memberModifier_in_function_define486);
				memberModifier3=memberModifier();
				PopFollow();

				stream_memberModifier.Add(memberModifier3.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(69, 20);
			string_literal4=(IToken)Match(input,125,Follow._125_in_function_define489);  
			stream_125.Add(string_literal4);

			DebugLocation(69, 33);
			id=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_function_define493);  
			stream_IDENTIFIER.Add(id);

			DebugLocation(69, 45);
			char_literal5=(IToken)Match(input,LPAREN,Follow._LPAREN_in_function_define495);  
			stream_LPAREN.Add(char_literal5);

			DebugLocation(69, 49);
			// C:\\work\\ReoScript\\ReoScript.g:69:49: ( parameterDeclarationList )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==IDENTIFIER))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:69:49: parameterDeclarationList
				{
				DebugLocation(69, 49);
				PushFollow(Follow._parameterDeclarationList_in_function_define497);
				parameterDeclarationList6=parameterDeclarationList();
				PopFollow();

				stream_parameterDeclarationList.Add(parameterDeclarationList6.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(69, 75);
			char_literal7=(IToken)Match(input,RPAREN,Follow._RPAREN_in_function_define500);  
			stream_RPAREN.Add(char_literal7);

			DebugLocation(69, 80);
			PushFollow(Follow._block_in_function_define503);
			block8=block();
			PopFollow();

			stream_block.Add(block8.Tree);


			{
			// AST REWRITE
			// elements: id, parameterDeclarationList, block, memberModifier
			// token labels: id
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_id=new RewriteRuleITokenStream(adaptor,"token id",id);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 70:3: -> ^( FUNCTION_DEFINE $id ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ^( MEMBER_MODIFIER ( memberModifier )? ) )
			{
				DebugLocation(70, 6);
				// C:\\work\\ReoScript\\ReoScript.g:70:6: ^( FUNCTION_DEFINE $id ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ^( MEMBER_MODIFIER ( memberModifier )? ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(70, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_DEFINE, "FUNCTION_DEFINE"), root_1);

				DebugLocation(70, 25);
				adaptor.AddChild(root_1, stream_id.NextNode());
				DebugLocation(70, 28);
				// C:\\work\\ReoScript\\ReoScript.g:70:28: ^( PARAMETER_DEFINES ( parameterDeclarationList )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(70, 30);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

				DebugLocation(70, 48);
				// C:\\work\\ReoScript\\ReoScript.g:70:48: ( parameterDeclarationList )?
				if (stream_parameterDeclarationList.HasNext)
				{
					DebugLocation(70, 48);
					adaptor.AddChild(root_2, stream_parameterDeclarationList.NextTree());

				}
				stream_parameterDeclarationList.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(70, 75);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(71, 4);
				// C:\\work\\ReoScript\\ReoScript.g:71:4: ^( MEMBER_MODIFIER ( memberModifier )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(71, 6);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MEMBER_MODIFIER, "MEMBER_MODIFIER"), root_2);

				DebugLocation(71, 22);
				// C:\\work\\ReoScript\\ReoScript.g:71:22: ( memberModifier )?
				if (stream_memberModifier.HasNext)
				{
					DebugLocation(71, 22);
					adaptor.AddChild(root_2, stream_memberModifier.NextTree());

				}
				stream_memberModifier.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function_define", 3);
			LeaveRule("function_define", 3);
			LeaveRule_function_define();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "function_define"); }
		return retval;

	}
	// $ANTLR end "function_define"

	partial void EnterRule_anonymous_function_define();
	partial void LeaveRule_anonymous_function_define();

	// $ANTLR start "anonymous_function_define"
	// C:\\work\\ReoScript\\ReoScript.g:74:1: anonymous_function_define : ( 'function' '(' ( parameterDeclarationList )? ')' block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | '(' ( parameterDeclarationList )? ')' '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) ) ) | IDENTIFIER '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) ) ) );
	[GrammarRule("anonymous_function_define")]
	private AstParserRuleReturnScope<CommonTree, IToken> anonymous_function_define()
	{
		EnterRule_anonymous_function_define();
		EnterRule("anonymous_function_define", 4);
		TraceIn("anonymous_function_define", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal9 = default(IToken);
		IToken char_literal10 = default(IToken);
		IToken char_literal12 = default(IToken);
		IToken char_literal14 = default(IToken);
		IToken char_literal16 = default(IToken);
		IToken string_literal17 = default(IToken);
		IToken IDENTIFIER20 = default(IToken);
		IToken string_literal21 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationList11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block13 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationList15 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block18 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block22 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression23 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal9_tree = default(CommonTree);
		CommonTree char_literal10_tree = default(CommonTree);
		CommonTree char_literal12_tree = default(CommonTree);
		CommonTree char_literal14_tree = default(CommonTree);
		CommonTree char_literal16_tree = default(CommonTree);
		CommonTree string_literal17_tree = default(CommonTree);
		CommonTree IDENTIFIER20_tree = default(CommonTree);
		CommonTree string_literal21_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_parameterDeclarationList=new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclarationList");
		try { DebugEnterRule(GrammarFileName, "anonymous_function_define");
		DebugLocation(74, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:75:2: ( 'function' '(' ( parameterDeclarationList )? ')' block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | '(' ( parameterDeclarationList )? ')' '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) ) ) | IDENTIFIER '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) ) ) )
			int alt9=3;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case 125:
				{
				alt9 = 1;
				}
				break;
			case LPAREN:
				{
				alt9 = 2;
				}
				break;
			case IDENTIFIER:
				{
				alt9 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:75:4: 'function' '(' ( parameterDeclarationList )? ')' block
				{
				DebugLocation(75, 4);
				string_literal9=(IToken)Match(input,125,Follow._125_in_anonymous_function_define545);  
				stream_125.Add(string_literal9);

				DebugLocation(75, 15);
				char_literal10=(IToken)Match(input,LPAREN,Follow._LPAREN_in_anonymous_function_define547);  
				stream_LPAREN.Add(char_literal10);

				DebugLocation(75, 19);
				// C:\\work\\ReoScript\\ReoScript.g:75:19: ( parameterDeclarationList )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==IDENTIFIER))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:75:19: parameterDeclarationList
					{
					DebugLocation(75, 19);
					PushFollow(Follow._parameterDeclarationList_in_anonymous_function_define549);
					parameterDeclarationList11=parameterDeclarationList();
					PopFollow();

					stream_parameterDeclarationList.Add(parameterDeclarationList11.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(75, 45);
				char_literal12=(IToken)Match(input,RPAREN,Follow._RPAREN_in_anonymous_function_define552);  
				stream_RPAREN.Add(char_literal12);

				DebugLocation(75, 49);
				PushFollow(Follow._block_in_anonymous_function_define554);
				block13=block();
				PopFollow();

				stream_block.Add(block13.Tree);


				{
				// AST REWRITE
				// elements: block, parameterDeclarationList
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 76:3: -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
				{
					DebugLocation(76, 6);
					// C:\\work\\ReoScript\\ReoScript.g:76:6: ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(76, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANONYMOUS_FUNCTION, "ANONYMOUS_FUNCTION"), root_1);

					DebugLocation(76, 27);
					// C:\\work\\ReoScript\\ReoScript.g:76:27: ^( PARAMETER_DEFINES ( parameterDeclarationList )? )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(76, 29);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

					DebugLocation(76, 47);
					// C:\\work\\ReoScript\\ReoScript.g:76:47: ( parameterDeclarationList )?
					if (stream_parameterDeclarationList.HasNext)
					{
						DebugLocation(76, 47);
						adaptor.AddChild(root_2, stream_parameterDeclarationList.NextTree());

					}
					stream_parameterDeclarationList.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(76, 74);
					adaptor.AddChild(root_1, stream_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:77:4: '(' ( parameterDeclarationList )? ')' '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) ) )
				{
				DebugLocation(77, 4);
				char_literal14=(IToken)Match(input,LPAREN,Follow._LPAREN_in_anonymous_function_define576);  
				stream_LPAREN.Add(char_literal14);

				DebugLocation(77, 8);
				// C:\\work\\ReoScript\\ReoScript.g:77:8: ( parameterDeclarationList )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==IDENTIFIER))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:77:8: parameterDeclarationList
					{
					DebugLocation(77, 8);
					PushFollow(Follow._parameterDeclarationList_in_anonymous_function_define578);
					parameterDeclarationList15=parameterDeclarationList();
					PopFollow();

					stream_parameterDeclarationList.Add(parameterDeclarationList15.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(77, 34);
				char_literal16=(IToken)Match(input,RPAREN,Follow._RPAREN_in_anonymous_function_define581);  
				stream_RPAREN.Add(char_literal16);

				DebugLocation(77, 38);
				string_literal17=(IToken)Match(input,117,Follow._117_in_anonymous_function_define583);  
				stream_117.Add(string_literal17);

				DebugLocation(77, 43);
				// C:\\work\\ReoScript\\ReoScript.g:77:43: ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) ) )
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==LCURLY))
				{
					switch (input.LA(2))
					{
					case DECREMENT:
					case INCREMENT:
					case LBRACE:
					case LCURLY:
					case LPAREN:
					case PRIVATE:
					case PROTECTED:
					case PUBLIC:
					case TYPE:
					case 118:
					case 120:
					case 121:
					case 123:
					case 124:
					case 125:
					case 126:
					case 127:
					case 130:
					case 131:
					case 132:
					case 133:
					case 135:
						{
						alt7 = 1;
						}
						break;
					case IDENTIFIER:
						{
						int LA7_4 = input.LA(3);

						if (((LA7_4>=ASSIGNMENT && LA7_4<=ASSIGN_RSHIFT)||LA7_4==DECREMENT||LA7_4==DOT||LA7_4==INCREMENT||(LA7_4>=LBRACE && LA7_4<=LCURLY)||LA7_4==LPAREN||LA7_4==SEMI||LA7_4==117||LA7_4==129))
						{
							alt7 = 1;
						}
						else if ((LA7_4==COLON))
						{
							alt7 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 7, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case STRING_LITERATE:
						{
						int LA7_5 = input.LA(3);

						if (((LA7_5>=ASSIGNMENT && LA7_5<=ASSIGN_RSHIFT)||LA7_5==DECREMENT||LA7_5==DOT||LA7_5==INCREMENT||(LA7_5>=LBRACE && LA7_5<=LCURLY)||LA7_5==LPAREN||LA7_5==SEMI||LA7_5==129))
						{
							alt7 = 1;
						}
						else if ((LA7_5==COLON))
						{
							alt7 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 7, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case BINARY_LITERATE:
					case FALSE:
					case HEX_LITERATE:
					case NAN:
					case NULL:
					case NUMBER_LITERATE:
					case RCURLY:
					case THIS:
					case TRUE:
					case UNDEFINED:
						{
						alt7 = 1;
						}
						break;
					case COMMA:
						{
						alt7 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 7, 1, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else if ((LA7_0==BINARY_LITERATE||LA7_0==DECREMENT||LA7_0==FALSE||(LA7_0>=HEX_LITERATE && LA7_0<=IDENTIFIER)||LA7_0==INCREMENT||LA7_0==LBRACE||LA7_0==LPAREN||LA7_0==MINUS||LA7_0==NAN||LA7_0==NOT||(LA7_0>=NULL && LA7_0<=NUMBER_LITERATE)||LA7_0==PLUS||LA7_0==STRING_LITERATE||(LA7_0>=THIS && LA7_0<=TRUE)||LA7_0==UNDEFINED||LA7_0==125||LA7_0==130||LA7_0==134||LA7_0==136))
				{
					alt7 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:78:5: block
					{
					DebugLocation(78, 5);
					PushFollow(Follow._block_in_anonymous_function_define591);
					block18=block();
					PopFollow();

					stream_block.Add(block18.Tree);


					{
					// AST REWRITE
					// elements: block, parameterDeclarationList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 79:4: -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
					{
						DebugLocation(79, 7);
						// C:\\work\\ReoScript\\ReoScript.g:79:7: ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(79, 9);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANONYMOUS_FUNCTION, "ANONYMOUS_FUNCTION"), root_1);

						DebugLocation(79, 28);
						// C:\\work\\ReoScript\\ReoScript.g:79:28: ^( PARAMETER_DEFINES ( parameterDeclarationList )? )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(79, 30);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

						DebugLocation(79, 48);
						// C:\\work\\ReoScript\\ReoScript.g:79:48: ( parameterDeclarationList )?
						if (stream_parameterDeclarationList.HasNext)
						{
							DebugLocation(79, 48);
							adaptor.AddChild(root_2, stream_parameterDeclarationList.NextTree());

						}
						stream_parameterDeclarationList.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(79, 75);
						adaptor.AddChild(root_1, stream_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:80:5: assignmentExpression
					{
					DebugLocation(80, 5);
					PushFollow(Follow._assignmentExpression_in_anonymous_function_define615);
					assignmentExpression19=assignmentExpression();
					PopFollow();

					stream_assignmentExpression.Add(assignmentExpression19.Tree);


					{
					// AST REWRITE
					// elements: parameterDeclarationList, assignmentExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 81:4: -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) )
					{
						DebugLocation(81, 7);
						// C:\\work\\ReoScript\\ReoScript.g:81:7: ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) ^( RETURN assignmentExpression ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(81, 9);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANONYMOUS_FUNCTION, "ANONYMOUS_FUNCTION"), root_1);

						DebugLocation(81, 28);
						// C:\\work\\ReoScript\\ReoScript.g:81:28: ^( PARAMETER_DEFINES ( parameterDeclarationList )? )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(81, 30);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

						DebugLocation(81, 48);
						// C:\\work\\ReoScript\\ReoScript.g:81:48: ( parameterDeclarationList )?
						if (stream_parameterDeclarationList.HasNext)
						{
							DebugLocation(81, 48);
							adaptor.AddChild(root_2, stream_parameterDeclarationList.NextTree());

						}
						stream_parameterDeclarationList.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(81, 75);
						// C:\\work\\ReoScript\\ReoScript.g:81:75: ^( RETURN assignmentExpression )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(81, 77);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, "RETURN"), root_2);

						DebugLocation(81, 84);
						adaptor.AddChild(root_2, stream_assignmentExpression.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(7); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:83:4: IDENTIFIER '=>' ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) ) )
				{
				DebugLocation(83, 4);
				IDENTIFIER20=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_anonymous_function_define646);  
				stream_IDENTIFIER.Add(IDENTIFIER20);

				DebugLocation(83, 15);
				string_literal21=(IToken)Match(input,117,Follow._117_in_anonymous_function_define648);  
				stream_117.Add(string_literal21);

				DebugLocation(83, 20);
				// C:\\work\\ReoScript\\ReoScript.g:83:20: ( block -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block ) | assignmentExpression -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) ) )
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==LCURLY))
				{
					switch (input.LA(2))
					{
					case DECREMENT:
					case INCREMENT:
					case LBRACE:
					case LCURLY:
					case LPAREN:
					case PRIVATE:
					case PROTECTED:
					case PUBLIC:
					case TYPE:
					case 118:
					case 120:
					case 121:
					case 123:
					case 124:
					case 125:
					case 126:
					case 127:
					case 130:
					case 131:
					case 132:
					case 133:
					case 135:
						{
						alt8 = 1;
						}
						break;
					case IDENTIFIER:
						{
						int LA8_4 = input.LA(3);

						if (((LA8_4>=ASSIGNMENT && LA8_4<=ASSIGN_RSHIFT)||LA8_4==DECREMENT||LA8_4==DOT||LA8_4==INCREMENT||(LA8_4>=LBRACE && LA8_4<=LCURLY)||LA8_4==LPAREN||LA8_4==SEMI||LA8_4==117||LA8_4==129))
						{
							alt8 = 1;
						}
						else if ((LA8_4==COLON))
						{
							alt8 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 8, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case STRING_LITERATE:
						{
						int LA8_5 = input.LA(3);

						if (((LA8_5>=ASSIGNMENT && LA8_5<=ASSIGN_RSHIFT)||LA8_5==DECREMENT||LA8_5==DOT||LA8_5==INCREMENT||(LA8_5>=LBRACE && LA8_5<=LCURLY)||LA8_5==LPAREN||LA8_5==SEMI||LA8_5==129))
						{
							alt8 = 1;
						}
						else if ((LA8_5==COLON))
						{
							alt8 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 8, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case BINARY_LITERATE:
					case FALSE:
					case HEX_LITERATE:
					case NAN:
					case NULL:
					case NUMBER_LITERATE:
					case RCURLY:
					case THIS:
					case TRUE:
					case UNDEFINED:
						{
						alt8 = 1;
						}
						break;
					case COMMA:
						{
						alt8 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 8, 1, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else if ((LA8_0==BINARY_LITERATE||LA8_0==DECREMENT||LA8_0==FALSE||(LA8_0>=HEX_LITERATE && LA8_0<=IDENTIFIER)||LA8_0==INCREMENT||LA8_0==LBRACE||LA8_0==LPAREN||LA8_0==MINUS||LA8_0==NAN||LA8_0==NOT||(LA8_0>=NULL && LA8_0<=NUMBER_LITERATE)||LA8_0==PLUS||LA8_0==STRING_LITERATE||(LA8_0>=THIS && LA8_0<=TRUE)||LA8_0==UNDEFINED||LA8_0==125||LA8_0==130||LA8_0==134||LA8_0==136))
				{
					alt8 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:84:5: block
					{
					DebugLocation(84, 5);
					PushFollow(Follow._block_in_anonymous_function_define656);
					block22=block();
					PopFollow();

					stream_block.Add(block22.Tree);


					{
					// AST REWRITE
					// elements: block, IDENTIFIER
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 85:4: -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block )
					{
						DebugLocation(85, 7);
						// C:\\work\\ReoScript\\ReoScript.g:85:7: ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(85, 9);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANONYMOUS_FUNCTION, "ANONYMOUS_FUNCTION"), root_1);

						DebugLocation(85, 28);
						// C:\\work\\ReoScript\\ReoScript.g:85:28: ^( PARAMETER_DEFINES IDENTIFIER )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(85, 30);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

						DebugLocation(85, 48);
						adaptor.AddChild(root_2, stream_IDENTIFIER.NextNode());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(85, 60);
						adaptor.AddChild(root_1, stream_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:86:5: assignmentExpression
					{
					DebugLocation(86, 5);
					PushFollow(Follow._assignmentExpression_in_anonymous_function_define679);
					assignmentExpression23=assignmentExpression();
					PopFollow();

					stream_assignmentExpression.Add(assignmentExpression23.Tree);


					{
					// AST REWRITE
					// elements: IDENTIFIER, assignmentExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 87:4: -> ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) )
					{
						DebugLocation(87, 7);
						// C:\\work\\ReoScript\\ReoScript.g:87:7: ^( ANONYMOUS_FUNCTION ^( PARAMETER_DEFINES IDENTIFIER ) ^( RETURN assignmentExpression ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(87, 9);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANONYMOUS_FUNCTION, "ANONYMOUS_FUNCTION"), root_1);

						DebugLocation(87, 28);
						// C:\\work\\ReoScript\\ReoScript.g:87:28: ^( PARAMETER_DEFINES IDENTIFIER )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(87, 30);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

						DebugLocation(87, 48);
						adaptor.AddChild(root_2, stream_IDENTIFIER.NextNode());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(87, 60);
						// C:\\work\\ReoScript\\ReoScript.g:87:60: ^( RETURN assignmentExpression )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(87, 62);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, "RETURN"), root_2);

						DebugLocation(87, 69);
						adaptor.AddChild(root_2, stream_assignmentExpression.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(8); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_function_define", 4);
			LeaveRule("anonymous_function_define", 4);
			LeaveRule_anonymous_function_define();
		}
		DebugLocation(89, 1);
		} finally { DebugExitRule(GrammarFileName, "anonymous_function_define"); }
		return retval;

	}
	// $ANTLR end "anonymous_function_define"

	partial void EnterRule_parameterDeclarationList();
	partial void LeaveRule_parameterDeclarationList();

	// $ANTLR start "parameterDeclarationList"
	// C:\\work\\ReoScript\\ReoScript.g:91:1: parameterDeclarationList : IDENTIFIER ( COMMA ! IDENTIFIER )* ;
	[GrammarRule("parameterDeclarationList")]
	private AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationList()
	{
		EnterRule_parameterDeclarationList();
		EnterRule("parameterDeclarationList", 5);
		TraceIn("parameterDeclarationList", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER24 = default(IToken);
		IToken COMMA25 = default(IToken);
		IToken IDENTIFIER26 = default(IToken);

		CommonTree IDENTIFIER24_tree = default(CommonTree);
		CommonTree COMMA25_tree = default(CommonTree);
		CommonTree IDENTIFIER26_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "parameterDeclarationList");
		DebugLocation(91, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:92:2: ( IDENTIFIER ( COMMA ! IDENTIFIER )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:92:4: IDENTIFIER ( COMMA ! IDENTIFIER )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(92, 4);
			IDENTIFIER24=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_parameterDeclarationList715); 
			IDENTIFIER24_tree = (CommonTree)adaptor.Create(IDENTIFIER24);
			adaptor.AddChild(root_0, IDENTIFIER24_tree);
			DebugLocation(92, 15);
			// C:\\work\\ReoScript\\ReoScript.g:92:15: ( COMMA ! IDENTIFIER )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==COMMA))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:92:16: COMMA ! IDENTIFIER
					{
					DebugLocation(92, 21);
					COMMA25=(IToken)Match(input,COMMA,Follow._COMMA_in_parameterDeclarationList718); 
					DebugLocation(92, 23);
					IDENTIFIER26=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_parameterDeclarationList721); 
					IDENTIFIER26_tree = (CommonTree)adaptor.Create(IDENTIFIER26);
					adaptor.AddChild(root_0, IDENTIFIER26_tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameterDeclarationList", 5);
			LeaveRule("parameterDeclarationList", 5);
			LeaveRule_parameterDeclarationList();
		}
		DebugLocation(93, 1);
		} finally { DebugExitRule(GrammarFileName, "parameterDeclarationList"); }
		return retval;

	}
	// $ANTLR end "parameterDeclarationList"

	partial void EnterRule_parameterDeclarationWithDefaultValueList();
	partial void LeaveRule_parameterDeclarationWithDefaultValueList();

	// $ANTLR start "parameterDeclarationWithDefaultValueList"
	// C:\\work\\ReoScript\\ReoScript.g:95:1: parameterDeclarationWithDefaultValueList : parameterDeclarationWithDefaultValue ( COMMA ! parameterDeclarationWithDefaultValue )* ;
	[GrammarRule("parameterDeclarationWithDefaultValueList")]
	private AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationWithDefaultValueList()
	{
		EnterRule_parameterDeclarationWithDefaultValueList();
		EnterRule("parameterDeclarationWithDefaultValueList", 6);
		TraceIn("parameterDeclarationWithDefaultValueList", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationWithDefaultValue27 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationWithDefaultValue29 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA28_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "parameterDeclarationWithDefaultValueList");
		DebugLocation(95, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:96:2: ( parameterDeclarationWithDefaultValue ( COMMA ! parameterDeclarationWithDefaultValue )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:96:4: parameterDeclarationWithDefaultValue ( COMMA ! parameterDeclarationWithDefaultValue )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(96, 4);
			PushFollow(Follow._parameterDeclarationWithDefaultValue_in_parameterDeclarationWithDefaultValueList735);
			parameterDeclarationWithDefaultValue27=parameterDeclarationWithDefaultValue();
			PopFollow();

			adaptor.AddChild(root_0, parameterDeclarationWithDefaultValue27.Tree);
			DebugLocation(96, 41);
			// C:\\work\\ReoScript\\ReoScript.g:96:41: ( COMMA ! parameterDeclarationWithDefaultValue )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==COMMA))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:96:42: COMMA ! parameterDeclarationWithDefaultValue
					{
					DebugLocation(96, 47);
					COMMA28=(IToken)Match(input,COMMA,Follow._COMMA_in_parameterDeclarationWithDefaultValueList738); 
					DebugLocation(96, 49);
					PushFollow(Follow._parameterDeclarationWithDefaultValue_in_parameterDeclarationWithDefaultValueList741);
					parameterDeclarationWithDefaultValue29=parameterDeclarationWithDefaultValue();
					PopFollow();

					adaptor.AddChild(root_0, parameterDeclarationWithDefaultValue29.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameterDeclarationWithDefaultValueList", 6);
			LeaveRule("parameterDeclarationWithDefaultValueList", 6);
			LeaveRule_parameterDeclarationWithDefaultValueList();
		}
		DebugLocation(97, 1);
		} finally { DebugExitRule(GrammarFileName, "parameterDeclarationWithDefaultValueList"); }
		return retval;

	}
	// $ANTLR end "parameterDeclarationWithDefaultValueList"

	partial void EnterRule_parameterDeclarationWithDefaultValue();
	partial void LeaveRule_parameterDeclarationWithDefaultValue();

	// $ANTLR start "parameterDeclarationWithDefaultValue"
	// C:\\work\\ReoScript\\ReoScript.g:99:1: parameterDeclarationWithDefaultValue : IDENTIFIER ( '=' primaryExpression )? -> ^( PARAMETER_DEFINE_WITH_DEFAULT_VALUE IDENTIFIER ( primaryExpression )? ) ;
	[GrammarRule("parameterDeclarationWithDefaultValue")]
	private AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationWithDefaultValue()
	{
		EnterRule_parameterDeclarationWithDefaultValue();
		EnterRule("parameterDeclarationWithDefaultValue", 7);
		TraceIn("parameterDeclarationWithDefaultValue", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER30 = default(IToken);
		IToken char_literal31 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENTIFIER30_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGNMENT=new RewriteRuleITokenStream(adaptor,"token ASSIGNMENT");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "parameterDeclarationWithDefaultValue");
		DebugLocation(99, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:100:2: ( IDENTIFIER ( '=' primaryExpression )? -> ^( PARAMETER_DEFINE_WITH_DEFAULT_VALUE IDENTIFIER ( primaryExpression )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:100:4: IDENTIFIER ( '=' primaryExpression )?
			{
			DebugLocation(100, 4);
			IDENTIFIER30=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_parameterDeclarationWithDefaultValue754);  
			stream_IDENTIFIER.Add(IDENTIFIER30);

			DebugLocation(100, 15);
			// C:\\work\\ReoScript\\ReoScript.g:100:15: ( '=' primaryExpression )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==ASSIGNMENT))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:100:16: '=' primaryExpression
				{
				DebugLocation(100, 16);
				char_literal31=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_parameterDeclarationWithDefaultValue757);  
				stream_ASSIGNMENT.Add(char_literal31);

				DebugLocation(100, 20);
				PushFollow(Follow._primaryExpression_in_parameterDeclarationWithDefaultValue759);
				primaryExpression32=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression32.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }



			{
			// AST REWRITE
			// elements: IDENTIFIER, primaryExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 101:3: -> ^( PARAMETER_DEFINE_WITH_DEFAULT_VALUE IDENTIFIER ( primaryExpression )? )
			{
				DebugLocation(101, 6);
				// C:\\work\\ReoScript\\ReoScript.g:101:6: ^( PARAMETER_DEFINE_WITH_DEFAULT_VALUE IDENTIFIER ( primaryExpression )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(101, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINE_WITH_DEFAULT_VALUE, "PARAMETER_DEFINE_WITH_DEFAULT_VALUE"), root_1);

				DebugLocation(101, 44);
				adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());
				DebugLocation(101, 55);
				// C:\\work\\ReoScript\\ReoScript.g:101:55: ( primaryExpression )?
				if (stream_primaryExpression.HasNext)
				{
					DebugLocation(101, 55);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

				}
				stream_primaryExpression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameterDeclarationWithDefaultValue", 7);
			LeaveRule("parameterDeclarationWithDefaultValue", 7);
			LeaveRule_parameterDeclarationWithDefaultValue();
		}
		DebugLocation(102, 1);
		} finally { DebugExitRule(GrammarFileName, "parameterDeclarationWithDefaultValue"); }
		return retval;

	}
	// $ANTLR end "parameterDeclarationWithDefaultValue"

	partial void EnterRule_block();
	partial void LeaveRule_block();

	// $ANTLR start "block"
	// C:\\work\\ReoScript\\ReoScript.g:104:1: block : '{' ( statement )* '}' -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 8);
		TraceIn("block", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal33 = default(IToken);
		IToken char_literal35 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> statement34 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree char_literal35_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(104, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:105:2: ( '{' ( statement )* '}' -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:105:4: '{' ( statement )* '}'
			{
			DebugLocation(105, 4);
			char_literal33=(IToken)Match(input,LCURLY,Follow._LCURLY_in_block785);  
			stream_LCURLY.Add(char_literal33);

			DebugLocation(105, 8);
			// C:\\work\\ReoScript\\ReoScript.g:105:8: ( statement )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==BINARY_LITERATE||LA13_0==DECREMENT||LA13_0==FALSE||(LA13_0>=HEX_LITERATE && LA13_0<=IDENTIFIER)||LA13_0==INCREMENT||(LA13_0>=LBRACE && LA13_0<=LCURLY)||LA13_0==LPAREN||LA13_0==NAN||(LA13_0>=NULL && LA13_0<=NUMBER_LITERATE)||LA13_0==PRIVATE||(LA13_0>=PROTECTED && LA13_0<=PUBLIC)||LA13_0==STRING_LITERATE||(LA13_0>=THIS && LA13_0<=TYPE)||LA13_0==UNDEFINED||LA13_0==118||(LA13_0>=120 && LA13_0<=121)||(LA13_0>=123 && LA13_0<=127)||(LA13_0>=130 && LA13_0<=133)||LA13_0==135))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:105:8: statement
					{
					DebugLocation(105, 8);
					PushFollow(Follow._statement_in_block787);
					statement34=statement();
					PopFollow();

					stream_statement.Add(statement34.Tree);

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(105, 19);
			char_literal35=(IToken)Match(input,RCURLY,Follow._RCURLY_in_block790);  
			stream_RCURLY.Add(char_literal35);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 106:3: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(106, 6);
				// C:\\work\\ReoScript\\ReoScript.g:106:6: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(106, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(106, 14);
				// C:\\work\\ReoScript\\ReoScript.g:106:14: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(106, 14);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 8);
			LeaveRule("block", 8);
			LeaveRule_block();
		}
		DebugLocation(107, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_class_define();
	partial void LeaveRule_class_define();

	// $ANTLR start "class_define"
	// C:\\work\\ReoScript\\ReoScript.g:109:1: class_define : 'class' IDENTIFIER ( ':' ( IDENTIFIER ':' )? IDENTIFIER )? '{' ( localMemberVariableDeclaration SEMI !| function_define ( SEMI !)? )* '}' ;
	[GrammarRule("class_define")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_define()
	{
		EnterRule_class_define();
		EnterRule("class_define", 9);
		TraceIn("class_define", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal36 = default(IToken);
		IToken IDENTIFIER37 = default(IToken);
		IToken char_literal38 = default(IToken);
		IToken IDENTIFIER39 = default(IToken);
		IToken char_literal40 = default(IToken);
		IToken IDENTIFIER41 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken SEMI44 = default(IToken);
		IToken SEMI46 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localMemberVariableDeclaration43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> function_define45 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal36_tree = default(CommonTree);
		CommonTree IDENTIFIER37_tree = default(CommonTree);
		CommonTree char_literal38_tree = default(CommonTree);
		CommonTree IDENTIFIER39_tree = default(CommonTree);
		CommonTree char_literal40_tree = default(CommonTree);
		CommonTree IDENTIFIER41_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree SEMI44_tree = default(CommonTree);
		CommonTree SEMI46_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "class_define");
		DebugLocation(109, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:110:2: ( 'class' IDENTIFIER ( ':' ( IDENTIFIER ':' )? IDENTIFIER )? '{' ( localMemberVariableDeclaration SEMI !| function_define ( SEMI !)? )* '}' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:110:4: 'class' IDENTIFIER ( ':' ( IDENTIFIER ':' )? IDENTIFIER )? '{' ( localMemberVariableDeclaration SEMI !| function_define ( SEMI !)? )* '}'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(110, 4);
			string_literal36=(IToken)Match(input,120,Follow._120_in_class_define813); 
			string_literal36_tree = (CommonTree)adaptor.Create(string_literal36);
			adaptor.AddChild(root_0, string_literal36_tree);
			DebugLocation(110, 12);
			IDENTIFIER37=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_class_define815); 
			IDENTIFIER37_tree = (CommonTree)adaptor.Create(IDENTIFIER37);
			adaptor.AddChild(root_0, IDENTIFIER37_tree);
			DebugLocation(110, 23);
			// C:\\work\\ReoScript\\ReoScript.g:110:23: ( ':' ( IDENTIFIER ':' )? IDENTIFIER )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==COLON))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:110:24: ':' ( IDENTIFIER ':' )? IDENTIFIER
				{
				DebugLocation(110, 24);
				char_literal38=(IToken)Match(input,COLON,Follow._COLON_in_class_define818); 
				char_literal38_tree = (CommonTree)adaptor.Create(char_literal38);
				adaptor.AddChild(root_0, char_literal38_tree);
				DebugLocation(110, 28);
				// C:\\work\\ReoScript\\ReoScript.g:110:28: ( IDENTIFIER ':' )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==IDENTIFIER))
				{
					int LA14_1 = input.LA(2);

					if ((LA14_1==COLON))
					{
						alt14 = 1;
					}
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:110:29: IDENTIFIER ':'
					{
					DebugLocation(110, 29);
					IDENTIFIER39=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_class_define821); 
					IDENTIFIER39_tree = (CommonTree)adaptor.Create(IDENTIFIER39);
					adaptor.AddChild(root_0, IDENTIFIER39_tree);
					DebugLocation(110, 40);
					char_literal40=(IToken)Match(input,COLON,Follow._COLON_in_class_define823); 
					char_literal40_tree = (CommonTree)adaptor.Create(char_literal40);
					adaptor.AddChild(root_0, char_literal40_tree);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(110, 46);
				IDENTIFIER41=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_class_define827); 
				IDENTIFIER41_tree = (CommonTree)adaptor.Create(IDENTIFIER41);
				adaptor.AddChild(root_0, IDENTIFIER41_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(111, 3);
			char_literal42=(IToken)Match(input,LCURLY,Follow._LCURLY_in_class_define833); 
			char_literal42_tree = (CommonTree)adaptor.Create(char_literal42);
			adaptor.AddChild(root_0, char_literal42_tree);
			DebugLocation(112, 4);
			// C:\\work\\ReoScript\\ReoScript.g:112:4: ( localMemberVariableDeclaration SEMI !| function_define ( SEMI !)? )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=3;
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case PRIVATE:
				case PROTECTED:
				case PUBLIC:
					{
					int LA17_2 = input.LA(2);

					if ((LA17_2==TYPE))
					{
						alt17 = 1;
					}
					else if ((LA17_2==125))
					{
						alt17 = 2;
					}


					}
					break;
				case TYPE:
					{
					alt17 = 1;
					}
					break;
				case 125:
					{
					alt17 = 2;
					}
					break;
				}

				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:113:6: localMemberVariableDeclaration SEMI !
					{
					DebugLocation(113, 6);
					PushFollow(Follow._localMemberVariableDeclaration_in_class_define845);
					localMemberVariableDeclaration43=localMemberVariableDeclaration();
					PopFollow();

					adaptor.AddChild(root_0, localMemberVariableDeclaration43.Tree);
					DebugLocation(113, 41);
					SEMI44=(IToken)Match(input,SEMI,Follow._SEMI_in_class_define847); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:114:6: function_define ( SEMI !)?
					{
					DebugLocation(114, 6);
					PushFollow(Follow._function_define_in_class_define855);
					function_define45=function_define();
					PopFollow();

					adaptor.AddChild(root_0, function_define45.Tree);
					DebugLocation(114, 26);
					// C:\\work\\ReoScript\\ReoScript.g:114:26: ( SEMI !)?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==SEMI))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\work\\ReoScript\\ReoScript.g:114:26: SEMI !
						{
						DebugLocation(114, 26);
						SEMI46=(IToken)Match(input,SEMI,Follow._SEMI_in_class_define857); 

						}
						break;

					}
					} finally { DebugExitSubRule(16); }


					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }

			DebugLocation(116, 3);
			char_literal47=(IToken)Match(input,RCURLY,Follow._RCURLY_in_class_define869); 
			char_literal47_tree = (CommonTree)adaptor.Create(char_literal47);
			adaptor.AddChild(root_0, char_literal47_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_define", 9);
			LeaveRule("class_define", 9);
			LeaveRule_class_define();
		}
		DebugLocation(117, 1);
		} finally { DebugExitRule(GrammarFileName, "class_define"); }
		return retval;

	}
	// $ANTLR end "class_define"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// C:\\work\\ReoScript\\ReoScript.g:120:1: public statement : ( importStatement SEMI !| localVariableDeclaration SEMI !| function_define ( SEMI !)? | class_define ( SEMI !)? | tagTemplateDefine ( SEMI !)? | embeddedStatement );
	[GrammarRule("statement")]
	public AstParserRuleReturnScope<CommonTree, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 10);
		TraceIn("statement", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken SEMI49 = default(IToken);
		IToken SEMI51 = default(IToken);
		IToken SEMI53 = default(IToken);
		IToken SEMI55 = default(IToken);
		IToken SEMI57 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> importStatement48 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration50 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> function_define52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_define54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> tagTemplateDefine56 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement58 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI49_tree = default(CommonTree);
		CommonTree SEMI51_tree = default(CommonTree);
		CommonTree SEMI53_tree = default(CommonTree);
		CommonTree SEMI55_tree = default(CommonTree);
		CommonTree SEMI57_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(120, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:121:2: ( importStatement SEMI !| localVariableDeclaration SEMI !| function_define ( SEMI !)? | class_define ( SEMI !)? | tagTemplateDefine ( SEMI !)? | embeddedStatement )
			int alt21=6;
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case 127:
				{
				alt21 = 1;
				}
				break;
			case TYPE:
				{
				alt21 = 2;
				}
				break;
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
				{
				int LA21_3 = input.LA(2);

				if ((LA21_3==125))
				{
					alt21 = 3;
				}
				else if ((LA21_3==133))
				{
					alt21 = 5;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 21, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 125:
				{
				int LA21_4 = input.LA(2);

				if ((LA21_4==IDENTIFIER))
				{
					alt21 = 3;
				}
				else if ((LA21_4==LPAREN))
				{
					alt21 = 6;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 21, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 120:
				{
				alt21 = 4;
				}
				break;
			case 133:
				{
				alt21 = 5;
				}
				break;
			case BINARY_LITERATE:
			case DECREMENT:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case INCREMENT:
			case LBRACE:
			case LCURLY:
			case LPAREN:
			case NAN:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case UNDEFINED:
			case 118:
			case 121:
			case 123:
			case 124:
			case 126:
			case 130:
			case 131:
			case 132:
			case 135:
				{
				alt21 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:122:4: importStatement SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(122, 4);
				PushFollow(Follow._importStatement_in_statement887);
				importStatement48=importStatement();
				PopFollow();

				adaptor.AddChild(root_0, importStatement48.Tree);
				DebugLocation(122, 24);
				SEMI49=(IToken)Match(input,SEMI,Follow._SEMI_in_statement889); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:123:4: localVariableDeclaration SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(123, 4);
				PushFollow(Follow._localVariableDeclaration_in_statement895);
				localVariableDeclaration50=localVariableDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, localVariableDeclaration50.Tree);
				DebugLocation(123, 33);
				SEMI51=(IToken)Match(input,SEMI,Follow._SEMI_in_statement897); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:124:4: function_define ( SEMI !)?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(124, 4);
				PushFollow(Follow._function_define_in_statement903);
				function_define52=function_define();
				PopFollow();

				adaptor.AddChild(root_0, function_define52.Tree);
				DebugLocation(124, 24);
				// C:\\work\\ReoScript\\ReoScript.g:124:24: ( SEMI !)?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==SEMI))
				{
					alt18 = 1;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:124:24: SEMI !
					{
					DebugLocation(124, 24);
					SEMI53=(IToken)Match(input,SEMI,Follow._SEMI_in_statement905); 

					}
					break;

				}
				} finally { DebugExitSubRule(18); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:125:4: class_define ( SEMI !)?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(125, 4);
				PushFollow(Follow._class_define_in_statement912);
				class_define54=class_define();
				PopFollow();

				adaptor.AddChild(root_0, class_define54.Tree);
				DebugLocation(125, 21);
				// C:\\work\\ReoScript\\ReoScript.g:125:21: ( SEMI !)?
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==SEMI))
				{
					alt19 = 1;
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:125:21: SEMI !
					{
					DebugLocation(125, 21);
					SEMI55=(IToken)Match(input,SEMI,Follow._SEMI_in_statement914); 

					}
					break;

				}
				} finally { DebugExitSubRule(19); }


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:126:4: tagTemplateDefine ( SEMI !)?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(126, 4);
				PushFollow(Follow._tagTemplateDefine_in_statement921);
				tagTemplateDefine56=tagTemplateDefine();
				PopFollow();

				adaptor.AddChild(root_0, tagTemplateDefine56.Tree);
				DebugLocation(126, 26);
				// C:\\work\\ReoScript\\ReoScript.g:126:26: ( SEMI !)?
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==SEMI))
				{
					alt20 = 1;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:126:26: SEMI !
					{
					DebugLocation(126, 26);
					SEMI57=(IToken)Match(input,SEMI,Follow._SEMI_in_statement923); 

					}
					break;

				}
				} finally { DebugExitSubRule(20); }


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\work\\ReoScript\\ReoScript.g:127:4: embeddedStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(127, 4);
				PushFollow(Follow._embeddedStatement_in_statement930);
				embeddedStatement58=embeddedStatement();
				PopFollow();

				adaptor.AddChild(root_0, embeddedStatement58.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 10);
			LeaveRule("statement", 10);
			LeaveRule_statement();
		}
		DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_importStatement();
	partial void LeaveRule_importStatement();

	// $ANTLR start "importStatement"
	// C:\\work\\ReoScript\\ReoScript.g:130:1: importStatement : 'import' ( namespace -> ^( IMPORT namespace ) | STRING_LITERATE -> ^( IMPORT STRING_LITERATE ) ) ;
	[GrammarRule("importStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> importStatement()
	{
		EnterRule_importStatement();
		EnterRule("importStatement", 11);
		TraceIn("importStatement", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal59 = default(IToken);
		IToken STRING_LITERATE61 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> namespace60 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal59_tree = default(CommonTree);
		CommonTree STRING_LITERATE61_tree = default(CommonTree);
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_STRING_LITERATE=new RewriteRuleITokenStream(adaptor,"token STRING_LITERATE");
		RewriteRuleSubtreeStream stream_namespace=new RewriteRuleSubtreeStream(adaptor,"rule namespace");
		try { DebugEnterRule(GrammarFileName, "importStatement");
		DebugLocation(130, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:131:2: ( 'import' ( namespace -> ^( IMPORT namespace ) | STRING_LITERATE -> ^( IMPORT STRING_LITERATE ) ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:131:4: 'import' ( namespace -> ^( IMPORT namespace ) | STRING_LITERATE -> ^( IMPORT STRING_LITERATE ) )
			{
			DebugLocation(131, 4);
			string_literal59=(IToken)Match(input,127,Follow._127_in_importStatement941);  
			stream_127.Add(string_literal59);

			DebugLocation(132, 3);
			// C:\\work\\ReoScript\\ReoScript.g:132:3: ( namespace -> ^( IMPORT namespace ) | STRING_LITERATE -> ^( IMPORT STRING_LITERATE ) )
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==IDENTIFIER))
			{
				alt22 = 1;
			}
			else if ((LA22_0==STRING_LITERATE))
			{
				alt22 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:133:5: namespace
				{
				DebugLocation(133, 5);
				PushFollow(Follow._namespace_in_importStatement952);
				namespace60=@namespace();
				PopFollow();

				stream_namespace.Add(namespace60.Tree);


				{
				// AST REWRITE
				// elements: namespace
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 133:18: -> ^( IMPORT namespace )
				{
					DebugLocation(133, 21);
					// C:\\work\\ReoScript\\ReoScript.g:133:21: ^( IMPORT namespace )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(133, 23);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPORT, "IMPORT"), root_1);

					DebugLocation(133, 30);
					adaptor.AddChild(root_1, stream_namespace.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:134:5: STRING_LITERATE
				{
				DebugLocation(134, 5);
				STRING_LITERATE61=(IToken)Match(input,STRING_LITERATE,Follow._STRING_LITERATE_in_importStatement969);  
				stream_STRING_LITERATE.Add(STRING_LITERATE61);



				{
				// AST REWRITE
				// elements: STRING_LITERATE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 134:23: -> ^( IMPORT STRING_LITERATE )
				{
					DebugLocation(134, 26);
					// C:\\work\\ReoScript\\ReoScript.g:134:26: ^( IMPORT STRING_LITERATE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(134, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPORT, "IMPORT"), root_1);

					DebugLocation(134, 35);
					adaptor.AddChild(root_1, stream_STRING_LITERATE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("importStatement", 11);
			LeaveRule("importStatement", 11);
			LeaveRule_importStatement();
		}
		DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "importStatement"); }
		return retval;

	}
	// $ANTLR end "importStatement"

	partial void EnterRule_namespace();
	partial void LeaveRule_namespace();

	// $ANTLR start "namespace"
	// C:\\work\\ReoScript\\ReoScript.g:138:1: namespace : IDENTIFIER ( '.' ( IDENTIFIER | '*' ) )* ;
	[GrammarRule("namespace")]
	private AstParserRuleReturnScope<CommonTree, IToken> @namespace()
	{
		EnterRule_namespace();
		EnterRule("namespace", 12);
		TraceIn("namespace", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER62 = default(IToken);
		IToken char_literal63 = default(IToken);
		IToken set64 = default(IToken);

		CommonTree IDENTIFIER62_tree = default(CommonTree);
		CommonTree char_literal63_tree = default(CommonTree);
		CommonTree set64_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "namespace");
		DebugLocation(138, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:139:2: ( IDENTIFIER ( '.' ( IDENTIFIER | '*' ) )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:139:4: IDENTIFIER ( '.' ( IDENTIFIER | '*' ) )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(139, 4);
			IDENTIFIER62=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_namespace994); 
			IDENTIFIER62_tree = (CommonTree)adaptor.Create(IDENTIFIER62);
			adaptor.AddChild(root_0, IDENTIFIER62_tree);
			DebugLocation(139, 15);
			// C:\\work\\ReoScript\\ReoScript.g:139:15: ( '.' ( IDENTIFIER | '*' ) )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==DOT))
				{
					alt23 = 1;
				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:139:16: '.' ( IDENTIFIER | '*' )
					{
					DebugLocation(139, 16);
					char_literal63=(IToken)Match(input,DOT,Follow._DOT_in_namespace997); 
					char_literal63_tree = (CommonTree)adaptor.Create(char_literal63);
					adaptor.AddChild(root_0, char_literal63_tree);
					DebugLocation(139, 20);

					set64=(IToken)input.LT(1);
					if (input.LA(1)==IDENTIFIER||input.LA(1)==MUL)
					{
						input.Consume();
						adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set64));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace", 12);
			LeaveRule("namespace", 12);
			LeaveRule_namespace();
		}
		DebugLocation(140, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace"); }
		return retval;

	}
	// $ANTLR end "namespace"

	partial void EnterRule_embeddedStatement();
	partial void LeaveRule_embeddedStatement();

	// $ANTLR start "embeddedStatement"
	// C:\\work\\ReoScript\\ReoScript.g:142:1: embeddedStatement : ( block | statementExpression SEMI !| ifelse | forStatement | foreachStatement | whileStatement | switchStatement | terminalStatement );
	[GrammarRule("embeddedStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement()
	{
		EnterRule_embeddedStatement();
		EnterRule("embeddedStatement", 13);
		TraceIn("embeddedStatement", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken SEMI67 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> block65 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpression66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ifelse68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forStatement69 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> foreachStatement70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> whileStatement71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchStatement72 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> terminalStatement73 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI67_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "embeddedStatement");
		DebugLocation(142, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:143:2: ( block | statementExpression SEMI !| ifelse | forStatement | foreachStatement | whileStatement | switchStatement | terminalStatement )
			int alt24=8;
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case LCURLY:
				{
				switch (input.LA(2))
				{
				case BINARY_LITERATE:
				case DECREMENT:
				case FALSE:
				case HEX_LITERATE:
				case INCREMENT:
				case LBRACE:
				case LCURLY:
				case LPAREN:
				case NAN:
				case NULL:
				case NUMBER_LITERATE:
				case PRIVATE:
				case PROTECTED:
				case PUBLIC:
				case THIS:
				case TRUE:
				case TYPE:
				case UNDEFINED:
				case 118:
				case 120:
				case 121:
				case 123:
				case 124:
				case 125:
				case 126:
				case 127:
				case 130:
				case 131:
				case 132:
				case 133:
				case 135:
					{
					alt24 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA24_9 = input.LA(3);

					if (((LA24_9>=ASSIGNMENT && LA24_9<=ASSIGN_RSHIFT)||LA24_9==DECREMENT||LA24_9==DOT||LA24_9==INCREMENT||(LA24_9>=LBRACE && LA24_9<=LCURLY)||LA24_9==LPAREN||LA24_9==SEMI||LA24_9==117||LA24_9==129))
					{
						alt24 = 1;
					}
					else if ((LA24_9==COLON))
					{
						alt24 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 24, 9, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case STRING_LITERATE:
					{
					int LA24_10 = input.LA(3);

					if (((LA24_10>=ASSIGNMENT && LA24_10<=ASSIGN_RSHIFT)||LA24_10==DECREMENT||LA24_10==DOT||LA24_10==INCREMENT||(LA24_10>=LBRACE && LA24_10<=LCURLY)||LA24_10==LPAREN||LA24_10==SEMI||LA24_10==129))
					{
						alt24 = 1;
					}
					else if ((LA24_10==COLON))
					{
						alt24 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 24, 10, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case RCURLY:
					{
					switch (input.LA(3))
					{
					case EOF:
					case BINARY_LITERATE:
					case ELSE:
					case FALSE:
					case HEX_LITERATE:
					case IDENTIFIER:
					case LBRACE:
					case LCURLY:
					case LESS_THAN:
					case LPAREN:
					case NAN:
					case NULL:
					case NUMBER_LITERATE:
					case PRIVATE:
					case PROTECTED:
					case PUBLIC:
					case RCURLY:
					case STRING_LITERATE:
					case THIS:
					case TRUE:
					case TYPE:
					case UNDEFINED:
					case 116:
					case 118:
					case 119:
					case 120:
					case 121:
					case 122:
					case 123:
					case 124:
					case 125:
					case 126:
					case 127:
					case 130:
					case 131:
					case 132:
					case 133:
					case 135:
						{
						alt24 = 1;
						}
						break;
					case INCREMENT:
						{
						int LA24_13 = input.LA(4);

						if ((LA24_13==BINARY_LITERATE||LA24_13==FALSE||(LA24_13>=HEX_LITERATE && LA24_13<=IDENTIFIER)||(LA24_13>=LBRACE && LA24_13<=LCURLY)||LA24_13==LPAREN||LA24_13==NAN||(LA24_13>=NULL && LA24_13<=NUMBER_LITERATE)||LA24_13==STRING_LITERATE||(LA24_13>=THIS && LA24_13<=TRUE)||LA24_13==UNDEFINED||LA24_13==125))
						{
							alt24 = 1;
						}
						else if ((LA24_13==SEMI))
						{
							alt24 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 24, 13, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case DECREMENT:
						{
						int LA24_14 = input.LA(4);

						if ((LA24_14==BINARY_LITERATE||LA24_14==FALSE||(LA24_14>=HEX_LITERATE && LA24_14<=IDENTIFIER)||(LA24_14>=LBRACE && LA24_14<=LCURLY)||LA24_14==LPAREN||LA24_14==NAN||(LA24_14>=NULL && LA24_14<=NUMBER_LITERATE)||LA24_14==STRING_LITERATE||(LA24_14>=THIS && LA24_14<=TRUE)||LA24_14==UNDEFINED||LA24_14==125))
						{
							alt24 = 1;
						}
						else if ((LA24_14==SEMI))
						{
							alt24 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 24, 14, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case ASSIGNMENT:
					case ASSIGN_AND:
					case ASSIGN_DIV:
					case ASSIGN_LSHIFT:
					case ASSIGN_MINUS:
					case ASSIGN_MUL:
					case ASSIGN_OR:
					case ASSIGN_PLUS:
					case ASSIGN_REM:
					case ASSIGN_REV:
					case ASSIGN_RSHIFT:
					case DOT:
					case SEMI:
					case 129:
						{
						alt24 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 24, 11, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case COMMA:
					{
					alt24 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 24, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case BINARY_LITERATE:
			case DECREMENT:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case INCREMENT:
			case LBRACE:
			case LPAREN:
			case NAN:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case UNDEFINED:
			case 123:
			case 125:
			case 130:
				{
				alt24 = 2;
				}
				break;
			case 126:
				{
				alt24 = 3;
				}
				break;
			case 124:
				{
				int LA24_4 = input.LA(2);

				if ((LA24_4==LPAREN))
				{
					switch (input.LA(3))
					{
					case TYPE:
						{
						int LA24_15 = input.LA(4);

						if ((LA24_15==IDENTIFIER))
						{
							int LA24_18 = input.LA(5);

							if ((LA24_18==128))
							{
								alt24 = 5;
							}
							else if ((LA24_18==ASSIGNMENT||LA24_18==COMMA||LA24_18==SEMI))
							{
								alt24 = 4;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 24, 18, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 24, 15, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IDENTIFIER:
						{
						int LA24_16 = input.LA(4);

						if (((LA24_16>=ASSIGNMENT && LA24_16<=ASSIGN_RSHIFT)||LA24_16==COMMA||LA24_16==DECREMENT||LA24_16==DOT||LA24_16==INCREMENT||(LA24_16>=LBRACE && LA24_16<=LCURLY)||LA24_16==LPAREN||LA24_16==SEMI||LA24_16==117||LA24_16==129))
						{
							alt24 = 4;
						}
						else if ((LA24_16==128))
						{
							alt24 = 5;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 24, 16, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case BINARY_LITERATE:
					case DECREMENT:
					case FALSE:
					case HEX_LITERATE:
					case INCREMENT:
					case LBRACE:
					case LCURLY:
					case LPAREN:
					case NAN:
					case NULL:
					case NUMBER_LITERATE:
					case SEMI:
					case STRING_LITERATE:
					case THIS:
					case TRUE:
					case UNDEFINED:
					case 123:
					case 125:
					case 130:
						{
						alt24 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 24, 12, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 24, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 135:
				{
				alt24 = 6;
				}
				break;
			case 132:
				{
				alt24 = 7;
				}
				break;
			case 118:
			case 121:
			case 131:
				{
				alt24 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:144:4: block
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(144, 4);
				PushFollow(Follow._block_in_embeddedStatement1020);
				block65=block();
				PopFollow();

				adaptor.AddChild(root_0, block65.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:145:4: statementExpression SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(145, 4);
				PushFollow(Follow._statementExpression_in_embeddedStatement1025);
				statementExpression66=statementExpression();
				PopFollow();

				adaptor.AddChild(root_0, statementExpression66.Tree);
				DebugLocation(145, 28);
				SEMI67=(IToken)Match(input,SEMI,Follow._SEMI_in_embeddedStatement1027); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:146:4: ifelse
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(146, 4);
				PushFollow(Follow._ifelse_in_embeddedStatement1033);
				ifelse68=ifelse();
				PopFollow();

				adaptor.AddChild(root_0, ifelse68.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:147:4: forStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(147, 4);
				PushFollow(Follow._forStatement_in_embeddedStatement1038);
				forStatement69=forStatement();
				PopFollow();

				adaptor.AddChild(root_0, forStatement69.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:148:4: foreachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(148, 4);
				PushFollow(Follow._foreachStatement_in_embeddedStatement1043);
				foreachStatement70=foreachStatement();
				PopFollow();

				adaptor.AddChild(root_0, foreachStatement70.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\work\\ReoScript\\ReoScript.g:149:4: whileStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(149, 4);
				PushFollow(Follow._whileStatement_in_embeddedStatement1048);
				whileStatement71=whileStatement();
				PopFollow();

				adaptor.AddChild(root_0, whileStatement71.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\work\\ReoScript\\ReoScript.g:150:4: switchStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(150, 4);
				PushFollow(Follow._switchStatement_in_embeddedStatement1053);
				switchStatement72=switchStatement();
				PopFollow();

				adaptor.AddChild(root_0, switchStatement72.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\work\\ReoScript\\ReoScript.g:151:4: terminalStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(151, 4);
				PushFollow(Follow._terminalStatement_in_embeddedStatement1058);
				terminalStatement73=terminalStatement();
				PopFollow();

				adaptor.AddChild(root_0, terminalStatement73.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("embeddedStatement", 13);
			LeaveRule("embeddedStatement", 13);
			LeaveRule_embeddedStatement();
		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "embeddedStatement"); }
		return retval;

	}
	// $ANTLR end "embeddedStatement"

	partial void EnterRule_statementExpression();
	partial void LeaveRule_statementExpression();

	// $ANTLR start "statementExpression"
	// C:\\work\\ReoScript\\ReoScript.g:154:1: statementExpression : ( invocationExpression | 'new' primaryExpression -> ^( CREATE primaryExpression ) | 'delete' primaryExpression -> ^( DELETE primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) );
	[GrammarRule("statementExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> statementExpression()
	{
		EnterRule_statementExpression();
		EnterRule("statementExpression", 14);
		TraceIn("statementExpression", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal75 = default(IToken);
		IToken string_literal77 = default(IToken);
		IToken string_literal79 = default(IToken);
		IToken string_literal81 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> invocationExpression74 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression76 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression78 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression80 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression82 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal75_tree = default(CommonTree);
		CommonTree string_literal77_tree = default(CommonTree);
		CommonTree string_literal79_tree = default(CommonTree);
		CommonTree string_literal81_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INCREMENT=new RewriteRuleITokenStream(adaptor,"token INCREMENT");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_DECREMENT=new RewriteRuleITokenStream(adaptor,"token DECREMENT");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "statementExpression");
		DebugLocation(154, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:155:2: ( invocationExpression | 'new' primaryExpression -> ^( CREATE primaryExpression ) | 'delete' primaryExpression -> ^( DELETE primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) )
			int alt25=5;
			try { DebugEnterDecision(25, false);
			switch (input.LA(1))
			{
			case BINARY_LITERATE:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case LBRACE:
			case LCURLY:
			case LPAREN:
			case NAN:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case UNDEFINED:
			case 125:
				{
				alt25 = 1;
				}
				break;
			case 130:
				{
				alt25 = 2;
				}
				break;
			case 123:
				{
				alt25 = 3;
				}
				break;
			case INCREMENT:
				{
				alt25 = 4;
				}
				break;
			case DECREMENT:
				{
				alt25 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:157:2: invocationExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(157, 2);
				PushFollow(Follow._invocationExpression_in_statementExpression1073);
				invocationExpression74=invocationExpression();
				PopFollow();

				adaptor.AddChild(root_0, invocationExpression74.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:158:4: 'new' primaryExpression
				{
				DebugLocation(158, 4);
				string_literal75=(IToken)Match(input,130,Follow._130_in_statementExpression1078);  
				stream_130.Add(string_literal75);

				DebugLocation(158, 10);
				PushFollow(Follow._primaryExpression_in_statementExpression1080);
				primaryExpression76=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression76.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 159:3: -> ^( CREATE primaryExpression )
				{
					DebugLocation(159, 6);
					// C:\\work\\ReoScript\\ReoScript.g:159:6: ^( CREATE primaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(159, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CREATE, "CREATE"), root_1);

					DebugLocation(159, 15);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:160:4: 'delete' primaryExpression
				{
				DebugLocation(160, 4);
				string_literal77=(IToken)Match(input,123,Follow._123_in_statementExpression1095);  
				stream_123.Add(string_literal77);

				DebugLocation(160, 13);
				PushFollow(Follow._primaryExpression_in_statementExpression1097);
				primaryExpression78=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression78.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 161:3: -> ^( DELETE primaryExpression )
				{
					DebugLocation(161, 6);
					// C:\\work\\ReoScript\\ReoScript.g:161:6: ^( DELETE primaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(161, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DELETE, "DELETE"), root_1);

					DebugLocation(161, 15);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:162:4: '++' primaryExpression
				{
				DebugLocation(162, 4);
				string_literal79=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_statementExpression1113);  
				stream_INCREMENT.Add(string_literal79);

				DebugLocation(162, 9);
				PushFollow(Follow._primaryExpression_in_statementExpression1115);
				primaryExpression80=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression80.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression, INCREMENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 163:3: -> ^( PRE_UNARY_STEP primaryExpression '++' )
				{
					DebugLocation(163, 6);
					// C:\\work\\ReoScript\\ReoScript.g:163:6: ^( PRE_UNARY_STEP primaryExpression '++' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(163, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(163, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(163, 41);
					adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:164:4: '--' primaryExpression
				{
				DebugLocation(164, 4);
				string_literal81=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_statementExpression1132);  
				stream_DECREMENT.Add(string_literal81);

				DebugLocation(164, 9);
				PushFollow(Follow._primaryExpression_in_statementExpression1134);
				primaryExpression82=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression82.Tree);


				{
				// AST REWRITE
				// elements: DECREMENT, primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 165:3: -> ^( PRE_UNARY_STEP primaryExpression '--' )
				{
					DebugLocation(165, 6);
					// C:\\work\\ReoScript\\ReoScript.g:165:6: ^( PRE_UNARY_STEP primaryExpression '--' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(165, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(165, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(165, 41);
					adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statementExpression", 14);
			LeaveRule("statementExpression", 14);
			LeaveRule_statementExpression();
		}
		DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "statementExpression"); }
		return retval;

	}
	// $ANTLR end "statementExpression"

	partial void EnterRule_localMemberVariableDeclaration();
	partial void LeaveRule_localMemberVariableDeclaration();

	// $ANTLR start "localMemberVariableDeclaration"
	// C:\\work\\ReoScript\\ReoScript.g:168:1: localMemberVariableDeclaration : ( memberModifier )? TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( MEMBER_DECLARATION ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ^( MEMBER_MODIFIER ( memberModifier )? ) ) ;
	[GrammarRule("localMemberVariableDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> localMemberVariableDeclaration()
	{
		EnterRule_localMemberVariableDeclaration();
		EnterRule("localMemberVariableDeclaration", 15);
		TraceIn("localMemberVariableDeclaration", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken TYPE84 = default(IToken);
		IToken char_literal86 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> memberModifier83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment85 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment87 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree TYPE84_tree = default(CommonTree);
		CommonTree char_literal86_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_memberModifier=new RewriteRuleSubtreeStream(adaptor,"rule memberModifier");
		RewriteRuleSubtreeStream stream_localVariableDeclarationAssignment=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclarationAssignment");
		try { DebugEnterRule(GrammarFileName, "localMemberVariableDeclaration");
		DebugLocation(168, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:169:2: ( ( memberModifier )? TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( MEMBER_DECLARATION ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ^( MEMBER_MODIFIER ( memberModifier )? ) ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:169:4: ( memberModifier )? TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )*
			{
			DebugLocation(169, 4);
			// C:\\work\\ReoScript\\ReoScript.g:169:4: ( memberModifier )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==PRIVATE||(LA26_0>=PROTECTED && LA26_0<=PUBLIC)))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:169:4: memberModifier
				{
				DebugLocation(169, 4);
				PushFollow(Follow._memberModifier_in_localMemberVariableDeclaration1157);
				memberModifier83=memberModifier();
				PopFollow();

				stream_memberModifier.Add(memberModifier83.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(169, 20);
			TYPE84=(IToken)Match(input,TYPE,Follow._TYPE_in_localMemberVariableDeclaration1160);  
			stream_TYPE.Add(TYPE84);

			DebugLocation(169, 25);
			PushFollow(Follow._localVariableDeclarationAssignment_in_localMemberVariableDeclaration1162);
			localVariableDeclarationAssignment85=localVariableDeclarationAssignment();
			PopFollow();

			stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment85.Tree);
			DebugLocation(169, 60);
			// C:\\work\\ReoScript\\ReoScript.g:169:60: ( ',' localVariableDeclarationAssignment )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==COMMA))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:169:61: ',' localVariableDeclarationAssignment
					{
					DebugLocation(169, 61);
					char_literal86=(IToken)Match(input,COMMA,Follow._COMMA_in_localMemberVariableDeclaration1165);  
					stream_COMMA.Add(char_literal86);

					DebugLocation(169, 65);
					PushFollow(Follow._localVariableDeclarationAssignment_in_localMemberVariableDeclaration1167);
					localVariableDeclarationAssignment87=localVariableDeclarationAssignment();
					PopFollow();

					stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment87.Tree);

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }



			{
			// AST REWRITE
			// elements: localVariableDeclarationAssignment, TYPE, memberModifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 170:3: -> ^( MEMBER_DECLARATION ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ^( MEMBER_MODIFIER ( memberModifier )? ) )
			{
				DebugLocation(170, 6);
				// C:\\work\\ReoScript\\ReoScript.g:170:6: ^( MEMBER_DECLARATION ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ^( MEMBER_MODIFIER ( memberModifier )? ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(170, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MEMBER_DECLARATION, "MEMBER_DECLARATION"), root_1);

				DebugLocation(170, 27);
				// C:\\work\\ReoScript\\ReoScript.g:170:27: ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(170, 29);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DECLARATION, "DECLARATION"), root_2);

				DebugLocation(170, 41);
				adaptor.AddChild(root_2, stream_TYPE.NextNode());
				DebugLocation(170, 46);
				if (!(stream_localVariableDeclarationAssignment.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_localVariableDeclarationAssignment.HasNext )
				{
					DebugLocation(170, 46);
					adaptor.AddChild(root_2, stream_localVariableDeclarationAssignment.NextTree());

				}
				stream_localVariableDeclarationAssignment.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(170, 83);
				// C:\\work\\ReoScript\\ReoScript.g:170:83: ^( MEMBER_MODIFIER ( memberModifier )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(170, 85);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MEMBER_MODIFIER, "MEMBER_MODIFIER"), root_2);

				DebugLocation(170, 101);
				// C:\\work\\ReoScript\\ReoScript.g:170:101: ( memberModifier )?
				if (stream_memberModifier.HasNext)
				{
					DebugLocation(170, 101);
					adaptor.AddChild(root_2, stream_memberModifier.NextTree());

				}
				stream_memberModifier.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localMemberVariableDeclaration", 15);
			LeaveRule("localMemberVariableDeclaration", 15);
			LeaveRule_localMemberVariableDeclaration();
		}
		DebugLocation(171, 1);
		} finally { DebugExitRule(GrammarFileName, "localMemberVariableDeclaration"); }
		return retval;

	}
	// $ANTLR end "localMemberVariableDeclaration"

	partial void EnterRule_localVariableDeclaration();
	partial void LeaveRule_localVariableDeclaration();

	// $ANTLR start "localVariableDeclaration"
	// C:\\work\\ReoScript\\ReoScript.g:173:1: localVariableDeclaration : TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ;
	[GrammarRule("localVariableDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration()
	{
		EnterRule_localVariableDeclaration();
		EnterRule("localVariableDeclaration", 16);
		TraceIn("localVariableDeclaration", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken TYPE88 = default(IToken);
		IToken char_literal90 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment91 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree TYPE88_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_localVariableDeclarationAssignment=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclarationAssignment");
		try { DebugEnterRule(GrammarFileName, "localVariableDeclaration");
		DebugLocation(173, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:174:2: ( TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:174:4: TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )*
			{
			DebugLocation(174, 4);
			TYPE88=(IToken)Match(input,TYPE,Follow._TYPE_in_localVariableDeclaration1205);  
			stream_TYPE.Add(TYPE88);

			DebugLocation(174, 9);
			PushFollow(Follow._localVariableDeclarationAssignment_in_localVariableDeclaration1207);
			localVariableDeclarationAssignment89=localVariableDeclarationAssignment();
			PopFollow();

			stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment89.Tree);
			DebugLocation(174, 44);
			// C:\\work\\ReoScript\\ReoScript.g:174:44: ( ',' localVariableDeclarationAssignment )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==COMMA))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:174:45: ',' localVariableDeclarationAssignment
					{
					DebugLocation(174, 45);
					char_literal90=(IToken)Match(input,COMMA,Follow._COMMA_in_localVariableDeclaration1210);  
					stream_COMMA.Add(char_literal90);

					DebugLocation(174, 49);
					PushFollow(Follow._localVariableDeclarationAssignment_in_localVariableDeclaration1212);
					localVariableDeclarationAssignment91=localVariableDeclarationAssignment();
					PopFollow();

					stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment91.Tree);

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }



			{
			// AST REWRITE
			// elements: TYPE, localVariableDeclarationAssignment
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 175:3: -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ )
			{
				DebugLocation(175, 6);
				// C:\\work\\ReoScript\\ReoScript.g:175:6: ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(175, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DECLARATION, "DECLARATION"), root_1);

				DebugLocation(175, 20);
				adaptor.AddChild(root_1, stream_TYPE.NextNode());
				DebugLocation(175, 25);
				if (!(stream_localVariableDeclarationAssignment.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_localVariableDeclarationAssignment.HasNext )
				{
					DebugLocation(175, 25);
					adaptor.AddChild(root_1, stream_localVariableDeclarationAssignment.NextTree());

				}
				stream_localVariableDeclarationAssignment.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclaration", 16);
			LeaveRule("localVariableDeclaration", 16);
			LeaveRule_localVariableDeclaration();
		}
		DebugLocation(176, 1);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclaration"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclaration"

	partial void EnterRule_localVariableDeclarationAssignment();
	partial void LeaveRule_localVariableDeclarationAssignment();

	// $ANTLR start "localVariableDeclarationAssignment"
	// C:\\work\\ReoScript\\ReoScript.g:178:1: localVariableDeclarationAssignment : IDENTIFIER ( '=' expression )? -> ^( LOCAL_DECLARE_ASSIGNMENT IDENTIFIER ( expression )? ) ;
	[GrammarRule("localVariableDeclarationAssignment")]
	private AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment()
	{
		EnterRule_localVariableDeclarationAssignment();
		EnterRule("localVariableDeclarationAssignment", 17);
		TraceIn("localVariableDeclarationAssignment", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER92 = default(IToken);
		IToken char_literal93 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression94 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENTIFIER92_tree = default(CommonTree);
		CommonTree char_literal93_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGNMENT=new RewriteRuleITokenStream(adaptor,"token ASSIGNMENT");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "localVariableDeclarationAssignment");
		DebugLocation(178, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:179:2: ( IDENTIFIER ( '=' expression )? -> ^( LOCAL_DECLARE_ASSIGNMENT IDENTIFIER ( expression )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:179:4: IDENTIFIER ( '=' expression )?
			{
			DebugLocation(179, 4);
			IDENTIFIER92=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_localVariableDeclarationAssignment1238);  
			stream_IDENTIFIER.Add(IDENTIFIER92);

			DebugLocation(179, 15);
			// C:\\work\\ReoScript\\ReoScript.g:179:15: ( '=' expression )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==ASSIGNMENT))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:179:16: '=' expression
				{
				DebugLocation(179, 16);
				char_literal93=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_localVariableDeclarationAssignment1241);  
				stream_ASSIGNMENT.Add(char_literal93);

				DebugLocation(179, 20);
				PushFollow(Follow._expression_in_localVariableDeclarationAssignment1243);
				expression94=expression();
				PopFollow();

				stream_expression.Add(expression94.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(29); }



			{
			// AST REWRITE
			// elements: IDENTIFIER, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 180:3: -> ^( LOCAL_DECLARE_ASSIGNMENT IDENTIFIER ( expression )? )
			{
				DebugLocation(180, 6);
				// C:\\work\\ReoScript\\ReoScript.g:180:6: ^( LOCAL_DECLARE_ASSIGNMENT IDENTIFIER ( expression )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(180, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LOCAL_DECLARE_ASSIGNMENT, "LOCAL_DECLARE_ASSIGNMENT"), root_1);

				DebugLocation(180, 33);
				adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());
				DebugLocation(180, 44);
				// C:\\work\\ReoScript\\ReoScript.g:180:44: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(180, 44);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclarationAssignment", 17);
			LeaveRule("localVariableDeclarationAssignment", 17);
			LeaveRule_localVariableDeclarationAssignment();
		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclarationAssignment"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclarationAssignment"

	partial void EnterRule_memberModifier();
	partial void LeaveRule_memberModifier();

	// $ANTLR start "memberModifier"
	// C:\\work\\ReoScript\\ReoScript.g:183:1: memberModifier : ( 'private' | 'protected' | 'public' );
	[GrammarRule("memberModifier")]
	private AstParserRuleReturnScope<CommonTree, IToken> memberModifier()
	{
		EnterRule_memberModifier();
		EnterRule("memberModifier", 18);
		TraceIn("memberModifier", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set95 = default(IToken);

		CommonTree set95_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "memberModifier");
		DebugLocation(183, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:183:15: ( 'private' | 'protected' | 'public' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(183, 15);

			set95=(IToken)input.LT(1);
			if (input.LA(1)==PRIVATE||(input.LA(1)>=PROTECTED && input.LA(1)<=PUBLIC))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set95));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("memberModifier", 18);
			LeaveRule("memberModifier", 18);
			LeaveRule_memberModifier();
		}
		DebugLocation(185, 1);
		} finally { DebugExitRule(GrammarFileName, "memberModifier"); }
		return retval;

	}
	// $ANTLR end "memberModifier"

	partial void EnterRule_invocationExpression();
	partial void LeaveRule_invocationExpression();

	// $ANTLR start "invocationExpression"
	// C:\\work\\ReoScript\\ReoScript.g:187:1: invocationExpression : id= primaryExpression ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | 'instanceof' expression -> ^( INSTANCEOF expression ) | -> primaryExpression ) ;
	[GrammarRule("invocationExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> invocationExpression()
	{
		EnterRule_invocationExpression();
		EnterRule("invocationExpression", 19);
		TraceIn("invocationExpression", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal96 = default(IToken);
		IToken string_literal98 = default(IToken);
		IToken string_literal100 = default(IToken);
		IToken string_literal102 = default(IToken);
		IToken string_literal104 = default(IToken);
		IToken string_literal106 = default(IToken);
		IToken string_literal108 = default(IToken);
		IToken string_literal110 = default(IToken);
		IToken string_literal112 = default(IToken);
		IToken string_literal114 = default(IToken);
		IToken string_literal116 = default(IToken);
		IToken string_literal118 = default(IToken);
		IToken string_literal119 = default(IToken);
		IToken string_literal120 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> id = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression101 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression103 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression105 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression107 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression109 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression121 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal96_tree = default(CommonTree);
		CommonTree string_literal98_tree = default(CommonTree);
		CommonTree string_literal100_tree = default(CommonTree);
		CommonTree string_literal102_tree = default(CommonTree);
		CommonTree string_literal104_tree = default(CommonTree);
		CommonTree string_literal106_tree = default(CommonTree);
		CommonTree string_literal108_tree = default(CommonTree);
		CommonTree string_literal110_tree = default(CommonTree);
		CommonTree string_literal112_tree = default(CommonTree);
		CommonTree string_literal114_tree = default(CommonTree);
		CommonTree string_literal116_tree = default(CommonTree);
		CommonTree string_literal118_tree = default(CommonTree);
		CommonTree string_literal119_tree = default(CommonTree);
		CommonTree string_literal120_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INCREMENT=new RewriteRuleITokenStream(adaptor,"token INCREMENT");
		RewriteRuleITokenStream stream_ASSIGN_OR=new RewriteRuleITokenStream(adaptor,"token ASSIGN_OR");
		RewriteRuleITokenStream stream_ASSIGN_MUL=new RewriteRuleITokenStream(adaptor,"token ASSIGN_MUL");
		RewriteRuleITokenStream stream_ASSIGN_LSHIFT=new RewriteRuleITokenStream(adaptor,"token ASSIGN_LSHIFT");
		RewriteRuleITokenStream stream_ASSIGN_REM=new RewriteRuleITokenStream(adaptor,"token ASSIGN_REM");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleITokenStream stream_ASSIGN_REV=new RewriteRuleITokenStream(adaptor,"token ASSIGN_REV");
		RewriteRuleITokenStream stream_ASSIGN_AND=new RewriteRuleITokenStream(adaptor,"token ASSIGN_AND");
		RewriteRuleITokenStream stream_ASSIGN_PLUS=new RewriteRuleITokenStream(adaptor,"token ASSIGN_PLUS");
		RewriteRuleITokenStream stream_ASSIGN_RSHIFT=new RewriteRuleITokenStream(adaptor,"token ASSIGN_RSHIFT");
		RewriteRuleITokenStream stream_ASSIGNMENT=new RewriteRuleITokenStream(adaptor,"token ASSIGNMENT");
		RewriteRuleITokenStream stream_DECREMENT=new RewriteRuleITokenStream(adaptor,"token DECREMENT");
		RewriteRuleITokenStream stream_ASSIGN_MINUS=new RewriteRuleITokenStream(adaptor,"token ASSIGN_MINUS");
		RewriteRuleITokenStream stream_ASSIGN_DIV=new RewriteRuleITokenStream(adaptor,"token ASSIGN_DIV");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "invocationExpression");
		DebugLocation(187, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:188:2: (id= primaryExpression ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | 'instanceof' expression -> ^( INSTANCEOF expression ) | -> primaryExpression ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:189:4: id= primaryExpression ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | 'instanceof' expression -> ^( INSTANCEOF expression ) | -> primaryExpression )
			{
			DebugLocation(189, 6);
			PushFollow(Follow._primaryExpression_in_invocationExpression1294);
			id=primaryExpression();
			PopFollow();

			stream_primaryExpression.Add(id.Tree);
			DebugLocation(190, 4);
			// C:\\work\\ReoScript\\ReoScript.g:190:4: ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | 'instanceof' expression -> ^( INSTANCEOF expression ) | -> primaryExpression )
			int alt30=15;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			switch (input.LA(1))
			{
			case ASSIGNMENT:
				{
				alt30 = 1;
				}
				break;
			case ASSIGN_PLUS:
				{
				alt30 = 2;
				}
				break;
			case ASSIGN_MINUS:
				{
				alt30 = 3;
				}
				break;
			case ASSIGN_MUL:
				{
				alt30 = 4;
				}
				break;
			case ASSIGN_DIV:
				{
				alt30 = 5;
				}
				break;
			case ASSIGN_REM:
				{
				alt30 = 6;
				}
				break;
			case ASSIGN_AND:
				{
				alt30 = 7;
				}
				break;
			case ASSIGN_OR:
				{
				alt30 = 8;
				}
				break;
			case ASSIGN_REV:
				{
				alt30 = 9;
				}
				break;
			case ASSIGN_LSHIFT:
				{
				alt30 = 10;
				}
				break;
			case ASSIGN_RSHIFT:
				{
				alt30 = 11;
				}
				break;
			case INCREMENT:
				{
				alt30 = 12;
				}
				break;
			case DECREMENT:
				{
				alt30 = 13;
				}
				break;
			case 129:
				{
				alt30 = 14;
				}
				break;
			case COMMA:
			case RPAREN:
			case SEMI:
				{
				alt30 = 15;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:191:5: '=' expression
				{
				DebugLocation(191, 5);
				char_literal96=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_invocationExpression1305);  
				stream_ASSIGNMENT.Add(char_literal96);

				DebugLocation(191, 9);
				PushFollow(Follow._expression_in_invocationExpression1307);
				expression97=expression();
				PopFollow();

				stream_expression.Add(expression97.Tree);


				{
				// AST REWRITE
				// elements: expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 191:21: -> ^( ASSIGNMENT $id expression )
				{
					DebugLocation(191, 24);
					// C:\\work\\ReoScript\\ReoScript.g:191:24: ^( ASSIGNMENT $id expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(191, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(191, 38);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(191, 41);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:192:6: '+=' expression
				{
				DebugLocation(192, 6);
				string_literal98=(IToken)Match(input,ASSIGN_PLUS,Follow._ASSIGN_PLUS_in_invocationExpression1326);  
				stream_ASSIGN_PLUS.Add(string_literal98);

				DebugLocation(192, 11);
				PushFollow(Follow._expression_in_invocationExpression1328);
				expression99=expression();
				PopFollow();

				stream_expression.Add(expression99.Tree);


				{
				// AST REWRITE
				// elements: expression, id, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 192:23: -> ^( ASSIGNMENT $id ^( PLUS $id expression ) )
				{
					DebugLocation(192, 26);
					// C:\\work\\ReoScript\\ReoScript.g:192:26: ^( ASSIGNMENT $id ^( PLUS $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(192, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(192, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(192, 43);
					// C:\\work\\ReoScript\\ReoScript.g:192:43: ^( PLUS $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(192, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PLUS, "PLUS"), root_2);

					DebugLocation(192, 51);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(192, 54);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:193:6: '-=' expression
				{
				DebugLocation(193, 6);
				string_literal100=(IToken)Match(input,ASSIGN_MINUS,Follow._ASSIGN_MINUS_in_invocationExpression1354);  
				stream_ASSIGN_MINUS.Add(string_literal100);

				DebugLocation(193, 11);
				PushFollow(Follow._expression_in_invocationExpression1356);
				expression101=expression();
				PopFollow();

				stream_expression.Add(expression101.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 193:23: -> ^( ASSIGNMENT $id ^( MINUS $id expression ) )
				{
					DebugLocation(193, 26);
					// C:\\work\\ReoScript\\ReoScript.g:193:26: ^( ASSIGNMENT $id ^( MINUS $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(193, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(193, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(193, 43);
					// C:\\work\\ReoScript\\ReoScript.g:193:43: ^( MINUS $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(193, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MINUS, "MINUS"), root_2);

					DebugLocation(193, 52);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(193, 55);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:194:6: '*=' expression
				{
				DebugLocation(194, 6);
				string_literal102=(IToken)Match(input,ASSIGN_MUL,Follow._ASSIGN_MUL_in_invocationExpression1382);  
				stream_ASSIGN_MUL.Add(string_literal102);

				DebugLocation(194, 11);
				PushFollow(Follow._expression_in_invocationExpression1384);
				expression103=expression();
				PopFollow();

				stream_expression.Add(expression103.Tree);


				{
				// AST REWRITE
				// elements: id, id, expression
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 194:23: -> ^( ASSIGNMENT $id ^( MUL $id expression ) )
				{
					DebugLocation(194, 26);
					// C:\\work\\ReoScript\\ReoScript.g:194:26: ^( ASSIGNMENT $id ^( MUL $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(194, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(194, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(194, 43);
					// C:\\work\\ReoScript\\ReoScript.g:194:43: ^( MUL $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(194, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MUL, "MUL"), root_2);

					DebugLocation(194, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(194, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:195:6: '/=' expression
				{
				DebugLocation(195, 6);
				string_literal104=(IToken)Match(input,ASSIGN_DIV,Follow._ASSIGN_DIV_in_invocationExpression1410);  
				stream_ASSIGN_DIV.Add(string_literal104);

				DebugLocation(195, 11);
				PushFollow(Follow._expression_in_invocationExpression1412);
				expression105=expression();
				PopFollow();

				stream_expression.Add(expression105.Tree);


				{
				// AST REWRITE
				// elements: id, id, expression
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 195:23: -> ^( ASSIGNMENT $id ^( DIV $id expression ) )
				{
					DebugLocation(195, 26);
					// C:\\work\\ReoScript\\ReoScript.g:195:26: ^( ASSIGNMENT $id ^( DIV $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(195, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(195, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(195, 43);
					// C:\\work\\ReoScript\\ReoScript.g:195:43: ^( DIV $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(195, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DIV, "DIV"), root_2);

					DebugLocation(195, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(195, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\work\\ReoScript\\ReoScript.g:196:6: '%=' expression
				{
				DebugLocation(196, 6);
				string_literal106=(IToken)Match(input,ASSIGN_REM,Follow._ASSIGN_REM_in_invocationExpression1438);  
				stream_ASSIGN_REM.Add(string_literal106);

				DebugLocation(196, 11);
				PushFollow(Follow._expression_in_invocationExpression1440);
				expression107=expression();
				PopFollow();

				stream_expression.Add(expression107.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 196:23: -> ^( ASSIGNMENT $id ^( MOD $id expression ) )
				{
					DebugLocation(196, 26);
					// C:\\work\\ReoScript\\ReoScript.g:196:26: ^( ASSIGNMENT $id ^( MOD $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(196, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(196, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(196, 43);
					// C:\\work\\ReoScript\\ReoScript.g:196:43: ^( MOD $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(196, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MOD, "MOD"), root_2);

					DebugLocation(196, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(196, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\work\\ReoScript\\ReoScript.g:197:6: '&=' expression
				{
				DebugLocation(197, 6);
				string_literal108=(IToken)Match(input,ASSIGN_AND,Follow._ASSIGN_AND_in_invocationExpression1466);  
				stream_ASSIGN_AND.Add(string_literal108);

				DebugLocation(197, 11);
				PushFollow(Follow._expression_in_invocationExpression1468);
				expression109=expression();
				PopFollow();

				stream_expression.Add(expression109.Tree);


				{
				// AST REWRITE
				// elements: id, id, expression
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 197:23: -> ^( ASSIGNMENT $id ^( AND $id expression ) )
				{
					DebugLocation(197, 26);
					// C:\\work\\ReoScript\\ReoScript.g:197:26: ^( ASSIGNMENT $id ^( AND $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(197, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(197, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(197, 43);
					// C:\\work\\ReoScript\\ReoScript.g:197:43: ^( AND $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(197, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(AND, "AND"), root_2);

					DebugLocation(197, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(197, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\work\\ReoScript\\ReoScript.g:198:6: '|=' expression
				{
				DebugLocation(198, 6);
				string_literal110=(IToken)Match(input,ASSIGN_OR,Follow._ASSIGN_OR_in_invocationExpression1494);  
				stream_ASSIGN_OR.Add(string_literal110);

				DebugLocation(198, 11);
				PushFollow(Follow._expression_in_invocationExpression1496);
				expression111=expression();
				PopFollow();

				stream_expression.Add(expression111.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 198:23: -> ^( ASSIGNMENT $id ^( OR $id expression ) )
				{
					DebugLocation(198, 26);
					// C:\\work\\ReoScript\\ReoScript.g:198:26: ^( ASSIGNMENT $id ^( OR $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(198, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(198, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(198, 43);
					// C:\\work\\ReoScript\\ReoScript.g:198:43: ^( OR $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(198, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(OR, "OR"), root_2);

					DebugLocation(198, 49);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(198, 52);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\work\\ReoScript\\ReoScript.g:199:6: '^=' expression
				{
				DebugLocation(199, 6);
				string_literal112=(IToken)Match(input,ASSIGN_REV,Follow._ASSIGN_REV_in_invocationExpression1522);  
				stream_ASSIGN_REV.Add(string_literal112);

				DebugLocation(199, 11);
				PushFollow(Follow._expression_in_invocationExpression1524);
				expression113=expression();
				PopFollow();

				stream_expression.Add(expression113.Tree);


				{
				// AST REWRITE
				// elements: expression, id, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 199:23: -> ^( ASSIGNMENT $id ^( XOR $id expression ) )
				{
					DebugLocation(199, 26);
					// C:\\work\\ReoScript\\ReoScript.g:199:26: ^( ASSIGNMENT $id ^( XOR $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(199, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(199, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(199, 43);
					// C:\\work\\ReoScript\\ReoScript.g:199:43: ^( XOR $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(199, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(XOR, "XOR"), root_2);

					DebugLocation(199, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(199, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\work\\ReoScript\\ReoScript.g:200:6: '<<=' expression
				{
				DebugLocation(200, 6);
				string_literal114=(IToken)Match(input,ASSIGN_LSHIFT,Follow._ASSIGN_LSHIFT_in_invocationExpression1550);  
				stream_ASSIGN_LSHIFT.Add(string_literal114);

				DebugLocation(200, 12);
				PushFollow(Follow._expression_in_invocationExpression1552);
				expression115=expression();
				PopFollow();

				stream_expression.Add(expression115.Tree);


				{
				// AST REWRITE
				// elements: id, id, expression
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 200:23: -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) )
				{
					DebugLocation(200, 26);
					// C:\\work\\ReoScript\\ReoScript.g:200:26: ^( ASSIGNMENT $id ^( LSHIFT $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(200, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(200, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(200, 43);
					// C:\\work\\ReoScript\\ReoScript.g:200:43: ^( LSHIFT $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(200, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LSHIFT, "LSHIFT"), root_2);

					DebugLocation(200, 53);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(200, 56);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\work\\ReoScript\\ReoScript.g:201:6: '>>=' expression
				{
				DebugLocation(201, 6);
				string_literal116=(IToken)Match(input,ASSIGN_RSHIFT,Follow._ASSIGN_RSHIFT_in_invocationExpression1577);  
				stream_ASSIGN_RSHIFT.Add(string_literal116);

				DebugLocation(201, 12);
				PushFollow(Follow._expression_in_invocationExpression1579);
				expression117=expression();
				PopFollow();

				stream_expression.Add(expression117.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 201:23: -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) )
				{
					DebugLocation(201, 26);
					// C:\\work\\ReoScript\\ReoScript.g:201:26: ^( ASSIGNMENT $id ^( RSHIFT $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(201, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(201, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(201, 43);
					// C:\\work\\ReoScript\\ReoScript.g:201:43: ^( RSHIFT $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(201, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RSHIFT, "RSHIFT"), root_2);

					DebugLocation(201, 53);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(201, 56);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\work\\ReoScript\\ReoScript.g:202:6: '++'
				{
				DebugLocation(202, 6);
				string_literal118=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_invocationExpression1604);  
				stream_INCREMENT.Add(string_literal118);



				{
				// AST REWRITE
				// elements: INCREMENT, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 202:14: -> ^( POST_UNARY_STEP $id '++' )
				{
					DebugLocation(202, 17);
					// C:\\work\\ReoScript\\ReoScript.g:202:17: ^( POST_UNARY_STEP $id '++' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(202, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

					DebugLocation(202, 36);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(202, 39);
					adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\work\\ReoScript\\ReoScript.g:203:6: '--'
				{
				DebugLocation(203, 6);
				string_literal119=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_invocationExpression1625);  
				stream_DECREMENT.Add(string_literal119);



				{
				// AST REWRITE
				// elements: DECREMENT, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 203:14: -> ^( POST_UNARY_STEP $id '--' )
				{
					DebugLocation(203, 17);
					// C:\\work\\ReoScript\\ReoScript.g:203:17: ^( POST_UNARY_STEP $id '--' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(203, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

					DebugLocation(203, 36);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(203, 39);
					adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\work\\ReoScript\\ReoScript.g:204:6: 'instanceof' expression
				{
				DebugLocation(204, 6);
				string_literal120=(IToken)Match(input,129,Follow._129_in_invocationExpression1646);  
				stream_129.Add(string_literal120);

				DebugLocation(204, 19);
				PushFollow(Follow._expression_in_invocationExpression1648);
				expression121=expression();
				PopFollow();

				stream_expression.Add(expression121.Tree);


				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 204:30: -> ^( INSTANCEOF expression )
				{
					DebugLocation(204, 33);
					// C:\\work\\ReoScript\\ReoScript.g:204:33: ^( INSTANCEOF expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(204, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSTANCEOF, "INSTANCEOF"), root_1);

					DebugLocation(204, 46);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\work\\ReoScript\\ReoScript.g:205:11: 
				{

				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 205:11: -> primaryExpression
				{
					DebugLocation(205, 14);
					adaptor.AddChild(root_0, stream_primaryExpression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invocationExpression", 19);
			LeaveRule("invocationExpression", 19);
			LeaveRule_invocationExpression();
		}
		DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "invocationExpression"); }
		return retval;

	}
	// $ANTLR end "invocationExpression"

	partial void EnterRule_statementExpressionList();
	partial void LeaveRule_statementExpressionList();

	// $ANTLR start "statementExpressionList"
	// C:\\work\\ReoScript\\ReoScript.g:209:1: statementExpressionList : statementExpression ( COMMA ! statementExpression )* ;
	[GrammarRule("statementExpressionList")]
	private AstParserRuleReturnScope<CommonTree, IToken> statementExpressionList()
	{
		EnterRule_statementExpressionList();
		EnterRule("statementExpressionList", 20);
		TraceIn("statementExpressionList", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA123 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpression122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpression124 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA123_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "statementExpressionList");
		DebugLocation(209, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:210:2: ( statementExpression ( COMMA ! statementExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:210:4: statementExpression ( COMMA ! statementExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(210, 4);
			PushFollow(Follow._statementExpression_in_statementExpressionList1686);
			statementExpression122=statementExpression();
			PopFollow();

			adaptor.AddChild(root_0, statementExpression122.Tree);
			DebugLocation(210, 24);
			// C:\\work\\ReoScript\\ReoScript.g:210:24: ( COMMA ! statementExpression )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==COMMA))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:210:25: COMMA ! statementExpression
					{
					DebugLocation(210, 30);
					COMMA123=(IToken)Match(input,COMMA,Follow._COMMA_in_statementExpressionList1689); 
					DebugLocation(210, 32);
					PushFollow(Follow._statementExpression_in_statementExpressionList1692);
					statementExpression124=statementExpression();
					PopFollow();

					adaptor.AddChild(root_0, statementExpression124.Tree);

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statementExpressionList", 20);
			LeaveRule("statementExpressionList", 20);
			LeaveRule_statementExpressionList();
		}
		DebugLocation(211, 1);
		} finally { DebugExitRule(GrammarFileName, "statementExpressionList"); }
		return retval;

	}
	// $ANTLR end "statementExpressionList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// C:\\work\\ReoScript\\ReoScript.g:214:1: public expression : ( tag | assignmentExpression ( EOF !)? );
	[GrammarRule("expression")]
	public AstParserRuleReturnScope<CommonTree, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 21);
		TraceIn("expression", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken EOF127 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> tag125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression126 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EOF127_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(214, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:215:2: ( tag | assignmentExpression ( EOF !)? )
			int alt33=2;
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==LESS_THAN))
			{
				alt33 = 1;
			}
			else if ((LA33_0==BINARY_LITERATE||LA33_0==DECREMENT||LA33_0==FALSE||(LA33_0>=HEX_LITERATE && LA33_0<=IDENTIFIER)||LA33_0==INCREMENT||(LA33_0>=LBRACE && LA33_0<=LCURLY)||LA33_0==LPAREN||LA33_0==MINUS||LA33_0==NAN||LA33_0==NOT||(LA33_0>=NULL && LA33_0<=NUMBER_LITERATE)||LA33_0==PLUS||LA33_0==STRING_LITERATE||(LA33_0>=THIS && LA33_0<=TRUE)||LA33_0==UNDEFINED||LA33_0==125||LA33_0==130||LA33_0==134||LA33_0==136))
			{
				alt33 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:219:4: tag
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(219, 4);
				PushFollow(Follow._tag_in_expression1717);
				tag125=tag();
				PopFollow();

				adaptor.AddChild(root_0, tag125.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:220:4: assignmentExpression ( EOF !)?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(220, 4);
				PushFollow(Follow._assignmentExpression_in_expression1723);
				assignmentExpression126=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, assignmentExpression126.Tree);
				DebugLocation(220, 28);
				// C:\\work\\ReoScript\\ReoScript.g:220:28: ( EOF !)?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==EOF))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:220:28: EOF !
					{
					DebugLocation(220, 28);
					EOF127=(IToken)Match(input,EOF,Follow._EOF_in_expression1725); 

					}
					break;

				}
				} finally { DebugExitSubRule(32); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 21);
			LeaveRule("expression", 21);
			LeaveRule_expression();
		}
		DebugLocation(221, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_expressionList();
	partial void LeaveRule_expressionList();

	// $ANTLR start "expressionList"
	// C:\\work\\ReoScript\\ReoScript.g:223:1: expressionList : expression ( COMMA ! expression )* ;
	[GrammarRule("expressionList")]
	private AstParserRuleReturnScope<CommonTree, IToken> expressionList()
	{
		EnterRule_expressionList();
		EnterRule("expressionList", 22);
		TraceIn("expressionList", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA129 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression128 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression130 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA129_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expressionList");
		DebugLocation(223, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:224:2: ( expression ( COMMA ! expression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:224:4: expression ( COMMA ! expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(224, 4);
			PushFollow(Follow._expression_in_expressionList1739);
			expression128=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression128.Tree);
			DebugLocation(224, 15);
			// C:\\work\\ReoScript\\ReoScript.g:224:15: ( COMMA ! expression )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0==COMMA))
				{
					int LA34_2 = input.LA(2);

					if ((LA34_2==BINARY_LITERATE||LA34_2==DECREMENT||LA34_2==FALSE||(LA34_2>=HEX_LITERATE && LA34_2<=IDENTIFIER)||LA34_2==INCREMENT||(LA34_2>=LBRACE && LA34_2<=LCURLY)||LA34_2==LESS_THAN||LA34_2==LPAREN||LA34_2==MINUS||LA34_2==NAN||LA34_2==NOT||(LA34_2>=NULL && LA34_2<=NUMBER_LITERATE)||LA34_2==PLUS||LA34_2==STRING_LITERATE||(LA34_2>=THIS && LA34_2<=TRUE)||LA34_2==UNDEFINED||LA34_2==125||LA34_2==130||LA34_2==134||LA34_2==136))
					{
						alt34 = 1;
					}


				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:224:16: COMMA ! expression
					{
					DebugLocation(224, 21);
					COMMA129=(IToken)Match(input,COMMA,Follow._COMMA_in_expressionList1742); 
					DebugLocation(224, 23);
					PushFollow(Follow._expression_in_expressionList1745);
					expression130=expression();
					PopFollow();

					adaptor.AddChild(root_0, expression130.Tree);

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionList", 22);
			LeaveRule("expressionList", 22);
			LeaveRule_expressionList();
		}
		DebugLocation(225, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionList"); }
		return retval;

	}
	// $ANTLR end "expressionList"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();

	// $ANTLR start "assignmentExpression"
	// C:\\work\\ReoScript\\ReoScript.g:227:1: assignmentExpression : conditionalExpression ( ASSIGNMENT ^ expression )? ;
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 23);
		TraceIn("assignmentExpression", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken ASSIGNMENT132 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression133 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSIGNMENT132_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(227, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:228:2: ( conditionalExpression ( ASSIGNMENT ^ expression )? )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:228:4: conditionalExpression ( ASSIGNMENT ^ expression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(228, 4);
			PushFollow(Follow._conditionalExpression_in_assignmentExpression1759);
			conditionalExpression131=conditionalExpression();
			PopFollow();

			adaptor.AddChild(root_0, conditionalExpression131.Tree);
			DebugLocation(228, 26);
			// C:\\work\\ReoScript\\ReoScript.g:228:26: ( ASSIGNMENT ^ expression )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==ASSIGNMENT))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:228:27: ASSIGNMENT ^ expression
				{
				DebugLocation(228, 37);
				ASSIGNMENT132=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_assignmentExpression1762); 
				ASSIGNMENT132_tree = (CommonTree)adaptor.Create(ASSIGNMENT132);
				root_0 = (CommonTree)adaptor.BecomeRoot(ASSIGNMENT132_tree, root_0);
				DebugLocation(228, 39);
				PushFollow(Follow._expression_in_assignmentExpression1765);
				expression133=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression133.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(35); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 23);
			LeaveRule("assignmentExpression", 23);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();

	// $ANTLR start "conditionalExpression"
	// C:\\work\\ReoScript\\ReoScript.g:231:1: conditionalExpression : conditionalOrExpression ( CONDITION ^ expression COLON ! expression )? ;
	[GrammarRule("conditionalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 24);
		TraceIn("conditionalExpression", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken CONDITION135 = default(IToken);
		IToken COLON137 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression134 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression136 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression138 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree CONDITION135_tree = default(CommonTree);
		CommonTree COLON137_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(231, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:232:2: ( conditionalOrExpression ( CONDITION ^ expression COLON ! expression )? )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:232:4: conditionalOrExpression ( CONDITION ^ expression COLON ! expression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(232, 4);
			PushFollow(Follow._conditionalOrExpression_in_conditionalExpression1779);
			conditionalOrExpression134=conditionalOrExpression();
			PopFollow();

			adaptor.AddChild(root_0, conditionalOrExpression134.Tree);
			DebugLocation(232, 28);
			// C:\\work\\ReoScript\\ReoScript.g:232:28: ( CONDITION ^ expression COLON ! expression )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==CONDITION))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:232:29: CONDITION ^ expression COLON ! expression
				{
				DebugLocation(232, 38);
				CONDITION135=(IToken)Match(input,CONDITION,Follow._CONDITION_in_conditionalExpression1782); 
				CONDITION135_tree = (CommonTree)adaptor.Create(CONDITION135);
				root_0 = (CommonTree)adaptor.BecomeRoot(CONDITION135_tree, root_0);
				DebugLocation(232, 40);
				PushFollow(Follow._expression_in_conditionalExpression1785);
				expression136=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression136.Tree);
				DebugLocation(232, 56);
				COLON137=(IToken)Match(input,COLON,Follow._COLON_in_conditionalExpression1787); 
				DebugLocation(232, 58);
				PushFollow(Follow._expression_in_conditionalExpression1790);
				expression138=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression138.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpression", 24);
			LeaveRule("conditionalExpression", 24);
			LeaveRule_conditionalExpression();
		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_conditionalOrExpression();
	partial void LeaveRule_conditionalOrExpression();

	// $ANTLR start "conditionalOrExpression"
	// C:\\work\\ReoScript\\ReoScript.g:235:1: conditionalOrExpression : conditionalAndExpression ( LOGICAL_OR ^ conditionalAndExpression )* ;
	[GrammarRule("conditionalOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression()
	{
		EnterRule_conditionalOrExpression();
		EnterRule("conditionalOrExpression", 25);
		TraceIn("conditionalOrExpression", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_OR140 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalAndExpression139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalAndExpression141 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_OR140_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalOrExpression");
		DebugLocation(235, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:236:2: ( conditionalAndExpression ( LOGICAL_OR ^ conditionalAndExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:236:4: conditionalAndExpression ( LOGICAL_OR ^ conditionalAndExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(236, 4);
			PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression1803);
			conditionalAndExpression139=conditionalAndExpression();
			PopFollow();

			adaptor.AddChild(root_0, conditionalAndExpression139.Tree);
			DebugLocation(236, 29);
			// C:\\work\\ReoScript\\ReoScript.g:236:29: ( LOGICAL_OR ^ conditionalAndExpression )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==LOGICAL_OR))
				{
					alt37 = 1;
				}


				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:236:30: LOGICAL_OR ^ conditionalAndExpression
					{
					DebugLocation(236, 40);
					LOGICAL_OR140=(IToken)Match(input,LOGICAL_OR,Follow._LOGICAL_OR_in_conditionalOrExpression1806); 
					LOGICAL_OR140_tree = (CommonTree)adaptor.Create(LOGICAL_OR140);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_OR140_tree, root_0);
					DebugLocation(236, 42);
					PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression1809);
					conditionalAndExpression141=conditionalAndExpression();
					PopFollow();

					adaptor.AddChild(root_0, conditionalAndExpression141.Tree);

					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalOrExpression", 25);
			LeaveRule("conditionalOrExpression", 25);
			LeaveRule_conditionalOrExpression();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalOrExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalOrExpression"

	partial void EnterRule_conditionalAndExpression();
	partial void LeaveRule_conditionalAndExpression();

	// $ANTLR start "conditionalAndExpression"
	// C:\\work\\ReoScript\\ReoScript.g:239:1: conditionalAndExpression : inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* ;
	[GrammarRule("conditionalAndExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalAndExpression()
	{
		EnterRule_conditionalAndExpression();
		EnterRule("conditionalAndExpression", 26);
		TraceIn("conditionalAndExpression", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_AND143 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression144 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_AND143_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalAndExpression");
		DebugLocation(239, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:240:2: ( inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:240:4: inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(240, 4);
			PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression1822);
			inclusiveOrExpression142=inclusiveOrExpression();
			PopFollow();

			adaptor.AddChild(root_0, inclusiveOrExpression142.Tree);
			DebugLocation(240, 26);
			// C:\\work\\ReoScript\\ReoScript.g:240:26: ( LOGICAL_AND ^ inclusiveOrExpression )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if ((LA38_0==LOGICAL_AND))
				{
					alt38 = 1;
				}


				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:240:27: LOGICAL_AND ^ inclusiveOrExpression
					{
					DebugLocation(240, 38);
					LOGICAL_AND143=(IToken)Match(input,LOGICAL_AND,Follow._LOGICAL_AND_in_conditionalAndExpression1825); 
					LOGICAL_AND143_tree = (CommonTree)adaptor.Create(LOGICAL_AND143);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_AND143_tree, root_0);
					DebugLocation(240, 40);
					PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression1828);
					inclusiveOrExpression144=inclusiveOrExpression();
					PopFollow();

					adaptor.AddChild(root_0, inclusiveOrExpression144.Tree);

					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalAndExpression", 26);
			LeaveRule("conditionalAndExpression", 26);
			LeaveRule_conditionalAndExpression();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalAndExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalAndExpression"

	partial void EnterRule_inclusiveOrExpression();
	partial void LeaveRule_inclusiveOrExpression();

	// $ANTLR start "inclusiveOrExpression"
	// C:\\work\\ReoScript\\ReoScript.g:243:1: inclusiveOrExpression : exclusiveOrExpression ( OR ^ exclusiveOrExpression )* ;
	[GrammarRule("inclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression()
	{
		EnterRule_inclusiveOrExpression();
		EnterRule("inclusiveOrExpression", 27);
		TraceIn("inclusiveOrExpression", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken OR146 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression145 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression147 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree OR146_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "inclusiveOrExpression");
		DebugLocation(243, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:244:2: ( exclusiveOrExpression ( OR ^ exclusiveOrExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:244:4: exclusiveOrExpression ( OR ^ exclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(244, 4);
			PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression1843);
			exclusiveOrExpression145=exclusiveOrExpression();
			PopFollow();

			adaptor.AddChild(root_0, exclusiveOrExpression145.Tree);
			DebugLocation(244, 26);
			// C:\\work\\ReoScript\\ReoScript.g:244:26: ( OR ^ exclusiveOrExpression )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==OR))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:244:27: OR ^ exclusiveOrExpression
					{
					DebugLocation(244, 29);
					OR146=(IToken)Match(input,OR,Follow._OR_in_inclusiveOrExpression1846); 
					OR146_tree = (CommonTree)adaptor.Create(OR146);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR146_tree, root_0);
					DebugLocation(244, 31);
					PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression1849);
					exclusiveOrExpression147=exclusiveOrExpression();
					PopFollow();

					adaptor.AddChild(root_0, exclusiveOrExpression147.Tree);

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusiveOrExpression", 27);
			LeaveRule("inclusiveOrExpression", 27);
			LeaveRule_inclusiveOrExpression();
		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "inclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "inclusiveOrExpression"

	partial void EnterRule_exclusiveOrExpression();
	partial void LeaveRule_exclusiveOrExpression();

	// $ANTLR start "exclusiveOrExpression"
	// C:\\work\\ReoScript\\ReoScript.g:247:1: exclusiveOrExpression : andExpression ( XOR ^ andExpression )* ;
	[GrammarRule("exclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression()
	{
		EnterRule_exclusiveOrExpression();
		EnterRule("exclusiveOrExpression", 28);
		TraceIn("exclusiveOrExpression", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken XOR149 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression148 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression150 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree XOR149_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "exclusiveOrExpression");
		DebugLocation(247, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:248:2: ( andExpression ( XOR ^ andExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:248:4: andExpression ( XOR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(248, 4);
			PushFollow(Follow._andExpression_in_exclusiveOrExpression1863);
			andExpression148=andExpression();
			PopFollow();

			adaptor.AddChild(root_0, andExpression148.Tree);
			DebugLocation(248, 18);
			// C:\\work\\ReoScript\\ReoScript.g:248:18: ( XOR ^ andExpression )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==XOR))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:248:19: XOR ^ andExpression
					{
					DebugLocation(248, 22);
					XOR149=(IToken)Match(input,XOR,Follow._XOR_in_exclusiveOrExpression1866); 
					XOR149_tree = (CommonTree)adaptor.Create(XOR149);
					root_0 = (CommonTree)adaptor.BecomeRoot(XOR149_tree, root_0);
					DebugLocation(248, 24);
					PushFollow(Follow._andExpression_in_exclusiveOrExpression1869);
					andExpression150=andExpression();
					PopFollow();

					adaptor.AddChild(root_0, andExpression150.Tree);

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusiveOrExpression", 28);
			LeaveRule("exclusiveOrExpression", 28);
			LeaveRule_exclusiveOrExpression();
		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "exclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "exclusiveOrExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();

	// $ANTLR start "andExpression"
	// C:\\work\\ReoScript\\ReoScript.g:251:1: andExpression : equalityExpression ( AND ^ equalityExpression )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 29);
		TraceIn("andExpression", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken AND152 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> equalityExpression151 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> equalityExpression153 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree AND152_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(251, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:252:2: ( equalityExpression ( AND ^ equalityExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:252:4: equalityExpression ( AND ^ equalityExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(252, 4);
			PushFollow(Follow._equalityExpression_in_andExpression1883);
			equalityExpression151=equalityExpression();
			PopFollow();

			adaptor.AddChild(root_0, equalityExpression151.Tree);
			DebugLocation(252, 23);
			// C:\\work\\ReoScript\\ReoScript.g:252:23: ( AND ^ equalityExpression )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==AND))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:252:24: AND ^ equalityExpression
					{
					DebugLocation(252, 27);
					AND152=(IToken)Match(input,AND,Follow._AND_in_andExpression1886); 
					AND152_tree = (CommonTree)adaptor.Create(AND152);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND152_tree, root_0);
					DebugLocation(252, 29);
					PushFollow(Follow._equalityExpression_in_andExpression1889);
					equalityExpression153=equalityExpression();
					PopFollow();

					adaptor.AddChild(root_0, equalityExpression153.Tree);

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 29);
			LeaveRule("andExpression", 29);
			LeaveRule_andExpression();
		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();

	// $ANTLR start "equalityExpression"
	// C:\\work\\ReoScript\\ReoScript.g:255:1: equalityExpression : relationalExpression ( ( EQUALS | NOT_EQUALS ) ^ relationalExpression )* ;
	[GrammarRule("equalityExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 30);
		TraceIn("equalityExpression", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set155 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> relationalExpression154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> relationalExpression156 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set155_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(255, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:256:2: ( relationalExpression ( ( EQUALS | NOT_EQUALS ) ^ relationalExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:256:4: relationalExpression ( ( EQUALS | NOT_EQUALS ) ^ relationalExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(256, 4);
			PushFollow(Follow._relationalExpression_in_equalityExpression1902);
			relationalExpression154=relationalExpression();
			PopFollow();

			adaptor.AddChild(root_0, relationalExpression154.Tree);
			DebugLocation(256, 25);
			// C:\\work\\ReoScript\\ReoScript.g:256:25: ( ( EQUALS | NOT_EQUALS ) ^ relationalExpression )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==EQUALS||LA42_0==NOT_EQUALS))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:256:26: ( EQUALS | NOT_EQUALS ) ^ relationalExpression
					{
					DebugLocation(256, 47);

					set155=(IToken)input.LT(1);
					set155=(IToken)input.LT(1);
					if (input.LA(1)==EQUALS||input.LA(1)==NOT_EQUALS)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set155), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(256, 49);
					PushFollow(Follow._relationalExpression_in_equalityExpression1914);
					relationalExpression156=relationalExpression();
					PopFollow();

					adaptor.AddChild(root_0, relationalExpression156.Tree);

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 30);
			LeaveRule("equalityExpression", 30);
			LeaveRule_equalityExpression();
		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();

	// $ANTLR start "relationalExpression"
	// C:\\work\\ReoScript\\ReoScript.g:259:1: relationalExpression : shiftExpression ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 31);
		TraceIn("relationalExpression", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set158 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression157 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression159 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set158_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(259, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:260:2: ( shiftExpression ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:260:4: shiftExpression ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(260, 4);
			PushFollow(Follow._shiftExpression_in_relationalExpression1929);
			shiftExpression157=shiftExpression();
			PopFollow();

			adaptor.AddChild(root_0, shiftExpression157.Tree);
			DebugLocation(260, 20);
			// C:\\work\\ReoScript\\ReoScript.g:260:20: ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==GREAT_THAN))
				{
					alt43 = 1;
				}
				else if ((LA43_0==GREAT_EQUALS||(LA43_0>=LESS_EQUALS && LA43_0<=LESS_THAN)))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:260:21: ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression
					{
					DebugLocation(260, 74);

					set158=(IToken)input.LT(1);
					set158=(IToken)input.LT(1);
					if ((input.LA(1)>=GREAT_EQUALS && input.LA(1)<=GREAT_THAN)||(input.LA(1)>=LESS_EQUALS && input.LA(1)<=LESS_THAN))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set158), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(260, 76);
					PushFollow(Follow._shiftExpression_in_relationalExpression1949);
					shiftExpression159=shiftExpression();
					PopFollow();

					adaptor.AddChild(root_0, shiftExpression159.Tree);

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 31);
			LeaveRule("relationalExpression", 31);
			LeaveRule_relationalExpression();
		}
		DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();

	// $ANTLR start "shiftExpression"
	// C:\\work\\ReoScript\\ReoScript.g:263:1: shiftExpression : additiveExpression ( ( LSHIFT | RSHIFT ) ^ additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 32);
		TraceIn("shiftExpression", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set161 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression160 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression162 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set161_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(263, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:264:2: ( additiveExpression ( ( LSHIFT | RSHIFT ) ^ additiveExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:264:4: additiveExpression ( ( LSHIFT | RSHIFT ) ^ additiveExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(264, 4);
			PushFollow(Follow._additiveExpression_in_shiftExpression1963);
			additiveExpression160=additiveExpression();
			PopFollow();

			adaptor.AddChild(root_0, additiveExpression160.Tree);
			DebugLocation(264, 23);
			// C:\\work\\ReoScript\\ReoScript.g:264:23: ( ( LSHIFT | RSHIFT ) ^ additiveExpression )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==LSHIFT||LA44_0==RSHIFT))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:264:24: ( LSHIFT | RSHIFT ) ^ additiveExpression
					{
					DebugLocation(264, 39);

					set161=(IToken)input.LT(1);
					set161=(IToken)input.LT(1);
					if (input.LA(1)==LSHIFT||input.LA(1)==RSHIFT)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set161), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(264, 41);
					PushFollow(Follow._additiveExpression_in_shiftExpression1973);
					additiveExpression162=additiveExpression();
					PopFollow();

					adaptor.AddChild(root_0, additiveExpression162.Tree);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftExpression", 32);
			LeaveRule("shiftExpression", 32);
			LeaveRule_shiftExpression();
		}
		DebugLocation(265, 1);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return retval;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();

	// $ANTLR start "additiveExpression"
	// C:\\work\\ReoScript\\ReoScript.g:267:1: additiveExpression : multiplicativeExpression ( ( PLUS | MINUS ) ^ multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 33);
		TraceIn("additiveExpression", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set164 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression163 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression165 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set164_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(267, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:268:2: ( multiplicativeExpression ( ( PLUS | MINUS ) ^ multiplicativeExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:268:4: multiplicativeExpression ( ( PLUS | MINUS ) ^ multiplicativeExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(268, 4);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression1988);
			multiplicativeExpression163=multiplicativeExpression();
			PopFollow();

			adaptor.AddChild(root_0, multiplicativeExpression163.Tree);
			DebugLocation(268, 29);
			// C:\\work\\ReoScript\\ReoScript.g:268:29: ( ( PLUS | MINUS ) ^ multiplicativeExpression )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==MINUS||LA45_0==PLUS))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:268:30: ( PLUS | MINUS ) ^ multiplicativeExpression
					{
					DebugLocation(268, 42);

					set164=(IToken)input.LT(1);
					set164=(IToken)input.LT(1);
					if (input.LA(1)==MINUS||input.LA(1)==PLUS)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set164), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(268, 44);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression1998);
					multiplicativeExpression165=multiplicativeExpression();
					PopFollow();

					adaptor.AddChild(root_0, multiplicativeExpression165.Tree);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 33);
			LeaveRule("additiveExpression", 33);
			LeaveRule_additiveExpression();
		}
		DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();

	// $ANTLR start "multiplicativeExpression"
	// C:\\work\\ReoScript\\ReoScript.g:271:1: multiplicativeExpression : unaryExpression ( ( MUL | DIV | MOD ) ^ unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 34);
		TraceIn("multiplicativeExpression", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set167 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression166 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression168 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set167_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(271, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:272:2: ( unaryExpression ( ( MUL | DIV | MOD ) ^ unaryExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:272:4: unaryExpression ( ( MUL | DIV | MOD ) ^ unaryExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(272, 4);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression2012);
			unaryExpression166=unaryExpression();
			PopFollow();

			adaptor.AddChild(root_0, unaryExpression166.Tree);
			DebugLocation(272, 20);
			// C:\\work\\ReoScript\\ReoScript.g:272:20: ( ( MUL | DIV | MOD ) ^ unaryExpression )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==DIV||(LA46_0>=MOD && LA46_0<=MUL)))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:272:21: ( MUL | DIV | MOD ) ^ unaryExpression
					{
					DebugLocation(272, 38);

					set167=(IToken)input.LT(1);
					set167=(IToken)input.LT(1);
					if (input.LA(1)==DIV||(input.LA(1)>=MOD && input.LA(1)<=MUL))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set167), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(272, 40);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression2028);
					unaryExpression168=unaryExpression();
					PopFollow();

					adaptor.AddChild(root_0, unaryExpression168.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 34);
			LeaveRule("multiplicativeExpression", 34);
			LeaveRule_multiplicativeExpression();
		}
		DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();

	// $ANTLR start "unaryExpression"
	// C:\\work\\ReoScript\\ReoScript.g:275:1: unaryExpression : ( primaryExpression ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) | 'new' primaryExpression -> ^( CREATE primaryExpression ) | (op= '+' |op= '-' |op= '!' |op= '~' ) unaryExpression -> ^( PRE_UNARY $op unaryExpression ) | 'typeof' primaryExpression -> ^( TYPEOF primaryExpression ) );
	[GrammarRule("unaryExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 35);
		TraceIn("unaryExpression", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken op = default(IToken);
		IToken string_literal170 = default(IToken);
		IToken string_literal171 = default(IToken);
		IToken string_literal172 = default(IToken);
		IToken string_literal174 = default(IToken);
		IToken string_literal176 = default(IToken);
		IToken string_literal179 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression169 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression173 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression175 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression178 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression180 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree op_tree = default(CommonTree);
		CommonTree string_literal170_tree = default(CommonTree);
		CommonTree string_literal171_tree = default(CommonTree);
		CommonTree string_literal172_tree = default(CommonTree);
		CommonTree string_literal174_tree = default(CommonTree);
		CommonTree string_literal176_tree = default(CommonTree);
		CommonTree string_literal179_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_INCREMENT=new RewriteRuleITokenStream(adaptor,"token INCREMENT");
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
		RewriteRuleITokenStream stream_MINUS=new RewriteRuleITokenStream(adaptor,"token MINUS");
		RewriteRuleITokenStream stream_DECREMENT=new RewriteRuleITokenStream(adaptor,"token DECREMENT");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(275, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:276:2: ( primaryExpression ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) | 'new' primaryExpression -> ^( CREATE primaryExpression ) | (op= '+' |op= '-' |op= '!' |op= '~' ) unaryExpression -> ^( PRE_UNARY $op unaryExpression ) | 'typeof' primaryExpression -> ^( TYPEOF primaryExpression ) )
			int alt49=6;
			try { DebugEnterDecision(49, false);
			switch (input.LA(1))
			{
			case BINARY_LITERATE:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case LBRACE:
			case LCURLY:
			case LPAREN:
			case NAN:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case UNDEFINED:
			case 125:
				{
				alt49 = 1;
				}
				break;
			case INCREMENT:
				{
				alt49 = 2;
				}
				break;
			case DECREMENT:
				{
				alt49 = 3;
				}
				break;
			case 130:
				{
				alt49 = 4;
				}
				break;
			case MINUS:
			case NOT:
			case PLUS:
			case 136:
				{
				alt49 = 5;
				}
				break;
			case 134:
				{
				alt49 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:277:4: primaryExpression ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression )
				{
				DebugLocation(277, 4);
				PushFollow(Follow._primaryExpression_in_unaryExpression2047);
				primaryExpression169=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression169.Tree);
				DebugLocation(277, 22);
				// C:\\work\\ReoScript\\ReoScript.g:277:22: ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression )
				int alt47=3;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				switch (input.LA(1))
				{
				case INCREMENT:
					{
					alt47 = 1;
					}
					break;
				case DECREMENT:
					{
					alt47 = 2;
					}
					break;
				case EOF:
				case AND:
				case ASSIGNMENT:
				case ASSIGN_AND:
				case ASSIGN_DIV:
				case ASSIGN_LSHIFT:
				case ASSIGN_MINUS:
				case ASSIGN_MUL:
				case ASSIGN_OR:
				case ASSIGN_PLUS:
				case ASSIGN_REM:
				case ASSIGN_REV:
				case ASSIGN_RSHIFT:
				case COLON:
				case COMMA:
				case CONDITION:
				case DIV:
				case DOT:
				case EQUALS:
				case GREAT_EQUALS:
				case GREAT_THAN:
				case IDENTIFIER:
				case LBRACE:
				case LCURLY:
				case LESS_EQUALS:
				case LESS_THAN:
				case LOGICAL_AND:
				case LOGICAL_OR:
				case LPAREN:
				case LSHIFT:
				case MINUS:
				case MOD:
				case MUL:
				case NOT_EQUALS:
				case OR:
				case PLUS:
				case RBRACE:
				case RCURLY:
				case RPAREN:
				case RSHIFT:
				case SEMI:
				case XOR:
				case 115:
				case 129:
					{
					alt47 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:278:6: '++'
					{
					DebugLocation(278, 6);
					string_literal170=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_unaryExpression2057);  
					stream_INCREMENT.Add(string_literal170);



					{
					// AST REWRITE
					// elements: primaryExpression, INCREMENT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 278:12: -> ^( POST_UNARY_STEP primaryExpression '++' )
					{
						DebugLocation(278, 15);
						// C:\\work\\ReoScript\\ReoScript.g:278:15: ^( POST_UNARY_STEP primaryExpression '++' )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(278, 17);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

						DebugLocation(278, 33);
						adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
						DebugLocation(278, 51);
						adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:279:10: '--'
					{
					DebugLocation(279, 10);
					string_literal171=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_unaryExpression2079);  
					stream_DECREMENT.Add(string_literal171);



					{
					// AST REWRITE
					// elements: primaryExpression, DECREMENT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 279:16: -> ^( POST_UNARY_STEP primaryExpression '--' )
					{
						DebugLocation(279, 19);
						// C:\\work\\ReoScript\\ReoScript.g:279:19: ^( POST_UNARY_STEP primaryExpression '--' )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(279, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

						DebugLocation(279, 37);
						adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
						DebugLocation(279, 55);
						adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\work\\ReoScript\\ReoScript.g:280:10: 
					{

					{
					// AST REWRITE
					// elements: primaryExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 280:10: -> primaryExpression
					{
						DebugLocation(280, 13);
						adaptor.AddChild(root_0, stream_primaryExpression.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(47); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:282:4: '++' primaryExpression
				{
				DebugLocation(282, 4);
				string_literal172=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_unaryExpression2117);  
				stream_INCREMENT.Add(string_literal172);

				DebugLocation(282, 9);
				PushFollow(Follow._primaryExpression_in_unaryExpression2119);
				primaryExpression173=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression173.Tree);


				{
				// AST REWRITE
				// elements: INCREMENT, primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 283:3: -> ^( PRE_UNARY_STEP primaryExpression '++' )
				{
					DebugLocation(283, 6);
					// C:\\work\\ReoScript\\ReoScript.g:283:6: ^( PRE_UNARY_STEP primaryExpression '++' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(283, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(283, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(283, 41);
					adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:284:4: '--' primaryExpression
				{
				DebugLocation(284, 4);
				string_literal174=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_unaryExpression2136);  
				stream_DECREMENT.Add(string_literal174);

				DebugLocation(284, 9);
				PushFollow(Follow._primaryExpression_in_unaryExpression2138);
				primaryExpression175=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression175.Tree);


				{
				// AST REWRITE
				// elements: DECREMENT, primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 285:3: -> ^( PRE_UNARY_STEP primaryExpression '--' )
				{
					DebugLocation(285, 6);
					// C:\\work\\ReoScript\\ReoScript.g:285:6: ^( PRE_UNARY_STEP primaryExpression '--' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(285, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(285, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(285, 41);
					adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:286:4: 'new' primaryExpression
				{
				DebugLocation(286, 4);
				string_literal176=(IToken)Match(input,130,Follow._130_in_unaryExpression2155);  
				stream_130.Add(string_literal176);

				DebugLocation(286, 10);
				PushFollow(Follow._primaryExpression_in_unaryExpression2157);
				primaryExpression177=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression177.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 287:3: -> ^( CREATE primaryExpression )
				{
					DebugLocation(287, 6);
					// C:\\work\\ReoScript\\ReoScript.g:287:6: ^( CREATE primaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(287, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CREATE, "CREATE"), root_1);

					DebugLocation(287, 15);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:288:4: (op= '+' |op= '-' |op= '!' |op= '~' ) unaryExpression
				{
				DebugLocation(288, 4);
				// C:\\work\\ReoScript\\ReoScript.g:288:4: (op= '+' |op= '-' |op= '!' |op= '~' )
				int alt48=4;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				switch (input.LA(1))
				{
				case PLUS:
					{
					alt48 = 1;
					}
					break;
				case MINUS:
					{
					alt48 = 2;
					}
					break;
				case NOT:
					{
					alt48 = 3;
					}
					break;
				case 136:
					{
					alt48 = 4;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:288:5: op= '+'
					{
					DebugLocation(288, 7);
					op=(IToken)Match(input,PLUS,Follow._PLUS_in_unaryExpression2175);  
					stream_PLUS.Add(op);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:288:12: op= '-'
					{
					DebugLocation(288, 14);
					op=(IToken)Match(input,MINUS,Follow._MINUS_in_unaryExpression2179);  
					stream_MINUS.Add(op);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\work\\ReoScript\\ReoScript.g:288:19: op= '!'
					{
					DebugLocation(288, 21);
					op=(IToken)Match(input,NOT,Follow._NOT_in_unaryExpression2183);  
					stream_NOT.Add(op);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\work\\ReoScript\\ReoScript.g:288:26: op= '~'
					{
					DebugLocation(288, 28);
					op=(IToken)Match(input,136,Follow._136_in_unaryExpression2187);  
					stream_136.Add(op);


					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(288, 34);
				PushFollow(Follow._unaryExpression_in_unaryExpression2190);
				unaryExpression178=unaryExpression();
				PopFollow();

				stream_unaryExpression.Add(unaryExpression178.Tree);


				{
				// AST REWRITE
				// elements: op, unaryExpression
				// token labels: op
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_op=new RewriteRuleITokenStream(adaptor,"token op",op);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 289:3: -> ^( PRE_UNARY $op unaryExpression )
				{
					DebugLocation(289, 6);
					// C:\\work\\ReoScript\\ReoScript.g:289:6: ^( PRE_UNARY $op unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(289, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY, "PRE_UNARY"), root_1);

					DebugLocation(289, 19);
					adaptor.AddChild(root_1, stream_op.NextNode());
					DebugLocation(289, 22);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\work\\ReoScript\\ReoScript.g:290:7: 'typeof' primaryExpression
				{
				DebugLocation(290, 7);
				string_literal179=(IToken)Match(input,134,Follow._134_in_unaryExpression2211);  
				stream_134.Add(string_literal179);

				DebugLocation(290, 16);
				PushFollow(Follow._primaryExpression_in_unaryExpression2213);
				primaryExpression180=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression180.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 290:34: -> ^( TYPEOF primaryExpression )
				{
					DebugLocation(290, 37);
					// C:\\work\\ReoScript\\ReoScript.g:290:37: ^( TYPEOF primaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(290, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPEOF, "TYPEOF"), root_1);

					DebugLocation(290, 46);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 35);
			LeaveRule("unaryExpression", 35);
			LeaveRule_unaryExpression();
		}
		DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();

	// $ANTLR start "primaryExpression"
	// C:\\work\\ReoScript\\ReoScript.g:293:1: primaryExpression : ( ( variable -> variable | literal -> literal | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define | '(' expression ')' -> expression ) ( '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' idx= expression ']' -> ^( ARRAY_ACCESS $primaryExpression $idx) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )* | ( object_literal -> object_literal ) ( '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) )* );
	[GrammarRule("primaryExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 36);
		TraceIn("primaryExpression", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal185 = default(IToken);
		IToken char_literal187 = default(IToken);
		IToken char_literal188 = default(IToken);
		IToken char_literal189 = default(IToken);
		IToken char_literal190 = default(IToken);
		IToken char_literal191 = default(IToken);
		IToken IDENTIFIER192 = default(IToken);
		IToken char_literal193 = default(IToken);
		IToken char_literal194 = default(IToken);
		IToken char_literal197 = default(IToken);
		IToken IDENTIFIER198 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> exp = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> idx = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variable181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> literal182 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> array_literal183 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> anonymous_function_define184 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> object_literal195 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> object_literal196 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal185_tree = default(CommonTree);
		CommonTree char_literal187_tree = default(CommonTree);
		CommonTree char_literal188_tree = default(CommonTree);
		CommonTree char_literal189_tree = default(CommonTree);
		CommonTree char_literal190_tree = default(CommonTree);
		CommonTree char_literal191_tree = default(CommonTree);
		CommonTree IDENTIFIER192_tree = default(CommonTree);
		CommonTree char_literal193_tree = default(CommonTree);
		CommonTree char_literal194_tree = default(CommonTree);
		CommonTree char_literal197_tree = default(CommonTree);
		CommonTree IDENTIFIER198_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_RBRACE=new RewriteRuleITokenStream(adaptor,"token RBRACE");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_LBRACE=new RewriteRuleITokenStream(adaptor,"token LBRACE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_anonymous_function_define=new RewriteRuleSubtreeStream(adaptor,"rule anonymous_function_define");
		RewriteRuleSubtreeStream stream_array_literal=new RewriteRuleSubtreeStream(adaptor,"rule array_literal");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		RewriteRuleSubtreeStream stream_object_literal=new RewriteRuleSubtreeStream(adaptor,"rule object_literal");
		RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(293, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:294:2: ( ( variable -> variable | literal -> literal | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define | '(' expression ')' -> expression ) ( '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' idx= expression ']' -> ^( ARRAY_ACCESS $primaryExpression $idx) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )* | ( object_literal -> object_literal ) ( '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) )* )
			int alt54=2;
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==BINARY_LITERATE||LA54_0==FALSE||(LA54_0>=HEX_LITERATE && LA54_0<=IDENTIFIER)||LA54_0==LBRACE||LA54_0==LPAREN||LA54_0==NAN||(LA54_0>=NULL && LA54_0<=NUMBER_LITERATE)||LA54_0==STRING_LITERATE||(LA54_0>=THIS && LA54_0<=TRUE)||LA54_0==UNDEFINED||LA54_0==125))
			{
				alt54 = 1;
			}
			else if ((LA54_0==LCURLY))
			{
				alt54 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:295:2: ( variable -> variable | literal -> literal | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define | '(' expression ')' -> expression ) ( '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' idx= expression ']' -> ^( ARRAY_ACCESS $primaryExpression $idx) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )*
				{
				DebugLocation(295, 2);
				// C:\\work\\ReoScript\\ReoScript.g:295:2: ( variable -> variable | literal -> literal | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define | '(' expression ')' -> expression )
				int alt50=5;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					int LA50_1 = input.LA(2);

					if ((LA50_1==117))
					{
						alt50 = 4;
					}
					else if ((LA50_1==EOF||LA50_1==AND||(LA50_1>=ASSIGNMENT && LA50_1<=ASSIGN_RSHIFT)||LA50_1==COLON||LA50_1==COMMA||LA50_1==CONDITION||LA50_1==DECREMENT||(LA50_1>=DIV && LA50_1<=DOT)||LA50_1==EQUALS||(LA50_1>=GREAT_EQUALS && LA50_1<=GREAT_THAN)||LA50_1==IDENTIFIER||LA50_1==INCREMENT||(LA50_1>=LBRACE && LA50_1<=LESS_THAN)||(LA50_1>=LOGICAL_AND && LA50_1<=LSHIFT)||(LA50_1>=MINUS && LA50_1<=MUL)||LA50_1==NOT_EQUALS||LA50_1==OR||LA50_1==PLUS||(LA50_1>=RBRACE && LA50_1<=RCURLY)||(LA50_1>=RPAREN && LA50_1<=SEMI)||(LA50_1>=XOR && LA50_1<=115)||LA50_1==129))
					{
						alt50 = 1;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 50, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case BINARY_LITERATE:
				case FALSE:
				case HEX_LITERATE:
				case NAN:
				case NULL:
				case NUMBER_LITERATE:
				case STRING_LITERATE:
				case THIS:
				case TRUE:
				case UNDEFINED:
					{
					alt50 = 2;
					}
					break;
				case LBRACE:
					{
					alt50 = 3;
					}
					break;
				case 125:
					{
					alt50 = 4;
					}
					break;
				case LPAREN:
					{
					switch (input.LA(2))
					{
					case IDENTIFIER:
						{
						switch (input.LA(3))
						{
						case EOF:
						case AND:
						case ASSIGNMENT:
						case CONDITION:
						case DECREMENT:
						case DIV:
						case DOT:
						case EQUALS:
						case GREAT_EQUALS:
						case GREAT_THAN:
						case INCREMENT:
						case LBRACE:
						case LCURLY:
						case LESS_EQUALS:
						case LESS_THAN:
						case LOGICAL_AND:
						case LOGICAL_OR:
						case LPAREN:
						case LSHIFT:
						case MINUS:
						case MOD:
						case MUL:
						case NOT_EQUALS:
						case OR:
						case PLUS:
						case RSHIFT:
						case XOR:
						case 117:
							{
							alt50 = 5;
							}
							break;
						case COMMA:
							{
							alt50 = 4;
							}
							break;
						case RPAREN:
							{
							int LA50_9 = input.LA(4);

							if ((LA50_9==117))
							{
								alt50 = 4;
							}
							else if ((LA50_9==EOF||LA50_9==AND||(LA50_9>=ASSIGNMENT && LA50_9<=ASSIGN_RSHIFT)||LA50_9==COLON||LA50_9==COMMA||LA50_9==CONDITION||LA50_9==DECREMENT||(LA50_9>=DIV && LA50_9<=DOT)||LA50_9==EQUALS||(LA50_9>=GREAT_EQUALS && LA50_9<=GREAT_THAN)||LA50_9==IDENTIFIER||LA50_9==INCREMENT||(LA50_9>=LBRACE && LA50_9<=LESS_THAN)||(LA50_9>=LOGICAL_AND && LA50_9<=LSHIFT)||(LA50_9>=MINUS && LA50_9<=MUL)||LA50_9==NOT_EQUALS||LA50_9==OR||LA50_9==PLUS||(LA50_9>=RBRACE && LA50_9<=RCURLY)||(LA50_9>=RPAREN && LA50_9<=SEMI)||(LA50_9>=XOR && LA50_9<=115)||LA50_9==129))
							{
								alt50 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 50, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 50, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case RPAREN:
						{
						alt50 = 4;
						}
						break;
					case BINARY_LITERATE:
					case DECREMENT:
					case FALSE:
					case HEX_LITERATE:
					case INCREMENT:
					case LBRACE:
					case LCURLY:
					case LESS_THAN:
					case LPAREN:
					case MINUS:
					case NAN:
					case NOT:
					case NULL:
					case NUMBER_LITERATE:
					case PLUS:
					case STRING_LITERATE:
					case THIS:
					case TRUE:
					case UNDEFINED:
					case 125:
					case 130:
					case 134:
					case 136:
						{
						alt50 = 5;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 50, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:296:5: variable
					{
					DebugLocation(296, 5);
					PushFollow(Follow._variable_in_primaryExpression2240);
					variable181=variable();
					PopFollow();

					stream_variable.Add(variable181.Tree);


					{
					// AST REWRITE
					// elements: variable
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 296:20: -> variable
					{
						DebugLocation(296, 23);
						adaptor.AddChild(root_0, stream_variable.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:297:5: literal
					{
					DebugLocation(297, 5);
					PushFollow(Follow._literal_in_primaryExpression2256);
					literal182=literal();
					PopFollow();

					stream_literal.Add(literal182.Tree);


					{
					// AST REWRITE
					// elements: literal
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 297:20: -> literal
					{
						DebugLocation(297, 23);
						adaptor.AddChild(root_0, stream_literal.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\work\\ReoScript\\ReoScript.g:298:5: array_literal
					{
					DebugLocation(298, 5);
					PushFollow(Follow._array_literal_in_primaryExpression2273);
					array_literal183=array_literal();
					PopFollow();

					stream_array_literal.Add(array_literal183.Tree);


					{
					// AST REWRITE
					// elements: array_literal
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 298:23: -> array_literal
					{
						DebugLocation(298, 26);
						adaptor.AddChild(root_0, stream_array_literal.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\work\\ReoScript\\ReoScript.g:299:5: anonymous_function_define
					{
					DebugLocation(299, 5);
					PushFollow(Follow._anonymous_function_define_in_primaryExpression2287);
					anonymous_function_define184=anonymous_function_define();
					PopFollow();

					stream_anonymous_function_define.Add(anonymous_function_define184.Tree);


					{
					// AST REWRITE
					// elements: anonymous_function_define
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 299:32: -> anonymous_function_define
					{
						DebugLocation(299, 35);
						adaptor.AddChild(root_0, stream_anonymous_function_define.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C:\\work\\ReoScript\\ReoScript.g:300:5: '(' expression ')'
					{
					DebugLocation(300, 5);
					char_literal185=(IToken)Match(input,LPAREN,Follow._LPAREN_in_primaryExpression2298);  
					stream_LPAREN.Add(char_literal185);

					DebugLocation(300, 9);
					PushFollow(Follow._expression_in_primaryExpression2300);
					expression186=expression();
					PopFollow();

					stream_expression.Add(expression186.Tree);
					DebugLocation(300, 20);
					char_literal187=(IToken)Match(input,RPAREN,Follow._RPAREN_in_primaryExpression2302);  
					stream_RPAREN.Add(char_literal187);



					{
					// AST REWRITE
					// elements: expression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 300:26: -> expression
					{
						DebugLocation(300, 29);
						adaptor.AddChild(root_0, stream_expression.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(50); }

				DebugLocation(302, 2);
				// C:\\work\\ReoScript\\ReoScript.g:302:2: ( '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' idx= expression ']' -> ^( ARRAY_ACCESS $primaryExpression $idx) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )*
				try { DebugEnterSubRule(52);
				while (true)
				{
					int alt52=5;
					try { DebugEnterDecision(52, false);
					switch (input.LA(1))
					{
					case LPAREN:
						{
						alt52 = 1;
						}
						break;
					case DOT:
						{
						alt52 = 2;
						}
						break;
					case LBRACE:
						{
						alt52 = 3;
						}
						break;
					case LCURLY:
						{
						alt52 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(52); }
					switch ( alt52 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\work\\ReoScript\\ReoScript.g:303:3: '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) )
						{
						DebugLocation(303, 3);
						char_literal188=(IToken)Match(input,LPAREN,Follow._LPAREN_in_primaryExpression2318);  
						stream_LPAREN.Add(char_literal188);

						DebugLocation(303, 7);
						// C:\\work\\ReoScript\\ReoScript.g:303:7: ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) )
						int alt51=2;
						try { DebugEnterSubRule(51);
						try { DebugEnterDecision(51, false);
						int LA51_0 = input.LA(1);

						if ((LA51_0==RPAREN))
						{
							alt51 = 1;
						}
						else if ((LA51_0==BINARY_LITERATE||LA51_0==DECREMENT||LA51_0==FALSE||(LA51_0>=HEX_LITERATE && LA51_0<=IDENTIFIER)||LA51_0==INCREMENT||(LA51_0>=LBRACE && LA51_0<=LCURLY)||LA51_0==LESS_THAN||LA51_0==LPAREN||LA51_0==MINUS||LA51_0==NAN||LA51_0==NOT||(LA51_0>=NULL && LA51_0<=NUMBER_LITERATE)||LA51_0==PLUS||LA51_0==STRING_LITERATE||(LA51_0>=THIS && LA51_0<=TRUE)||LA51_0==UNDEFINED||LA51_0==125||LA51_0==130||LA51_0==134||LA51_0==136))
						{
							alt51 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(51); }
						switch (alt51)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\work\\ReoScript\\ReoScript.g:304:4: ')'
							{
							DebugLocation(304, 4);
							char_literal189=(IToken)Match(input,RPAREN,Follow._RPAREN_in_primaryExpression2326);  
							stream_RPAREN.Add(char_literal189);



							{
							// AST REWRITE
							// elements: primaryExpression
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 304:9: -> ^( FUNCTION_CALL $primaryExpression)
							{
								DebugLocation(304, 12);
								// C:\\work\\ReoScript\\ReoScript.g:304:12: ^( FUNCTION_CALL $primaryExpression)
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(304, 14);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

								DebugLocation(304, 29);
								adaptor.AddChild(root_1, stream_retval.NextTree());

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\work\\ReoScript\\ReoScript.g:305:6: exp= expressionList ')'
							{
							DebugLocation(305, 9);
							PushFollow(Follow._expressionList_in_primaryExpression2345);
							exp=expressionList();
							PopFollow();

							stream_expressionList.Add(exp.Tree);
							DebugLocation(305, 25);
							char_literal190=(IToken)Match(input,RPAREN,Follow._RPAREN_in_primaryExpression2347);  
							stream_RPAREN.Add(char_literal190);



							{
							// AST REWRITE
							// elements: primaryExpression, exp
							// token labels: 
							// rule labels: exp, retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_exp=new RewriteRuleSubtreeStream(adaptor,"rule exp",exp!=null?exp.Tree:null);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 306:6: -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) )
							{
								DebugLocation(306, 9);
								// C:\\work\\ReoScript\\ReoScript.g:306:9: ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) )
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(306, 11);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

								DebugLocation(306, 26);
								adaptor.AddChild(root_1, stream_retval.NextTree());
								DebugLocation(306, 44);
								// C:\\work\\ReoScript\\ReoScript.g:306:44: ^( ARGUMENT_LIST $exp)
								{
								CommonTree root_2 = (CommonTree)adaptor.Nil();
								DebugLocation(306, 46);
								root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGUMENT_LIST, "ARGUMENT_LIST"), root_2);

								DebugLocation(306, 61);
								adaptor.AddChild(root_2, stream_exp.NextTree());

								adaptor.AddChild(root_1, root_2);
								}

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}

							}
							break;

						}
						} finally { DebugExitSubRule(51); }


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\work\\ReoScript\\ReoScript.g:308:5: '.' IDENTIFIER
						{
						DebugLocation(308, 5);
						char_literal191=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression2379);  
						stream_DOT.Add(char_literal191);

						DebugLocation(308, 9);
						IDENTIFIER192=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primaryExpression2381);  
						stream_IDENTIFIER.Add(IDENTIFIER192);



						{
						// AST REWRITE
						// elements: IDENTIFIER, primaryExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 309:4: -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER )
						{
							DebugLocation(309, 7);
							// C:\\work\\ReoScript\\ReoScript.g:309:7: ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(309, 9);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROPERTY_ACCESS, "PROPERTY_ACCESS"), root_1);

							DebugLocation(309, 26);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(309, 44);
							adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\work\\ReoScript\\ReoScript.g:310:5: '[' idx= expression ']'
						{
						DebugLocation(310, 5);
						char_literal193=(IToken)Match(input,LBRACE,Follow._LBRACE_in_primaryExpression2401);  
						stream_LBRACE.Add(char_literal193);

						DebugLocation(310, 12);
						PushFollow(Follow._expression_in_primaryExpression2405);
						idx=expression();
						PopFollow();

						stream_expression.Add(idx.Tree);
						DebugLocation(310, 24);
						char_literal194=(IToken)Match(input,RBRACE,Follow._RBRACE_in_primaryExpression2407);  
						stream_RBRACE.Add(char_literal194);



						{
						// AST REWRITE
						// elements: idx, primaryExpression
						// token labels: 
						// rule labels: retval, idx
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_idx=new RewriteRuleSubtreeStream(adaptor,"rule idx",idx!=null?idx.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 311:4: -> ^( ARRAY_ACCESS $primaryExpression $idx)
						{
							DebugLocation(311, 7);
							// C:\\work\\ReoScript\\ReoScript.g:311:7: ^( ARRAY_ACCESS $primaryExpression $idx)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(311, 9);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_ACCESS, "ARRAY_ACCESS"), root_1);

							DebugLocation(311, 23);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(311, 42);
							adaptor.AddChild(root_1, stream_idx.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\work\\ReoScript\\ReoScript.g:312:5: object_literal
						{
						DebugLocation(312, 5);
						PushFollow(Follow._object_literal_in_primaryExpression2428);
						object_literal195=object_literal();
						PopFollow();

						stream_object_literal.Add(object_literal195.Tree);


						{
						// AST REWRITE
						// elements: primaryExpression, object_literal
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 313:4: -> ^( COMBINE_OBJECT $primaryExpression object_literal )
						{
							DebugLocation(313, 7);
							// C:\\work\\ReoScript\\ReoScript.g:313:7: ^( COMBINE_OBJECT $primaryExpression object_literal )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(313, 9);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(COMBINE_OBJECT, "COMBINE_OBJECT"), root_1);

							DebugLocation(313, 25);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(313, 43);
							adaptor.AddChild(root_1, stream_object_literal.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					default:
						goto loop52;
					}
				}

				loop52:
					;

				} finally { DebugExitSubRule(52); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:315:4: ( object_literal -> object_literal ) ( '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) )*
				{
				DebugLocation(315, 4);
				// C:\\work\\ReoScript\\ReoScript.g:315:4: ( object_literal -> object_literal )
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:316:2: object_literal
				{
				DebugLocation(316, 2);
				PushFollow(Follow._object_literal_in_primaryExpression2454);
				object_literal196=object_literal();
				PopFollow();

				stream_object_literal.Add(object_literal196.Tree);


				{
				// AST REWRITE
				// elements: object_literal
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 316:20: -> object_literal
				{
					DebugLocation(316, 23);
					adaptor.AddChild(root_0, stream_object_literal.NextTree());

				}

				retval.Tree = root_0;
				}

				}

				DebugLocation(318, 2);
				// C:\\work\\ReoScript\\ReoScript.g:318:2: ( '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) )*
				try { DebugEnterSubRule(53);
				while (true)
				{
					int alt53=2;
					try { DebugEnterDecision(53, false);
					int LA53_0 = input.LA(1);

					if ((LA53_0==DOT))
					{
						int LA53_2 = input.LA(2);

						if ((LA53_2==IDENTIFIER))
						{
							alt53 = 1;
						}


					}


					} finally { DebugExitDecision(53); }
					switch ( alt53 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\work\\ReoScript\\ReoScript.g:318:4: '.' IDENTIFIER
						{
						DebugLocation(318, 4);
						char_literal197=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression2469);  
						stream_DOT.Add(char_literal197);

						DebugLocation(318, 8);
						IDENTIFIER198=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primaryExpression2471);  
						stream_IDENTIFIER.Add(IDENTIFIER198);



						{
						// AST REWRITE
						// elements: IDENTIFIER, primaryExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 319:3: -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER )
						{
							DebugLocation(319, 6);
							// C:\\work\\ReoScript\\ReoScript.g:319:6: ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(319, 8);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROPERTY_ACCESS, "PROPERTY_ACCESS"), root_1);

							DebugLocation(319, 25);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(319, 43);
							adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					default:
						goto loop53;
					}
				}

				loop53:
					;

				} finally { DebugExitSubRule(53); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primaryExpression", 36);
			LeaveRule("primaryExpression", 36);
			LeaveRule_primaryExpression();
		}
		DebugLocation(321, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return retval;

	}
	// $ANTLR end "primaryExpression"

	partial void EnterRule_tag();
	partial void LeaveRule_tag();

	// $ANTLR start "tag"
	// C:\\work\\ReoScript\\ReoScript.g:323:1: tag : '<' (ns= IDENTIFIER ':' )? name= IDENTIFIER ( tagAttr )* ( '>' s= tagStmt '</' ( IDENTIFIER ':' )? IDENTIFIER '>' | '/>' ) -> ^( TAG ^( TAG_NAME $name ( $ns)? ) ^( TAG_ATTR_LIST ( tagAttr )* ) ( $s)? ) ;
	[GrammarRule("tag")]
	private AstParserRuleReturnScope<CommonTree, IToken> tag()
	{
		EnterRule_tag();
		EnterRule("tag", 37);
		TraceIn("tag", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken ns = default(IToken);
		IToken name = default(IToken);
		IToken char_literal199 = default(IToken);
		IToken char_literal200 = default(IToken);
		IToken char_literal202 = default(IToken);
		IToken string_literal203 = default(IToken);
		IToken IDENTIFIER204 = default(IToken);
		IToken char_literal205 = default(IToken);
		IToken IDENTIFIER206 = default(IToken);
		IToken char_literal207 = default(IToken);
		IToken string_literal208 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> s = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> tagAttr201 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ns_tree = default(CommonTree);
		CommonTree name_tree = default(CommonTree);
		CommonTree char_literal199_tree = default(CommonTree);
		CommonTree char_literal200_tree = default(CommonTree);
		CommonTree char_literal202_tree = default(CommonTree);
		CommonTree string_literal203_tree = default(CommonTree);
		CommonTree IDENTIFIER204_tree = default(CommonTree);
		CommonTree char_literal205_tree = default(CommonTree);
		CommonTree IDENTIFIER206_tree = default(CommonTree);
		CommonTree char_literal207_tree = default(CommonTree);
		CommonTree string_literal208_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_GREAT_THAN=new RewriteRuleITokenStream(adaptor,"token GREAT_THAN");
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleSubtreeStream stream_tagAttr=new RewriteRuleSubtreeStream(adaptor,"rule tagAttr");
		RewriteRuleSubtreeStream stream_tagStmt=new RewriteRuleSubtreeStream(adaptor,"rule tagStmt");
		try { DebugEnterRule(GrammarFileName, "tag");
		DebugLocation(323, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:324:2: ( '<' (ns= IDENTIFIER ':' )? name= IDENTIFIER ( tagAttr )* ( '>' s= tagStmt '</' ( IDENTIFIER ':' )? IDENTIFIER '>' | '/>' ) -> ^( TAG ^( TAG_NAME $name ( $ns)? ) ^( TAG_ATTR_LIST ( tagAttr )* ) ( $s)? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:324:4: '<' (ns= IDENTIFIER ':' )? name= IDENTIFIER ( tagAttr )* ( '>' s= tagStmt '</' ( IDENTIFIER ':' )? IDENTIFIER '>' | '/>' )
			{
			DebugLocation(324, 4);
			char_literal199=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_tag2499);  
			stream_LESS_THAN.Add(char_literal199);

			DebugLocation(324, 8);
			// C:\\work\\ReoScript\\ReoScript.g:324:8: (ns= IDENTIFIER ':' )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==IDENTIFIER))
			{
				int LA55_1 = input.LA(2);

				if ((LA55_1==COLON))
				{
					alt55 = 1;
				}
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:324:9: ns= IDENTIFIER ':'
				{
				DebugLocation(324, 11);
				ns=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tag2504);  
				stream_IDENTIFIER.Add(ns);

				DebugLocation(324, 23);
				char_literal200=(IToken)Match(input,COLON,Follow._COLON_in_tag2506);  
				stream_COLON.Add(char_literal200);


				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(324, 33);
			name=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tag2512);  
			stream_IDENTIFIER.Add(name);

			DebugLocation(324, 45);
			// C:\\work\\ReoScript\\ReoScript.g:324:45: ( tagAttr )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==IDENTIFIER))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:324:45: tagAttr
					{
					DebugLocation(324, 45);
					PushFollow(Follow._tagAttr_in_tag2514);
					tagAttr201=tagAttr();
					PopFollow();

					stream_tagAttr.Add(tagAttr201.Tree);

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }

			DebugLocation(325, 2);
			// C:\\work\\ReoScript\\ReoScript.g:325:2: ( '>' s= tagStmt '</' ( IDENTIFIER ':' )? IDENTIFIER '>' | '/>' )
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==GREAT_THAN))
			{
				alt58 = 1;
			}
			else if ((LA58_0==115))
			{
				alt58 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:326:4: '>' s= tagStmt '</' ( IDENTIFIER ':' )? IDENTIFIER '>'
				{
				DebugLocation(326, 4);
				char_literal202=(IToken)Match(input,GREAT_THAN,Follow._GREAT_THAN_in_tag2524);  
				stream_GREAT_THAN.Add(char_literal202);

				DebugLocation(326, 9);
				PushFollow(Follow._tagStmt_in_tag2528);
				s=tagStmt();
				PopFollow();

				stream_tagStmt.Add(s.Tree);
				DebugLocation(326, 19);
				string_literal203=(IToken)Match(input,116,Follow._116_in_tag2531);  
				stream_116.Add(string_literal203);

				DebugLocation(326, 24);
				// C:\\work\\ReoScript\\ReoScript.g:326:24: ( IDENTIFIER ':' )?
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==IDENTIFIER))
				{
					int LA57_1 = input.LA(2);

					if ((LA57_1==COLON))
					{
						alt57 = 1;
					}
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:326:25: IDENTIFIER ':'
					{
					DebugLocation(326, 25);
					IDENTIFIER204=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tag2534);  
					stream_IDENTIFIER.Add(IDENTIFIER204);

					DebugLocation(326, 36);
					char_literal205=(IToken)Match(input,COLON,Follow._COLON_in_tag2536);  
					stream_COLON.Add(char_literal205);


					}
					break;

				}
				} finally { DebugExitSubRule(57); }

				DebugLocation(326, 42);
				IDENTIFIER206=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tag2540);  
				stream_IDENTIFIER.Add(IDENTIFIER206);

				DebugLocation(326, 53);
				char_literal207=(IToken)Match(input,GREAT_THAN,Follow._GREAT_THAN_in_tag2542);  
				stream_GREAT_THAN.Add(char_literal207);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:327:4: '/>'
				{
				DebugLocation(327, 4);
				string_literal208=(IToken)Match(input,115,Follow._115_in_tag2548);  
				stream_115.Add(string_literal208);


				}
				break;

			}
			} finally { DebugExitSubRule(58); }



			{
			// AST REWRITE
			// elements: s, tagAttr, ns, name
			// token labels: ns, name
			// rule labels: retval, s
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_ns=new RewriteRuleITokenStream(adaptor,"token ns",ns);
			RewriteRuleITokenStream stream_name=new RewriteRuleITokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 329:2: -> ^( TAG ^( TAG_NAME $name ( $ns)? ) ^( TAG_ATTR_LIST ( tagAttr )* ) ( $s)? )
			{
				DebugLocation(329, 5);
				// C:\\work\\ReoScript\\ReoScript.g:329:5: ^( TAG ^( TAG_NAME $name ( $ns)? ) ^( TAG_ATTR_LIST ( tagAttr )* ) ( $s)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(329, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAG, "TAG"), root_1);

				DebugLocation(329, 11);
				// C:\\work\\ReoScript\\ReoScript.g:329:11: ^( TAG_NAME $name ( $ns)? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(329, 13);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAG_NAME, "TAG_NAME"), root_2);

				DebugLocation(329, 23);
				adaptor.AddChild(root_2, stream_name.NextNode());
				DebugLocation(329, 29);
				// C:\\work\\ReoScript\\ReoScript.g:329:29: ( $ns)?
				if (stream_ns.HasNext)
				{
					DebugLocation(329, 29);
					adaptor.AddChild(root_2, stream_ns.NextNode());

				}
				stream_ns.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(329, 34);
				// C:\\work\\ReoScript\\ReoScript.g:329:34: ^( TAG_ATTR_LIST ( tagAttr )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(329, 36);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAG_ATTR_LIST, "TAG_ATTR_LIST"), root_2);

				DebugLocation(329, 50);
				// C:\\work\\ReoScript\\ReoScript.g:329:50: ( tagAttr )*
				while ( stream_tagAttr.HasNext )
				{
					DebugLocation(329, 50);
					adaptor.AddChild(root_2, stream_tagAttr.NextTree());

				}
				stream_tagAttr.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(329, 61);
				// C:\\work\\ReoScript\\ReoScript.g:329:61: ( $s)?
				if (stream_s.HasNext)
				{
					DebugLocation(329, 61);
					adaptor.AddChild(root_1, stream_s.NextTree());

				}
				stream_s.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tag", 37);
			LeaveRule("tag", 37);
			LeaveRule_tag();
		}
		DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "tag"); }
		return retval;

	}
	// $ANTLR end "tag"

	partial void EnterRule_tagStmt();
	partial void LeaveRule_tagStmt();

	// $ANTLR start "tagStmt"
	// C:\\work\\ReoScript\\ReoScript.g:332:1: tagStmt : ( statement | tag )* ;
	[GrammarRule("tagStmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> tagStmt()
	{
		EnterRule_tagStmt();
		EnterRule("tagStmt", 38);
		TraceIn("tagStmt", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> statement209 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> tag210 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "tagStmt");
		DebugLocation(332, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:333:2: ( ( statement | tag )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:333:4: ( statement | tag )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(333, 4);
			// C:\\work\\ReoScript\\ReoScript.g:333:4: ( statement | tag )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=3;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==BINARY_LITERATE||LA59_0==DECREMENT||LA59_0==FALSE||(LA59_0>=HEX_LITERATE && LA59_0<=IDENTIFIER)||LA59_0==INCREMENT||(LA59_0>=LBRACE && LA59_0<=LCURLY)||LA59_0==LPAREN||LA59_0==NAN||(LA59_0>=NULL && LA59_0<=NUMBER_LITERATE)||LA59_0==PRIVATE||(LA59_0>=PROTECTED && LA59_0<=PUBLIC)||LA59_0==STRING_LITERATE||(LA59_0>=THIS && LA59_0<=TYPE)||LA59_0==UNDEFINED||LA59_0==118||(LA59_0>=120 && LA59_0<=121)||(LA59_0>=123 && LA59_0<=127)||(LA59_0>=130 && LA59_0<=133)||LA59_0==135))
				{
					alt59 = 1;
				}
				else if ((LA59_0==LESS_THAN))
				{
					alt59 = 2;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:333:5: statement
					{
					DebugLocation(333, 5);
					PushFollow(Follow._statement_in_tagStmt2595);
					statement209=statement();
					PopFollow();

					adaptor.AddChild(root_0, statement209.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:333:17: tag
					{
					DebugLocation(333, 17);
					PushFollow(Follow._tag_in_tagStmt2599);
					tag210=tag();
					PopFollow();

					adaptor.AddChild(root_0, tag210.Tree);

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tagStmt", 38);
			LeaveRule("tagStmt", 38);
			LeaveRule_tagStmt();
		}
		DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "tagStmt"); }
		return retval;

	}
	// $ANTLR end "tagStmt"

	partial void EnterRule_tagAttr();
	partial void LeaveRule_tagAttr();

	// $ANTLR start "tagAttr"
	// C:\\work\\ReoScript\\ReoScript.g:336:1: tagAttr : name= IDENTIFIER '=' val= unaryExpression -> ^( TAG_ATTR $name $val) ;
	[GrammarRule("tagAttr")]
	private AstParserRuleReturnScope<CommonTree, IToken> tagAttr()
	{
		EnterRule_tagAttr();
		EnterRule("tagAttr", 39);
		TraceIn("tagAttr", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken name = default(IToken);
		IToken char_literal211 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> val = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree name_tree = default(CommonTree);
		CommonTree char_literal211_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGNMENT=new RewriteRuleITokenStream(adaptor,"token ASSIGNMENT");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
		try { DebugEnterRule(GrammarFileName, "tagAttr");
		DebugLocation(336, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:337:2: (name= IDENTIFIER '=' val= unaryExpression -> ^( TAG_ATTR $name $val) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:337:4: name= IDENTIFIER '=' val= unaryExpression
			{
			DebugLocation(337, 8);
			name=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tagAttr2614);  
			stream_IDENTIFIER.Add(name);

			DebugLocation(337, 20);
			char_literal211=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_tagAttr2616);  
			stream_ASSIGNMENT.Add(char_literal211);

			DebugLocation(337, 27);
			PushFollow(Follow._unaryExpression_in_tagAttr2620);
			val=unaryExpression();
			PopFollow();

			stream_unaryExpression.Add(val.Tree);


			{
			// AST REWRITE
			// elements: val, name
			// token labels: name
			// rule labels: val, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_name=new RewriteRuleITokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_val=new RewriteRuleSubtreeStream(adaptor,"rule val",val!=null?val.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 338:3: -> ^( TAG_ATTR $name $val)
			{
				DebugLocation(338, 6);
				// C:\\work\\ReoScript\\ReoScript.g:338:6: ^( TAG_ATTR $name $val)
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(338, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAG_ATTR, "TAG_ATTR"), root_1);

				DebugLocation(338, 18);
				adaptor.AddChild(root_1, stream_name.NextNode());
				DebugLocation(338, 24);
				adaptor.AddChild(root_1, stream_val.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tagAttr", 39);
			LeaveRule("tagAttr", 39);
			LeaveRule_tagAttr();
		}
		DebugLocation(339, 1);
		} finally { DebugExitRule(GrammarFileName, "tagAttr"); }
		return retval;

	}
	// $ANTLR end "tagAttr"

	partial void EnterRule_tagTemplateDefine();
	partial void LeaveRule_tagTemplateDefine();

	// $ANTLR start "tagTemplateDefine"
	// C:\\work\\ReoScript\\ReoScript.g:341:1: tagTemplateDefine : ( memberModifier )? 'template' '<' typename= IDENTIFIER '>' ( '(' args= parameterDeclarationList ')' )? tag -> ^( TEMPLATE_DEFINE $typename ^( PARAMETER_DEFINES ( $args)? ) tag ) ;
	[GrammarRule("tagTemplateDefine")]
	private AstParserRuleReturnScope<CommonTree, IToken> tagTemplateDefine()
	{
		EnterRule_tagTemplateDefine();
		EnterRule("tagTemplateDefine", 40);
		TraceIn("tagTemplateDefine", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken typename = default(IToken);
		IToken string_literal213 = default(IToken);
		IToken char_literal214 = default(IToken);
		IToken char_literal215 = default(IToken);
		IToken char_literal216 = default(IToken);
		IToken char_literal217 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> args = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> memberModifier212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> tag218 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree typename_tree = default(CommonTree);
		CommonTree string_literal213_tree = default(CommonTree);
		CommonTree char_literal214_tree = default(CommonTree);
		CommonTree char_literal215_tree = default(CommonTree);
		CommonTree char_literal216_tree = default(CommonTree);
		CommonTree char_literal217_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_GREAT_THAN=new RewriteRuleITokenStream(adaptor,"token GREAT_THAN");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleSubtreeStream stream_tag=new RewriteRuleSubtreeStream(adaptor,"rule tag");
		RewriteRuleSubtreeStream stream_memberModifier=new RewriteRuleSubtreeStream(adaptor,"rule memberModifier");
		RewriteRuleSubtreeStream stream_parameterDeclarationList=new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclarationList");
		try { DebugEnterRule(GrammarFileName, "tagTemplateDefine");
		DebugLocation(341, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:342:2: ( ( memberModifier )? 'template' '<' typename= IDENTIFIER '>' ( '(' args= parameterDeclarationList ')' )? tag -> ^( TEMPLATE_DEFINE $typename ^( PARAMETER_DEFINES ( $args)? ) tag ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:342:4: ( memberModifier )? 'template' '<' typename= IDENTIFIER '>' ( '(' args= parameterDeclarationList ')' )? tag
			{
			DebugLocation(342, 4);
			// C:\\work\\ReoScript\\ReoScript.g:342:4: ( memberModifier )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_0 = input.LA(1);

			if ((LA60_0==PRIVATE||(LA60_0>=PROTECTED && LA60_0<=PUBLIC)))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:342:4: memberModifier
				{
				DebugLocation(342, 4);
				PushFollow(Follow._memberModifier_in_tagTemplateDefine2646);
				memberModifier212=memberModifier();
				PopFollow();

				stream_memberModifier.Add(memberModifier212.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(342, 20);
			string_literal213=(IToken)Match(input,133,Follow._133_in_tagTemplateDefine2649);  
			stream_133.Add(string_literal213);

			DebugLocation(342, 31);
			char_literal214=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_tagTemplateDefine2651);  
			stream_LESS_THAN.Add(char_literal214);

			DebugLocation(342, 43);
			typename=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tagTemplateDefine2655);  
			stream_IDENTIFIER.Add(typename);

			DebugLocation(342, 55);
			char_literal215=(IToken)Match(input,GREAT_THAN,Follow._GREAT_THAN_in_tagTemplateDefine2657);  
			stream_GREAT_THAN.Add(char_literal215);

			DebugLocation(342, 59);
			// C:\\work\\ReoScript\\ReoScript.g:342:59: ( '(' args= parameterDeclarationList ')' )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			int LA61_0 = input.LA(1);

			if ((LA61_0==LPAREN))
			{
				alt61 = 1;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:342:61: '(' args= parameterDeclarationList ')'
				{
				DebugLocation(342, 61);
				char_literal216=(IToken)Match(input,LPAREN,Follow._LPAREN_in_tagTemplateDefine2661);  
				stream_LPAREN.Add(char_literal216);

				DebugLocation(342, 69);
				PushFollow(Follow._parameterDeclarationList_in_tagTemplateDefine2665);
				args=parameterDeclarationList();
				PopFollow();

				stream_parameterDeclarationList.Add(args.Tree);
				DebugLocation(342, 95);
				char_literal217=(IToken)Match(input,RPAREN,Follow._RPAREN_in_tagTemplateDefine2667);  
				stream_RPAREN.Add(char_literal217);


				}
				break;

			}
			} finally { DebugExitSubRule(61); }

			DebugLocation(342, 102);
			PushFollow(Follow._tag_in_tagTemplateDefine2672);
			tag218=tag();
			PopFollow();

			stream_tag.Add(tag218.Tree);


			{
			// AST REWRITE
			// elements: tag, args, typename
			// token labels: typename
			// rule labels: retval, args
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_typename=new RewriteRuleITokenStream(adaptor,"token typename",typename);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_args=new RewriteRuleSubtreeStream(adaptor,"rule args",args!=null?args.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 343:3: -> ^( TEMPLATE_DEFINE $typename ^( PARAMETER_DEFINES ( $args)? ) tag )
			{
				DebugLocation(343, 6);
				// C:\\work\\ReoScript\\ReoScript.g:343:6: ^( TEMPLATE_DEFINE $typename ^( PARAMETER_DEFINES ( $args)? ) tag )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(343, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TEMPLATE_DEFINE, "TEMPLATE_DEFINE"), root_1);

				DebugLocation(343, 25);
				adaptor.AddChild(root_1, stream_typename.NextNode());
				DebugLocation(343, 34);
				// C:\\work\\ReoScript\\ReoScript.g:343:34: ^( PARAMETER_DEFINES ( $args)? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(343, 36);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

				DebugLocation(343, 55);
				// C:\\work\\ReoScript\\ReoScript.g:343:55: ( $args)?
				if (stream_args.HasNext)
				{
					DebugLocation(343, 55);
					adaptor.AddChild(root_2, stream_args.NextTree());

				}
				stream_args.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(343, 62);
				adaptor.AddChild(root_1, stream_tag.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tagTemplateDefine", 40);
			LeaveRule("tagTemplateDefine", 40);
			LeaveRule_tagTemplateDefine();
		}
		DebugLocation(344, 1);
		} finally { DebugExitRule(GrammarFileName, "tagTemplateDefine"); }
		return retval;

	}
	// $ANTLR end "tagTemplateDefine"

	partial void EnterRule_variable();
	partial void LeaveRule_variable();

	// $ANTLR start "variable"
	// C:\\work\\ReoScript\\ReoScript.g:346:1: variable : IDENTIFIER ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<CommonTree, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 41);
		TraceIn("variable", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER219 = default(IToken);

		CommonTree IDENTIFIER219_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(346, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:347:2: ( IDENTIFIER )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:347:4: IDENTIFIER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(347, 4);
			IDENTIFIER219=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_variable2704); 
			IDENTIFIER219_tree = (CommonTree)adaptor.Create(IDENTIFIER219);
			adaptor.AddChild(root_0, IDENTIFIER219_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 41);
			LeaveRule("variable", 41);
			LeaveRule_variable();
		}
		DebugLocation(348, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"

	partial void EnterRule_array_literal();
	partial void LeaveRule_array_literal();

	// $ANTLR start "array_literal"
	// C:\\work\\ReoScript\\ReoScript.g:350:1: array_literal : '[' ( expressionList )? ( ',' )* ']' -> ^( ARRAY_LITERAL ( expressionList )? ) ;
	[GrammarRule("array_literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> array_literal()
	{
		EnterRule_array_literal();
		EnterRule("array_literal", 42);
		TraceIn("array_literal", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal220 = default(IToken);
		IToken char_literal222 = default(IToken);
		IToken char_literal223 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expressionList221 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal220_tree = default(CommonTree);
		CommonTree char_literal222_tree = default(CommonTree);
		CommonTree char_literal223_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RBRACE=new RewriteRuleITokenStream(adaptor,"token RBRACE");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_LBRACE=new RewriteRuleITokenStream(adaptor,"token LBRACE");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		try { DebugEnterRule(GrammarFileName, "array_literal");
		DebugLocation(350, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:351:2: ( '[' ( expressionList )? ( ',' )* ']' -> ^( ARRAY_LITERAL ( expressionList )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:351:4: '[' ( expressionList )? ( ',' )* ']'
			{
			DebugLocation(351, 4);
			char_literal220=(IToken)Match(input,LBRACE,Follow._LBRACE_in_array_literal2715);  
			stream_LBRACE.Add(char_literal220);

			DebugLocation(351, 8);
			// C:\\work\\ReoScript\\ReoScript.g:351:8: ( expressionList )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==BINARY_LITERATE||LA62_0==DECREMENT||LA62_0==FALSE||(LA62_0>=HEX_LITERATE && LA62_0<=IDENTIFIER)||LA62_0==INCREMENT||(LA62_0>=LBRACE && LA62_0<=LCURLY)||LA62_0==LESS_THAN||LA62_0==LPAREN||LA62_0==MINUS||LA62_0==NAN||LA62_0==NOT||(LA62_0>=NULL && LA62_0<=NUMBER_LITERATE)||LA62_0==PLUS||LA62_0==STRING_LITERATE||(LA62_0>=THIS && LA62_0<=TRUE)||LA62_0==UNDEFINED||LA62_0==125||LA62_0==130||LA62_0==134||LA62_0==136))
			{
				alt62 = 1;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:351:8: expressionList
				{
				DebugLocation(351, 8);
				PushFollow(Follow._expressionList_in_array_literal2717);
				expressionList221=expressionList();
				PopFollow();

				stream_expressionList.Add(expressionList221.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(351, 24);
			// C:\\work\\ReoScript\\ReoScript.g:351:24: ( ',' )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				int LA63_0 = input.LA(1);

				if ((LA63_0==COMMA))
				{
					alt63 = 1;
				}


				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:351:24: ','
					{
					DebugLocation(351, 24);
					char_literal222=(IToken)Match(input,COMMA,Follow._COMMA_in_array_literal2720);  
					stream_COMMA.Add(char_literal222);


					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }

			DebugLocation(351, 29);
			char_literal223=(IToken)Match(input,RBRACE,Follow._RBRACE_in_array_literal2723);  
			stream_RBRACE.Add(char_literal223);



			{
			// AST REWRITE
			// elements: expressionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 352:4: -> ^( ARRAY_LITERAL ( expressionList )? )
			{
				DebugLocation(352, 7);
				// C:\\work\\ReoScript\\ReoScript.g:352:7: ^( ARRAY_LITERAL ( expressionList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(352, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_LITERAL, "ARRAY_LITERAL"), root_1);

				DebugLocation(352, 23);
				// C:\\work\\ReoScript\\ReoScript.g:352:23: ( expressionList )?
				if (stream_expressionList.HasNext)
				{
					DebugLocation(352, 23);
					adaptor.AddChild(root_1, stream_expressionList.NextTree());

				}
				stream_expressionList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("array_literal", 42);
			LeaveRule("array_literal", 42);
			LeaveRule_array_literal();
		}
		DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "array_literal"); }
		return retval;

	}
	// $ANTLR end "array_literal"

	partial void EnterRule_object_literal();
	partial void LeaveRule_object_literal();

	// $ANTLR start "object_literal"
	// C:\\work\\ReoScript\\ReoScript.g:355:1: object_literal : '{' ( keypair )? ( ',' keypair )* ( ',' )* '}' -> ^( OBJECT_LITERAL ( keypair )* ) ;
	[GrammarRule("object_literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> object_literal()
	{
		EnterRule_object_literal();
		EnterRule("object_literal", 43);
		TraceIn("object_literal", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal224 = default(IToken);
		IToken char_literal226 = default(IToken);
		IToken char_literal228 = default(IToken);
		IToken char_literal229 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> keypair225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> keypair227 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal224_tree = default(CommonTree);
		CommonTree char_literal226_tree = default(CommonTree);
		CommonTree char_literal228_tree = default(CommonTree);
		CommonTree char_literal229_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_keypair=new RewriteRuleSubtreeStream(adaptor,"rule keypair");
		try { DebugEnterRule(GrammarFileName, "object_literal");
		DebugLocation(355, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:356:2: ( '{' ( keypair )? ( ',' keypair )* ( ',' )* '}' -> ^( OBJECT_LITERAL ( keypair )* ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:356:4: '{' ( keypair )? ( ',' keypair )* ( ',' )* '}'
			{
			DebugLocation(356, 4);
			char_literal224=(IToken)Match(input,LCURLY,Follow._LCURLY_in_object_literal2746);  
			stream_LCURLY.Add(char_literal224);

			DebugLocation(356, 8);
			// C:\\work\\ReoScript\\ReoScript.g:356:8: ( keypair )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==IDENTIFIER||LA64_0==STRING_LITERATE))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:356:8: keypair
				{
				DebugLocation(356, 8);
				PushFollow(Follow._keypair_in_object_literal2748);
				keypair225=keypair();
				PopFollow();

				stream_keypair.Add(keypair225.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }

			DebugLocation(356, 17);
			// C:\\work\\ReoScript\\ReoScript.g:356:17: ( ',' keypair )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if ((LA65_0==COMMA))
				{
					int LA65_1 = input.LA(2);

					if ((LA65_1==IDENTIFIER||LA65_1==STRING_LITERATE))
					{
						alt65 = 1;
					}


				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:356:18: ',' keypair
					{
					DebugLocation(356, 18);
					char_literal226=(IToken)Match(input,COMMA,Follow._COMMA_in_object_literal2752);  
					stream_COMMA.Add(char_literal226);

					DebugLocation(356, 22);
					PushFollow(Follow._keypair_in_object_literal2754);
					keypair227=keypair();
					PopFollow();

					stream_keypair.Add(keypair227.Tree);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }

			DebugLocation(356, 32);
			// C:\\work\\ReoScript\\ReoScript.g:356:32: ( ',' )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if ((LA66_0==COMMA))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:356:32: ','
					{
					DebugLocation(356, 32);
					char_literal228=(IToken)Match(input,COMMA,Follow._COMMA_in_object_literal2758);  
					stream_COMMA.Add(char_literal228);


					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }

			DebugLocation(356, 37);
			char_literal229=(IToken)Match(input,RCURLY,Follow._RCURLY_in_object_literal2761);  
			stream_RCURLY.Add(char_literal229);



			{
			// AST REWRITE
			// elements: keypair
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 357:4: -> ^( OBJECT_LITERAL ( keypair )* )
			{
				DebugLocation(357, 7);
				// C:\\work\\ReoScript\\ReoScript.g:357:7: ^( OBJECT_LITERAL ( keypair )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(357, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(OBJECT_LITERAL, "OBJECT_LITERAL"), root_1);

				DebugLocation(357, 24);
				// C:\\work\\ReoScript\\ReoScript.g:357:24: ( keypair )*
				while ( stream_keypair.HasNext )
				{
					DebugLocation(357, 24);
					adaptor.AddChild(root_1, stream_keypair.NextTree());

				}
				stream_keypair.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("object_literal", 43);
			LeaveRule("object_literal", 43);
			LeaveRule_object_literal();
		}
		DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "object_literal"); }
		return retval;

	}
	// $ANTLR end "object_literal"

	partial void EnterRule_keypair();
	partial void LeaveRule_keypair();

	// $ANTLR start "keypair"
	// C:\\work\\ReoScript\\ReoScript.g:360:1: keypair : ( variable | STRING_LITERATE ) ':' ! expression ;
	[GrammarRule("keypair")]
	private AstParserRuleReturnScope<CommonTree, IToken> keypair()
	{
		EnterRule_keypair();
		EnterRule("keypair", 44);
		TraceIn("keypair", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken STRING_LITERATE231 = default(IToken);
		IToken char_literal232 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variable230 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression233 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree STRING_LITERATE231_tree = default(CommonTree);
		CommonTree char_literal232_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "keypair");
		DebugLocation(360, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:361:2: ( ( variable | STRING_LITERATE ) ':' ! expression )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:361:4: ( variable | STRING_LITERATE ) ':' ! expression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(361, 4);
			// C:\\work\\ReoScript\\ReoScript.g:361:4: ( variable | STRING_LITERATE )
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==IDENTIFIER))
			{
				alt67 = 1;
			}
			else if ((LA67_0==STRING_LITERATE))
			{
				alt67 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:361:5: variable
				{
				DebugLocation(361, 5);
				PushFollow(Follow._variable_in_keypair2786);
				variable230=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable230.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:361:14: STRING_LITERATE
				{
				DebugLocation(361, 14);
				STRING_LITERATE231=(IToken)Match(input,STRING_LITERATE,Follow._STRING_LITERATE_in_keypair2788); 
				STRING_LITERATE231_tree = (CommonTree)adaptor.Create(STRING_LITERATE231);
				adaptor.AddChild(root_0, STRING_LITERATE231_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(67); }

			DebugLocation(361, 34);
			char_literal232=(IToken)Match(input,COLON,Follow._COLON_in_keypair2791); 
			DebugLocation(361, 36);
			PushFollow(Follow._expression_in_keypair2794);
			expression233=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression233.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keypair", 44);
			LeaveRule("keypair", 44);
			LeaveRule_keypair();
		}
		DebugLocation(362, 1);
		} finally { DebugExitRule(GrammarFileName, "keypair"); }
		return retval;

	}
	// $ANTLR end "keypair"

	partial void EnterRule_ifelse();
	partial void LeaveRule_ifelse();

	// $ANTLR start "ifelse"
	// C:\\work\\ReoScript\\ReoScript.g:366:1: ifelse : 'if' LPAREN conditionalOrExpression RPAREN es1= embeddedStatement ( 'else' es2= embeddedStatement )? -> ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? ) ;
	[GrammarRule("ifelse")]
	private AstParserRuleReturnScope<CommonTree, IToken> ifelse()
	{
		EnterRule_ifelse();
		EnterRule("ifelse", 45);
		TraceIn("ifelse", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal234 = default(IToken);
		IToken LPAREN235 = default(IToken);
		IToken RPAREN237 = default(IToken);
		IToken string_literal238 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> es1 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> es2 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression236 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal234_tree = default(CommonTree);
		CommonTree LPAREN235_tree = default(CommonTree);
		CommonTree RPAREN237_tree = default(CommonTree);
		CommonTree string_literal238_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		try { DebugEnterRule(GrammarFileName, "ifelse");
		DebugLocation(366, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:367:2: ( 'if' LPAREN conditionalOrExpression RPAREN es1= embeddedStatement ( 'else' es2= embeddedStatement )? -> ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:367:4: 'if' LPAREN conditionalOrExpression RPAREN es1= embeddedStatement ( 'else' es2= embeddedStatement )?
			{
			DebugLocation(367, 4);
			string_literal234=(IToken)Match(input,126,Follow._126_in_ifelse2809);  
			stream_126.Add(string_literal234);

			DebugLocation(367, 9);
			LPAREN235=(IToken)Match(input,LPAREN,Follow._LPAREN_in_ifelse2811);  
			stream_LPAREN.Add(LPAREN235);

			DebugLocation(367, 16);
			PushFollow(Follow._conditionalOrExpression_in_ifelse2813);
			conditionalOrExpression236=conditionalOrExpression();
			PopFollow();

			stream_conditionalOrExpression.Add(conditionalOrExpression236.Tree);
			DebugLocation(367, 40);
			RPAREN237=(IToken)Match(input,RPAREN,Follow._RPAREN_in_ifelse2815);  
			stream_RPAREN.Add(RPAREN237);

			DebugLocation(367, 50);
			PushFollow(Follow._embeddedStatement_in_ifelse2819);
			es1=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(es1.Tree);
			DebugLocation(367, 69);
			// C:\\work\\ReoScript\\ReoScript.g:367:69: ( 'else' es2= embeddedStatement )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==ELSE))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:367:70: 'else' es2= embeddedStatement
				{
				DebugLocation(367, 70);
				string_literal238=(IToken)Match(input,ELSE,Follow._ELSE_in_ifelse2822);  
				stream_ELSE.Add(string_literal238);

				DebugLocation(367, 80);
				PushFollow(Follow._embeddedStatement_in_ifelse2826);
				es2=embeddedStatement();
				PopFollow();

				stream_embeddedStatement.Add(es2.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(68); }



			{
			// AST REWRITE
			// elements: es2, conditionalOrExpression, es1
			// token labels: 
			// rule labels: retval, es2, es1
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_es2=new RewriteRuleSubtreeStream(adaptor,"rule es2",es2!=null?es2.Tree:null);
			RewriteRuleSubtreeStream stream_es1=new RewriteRuleSubtreeStream(adaptor,"rule es1",es1!=null?es1.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 368:3: -> ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? )
			{
				DebugLocation(368, 6);
				// C:\\work\\ReoScript\\ReoScript.g:368:6: ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(368, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IF_STATEMENT, "IF_STATEMENT"), root_1);

				DebugLocation(368, 21);
				adaptor.AddChild(root_1, stream_conditionalOrExpression.NextTree());
				DebugLocation(368, 46);
				adaptor.AddChild(root_1, stream_es1.NextTree());
				DebugLocation(368, 51);
				// C:\\work\\ReoScript\\ReoScript.g:368:51: ( $es2)?
				if (stream_es2.HasNext)
				{
					DebugLocation(368, 51);
					adaptor.AddChild(root_1, stream_es2.NextTree());

				}
				stream_es2.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ifelse", 45);
			LeaveRule("ifelse", 45);
			LeaveRule_ifelse();
		}
		DebugLocation(369, 1);
		} finally { DebugExitRule(GrammarFileName, "ifelse"); }
		return retval;

	}
	// $ANTLR end "ifelse"

	partial void EnterRule_forStatement();
	partial void LeaveRule_forStatement();

	// $ANTLR start "forStatement"
	// C:\\work\\ReoScript\\ReoScript.g:371:1: forStatement : 'for' '(' ( forInit )? SEMI ( conditionalOrExpression )? SEMI ( statementExpressionList )? ')' embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) ) ;
	[GrammarRule("forStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> forStatement()
	{
		EnterRule_forStatement();
		EnterRule("forStatement", 46);
		TraceIn("forStatement", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal239 = default(IToken);
		IToken char_literal240 = default(IToken);
		IToken SEMI242 = default(IToken);
		IToken SEMI244 = default(IToken);
		IToken char_literal246 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> forInit241 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression243 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpressionList245 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement247 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal239_tree = default(CommonTree);
		CommonTree char_literal240_tree = default(CommonTree);
		CommonTree SEMI242_tree = default(CommonTree);
		CommonTree SEMI244_tree = default(CommonTree);
		CommonTree char_literal246_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
		RewriteRuleSubtreeStream stream_statementExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule statementExpressionList");
		try { DebugEnterRule(GrammarFileName, "forStatement");
		DebugLocation(371, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:372:2: ( 'for' '(' ( forInit )? SEMI ( conditionalOrExpression )? SEMI ( statementExpressionList )? ')' embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:372:4: 'for' '(' ( forInit )? SEMI ( conditionalOrExpression )? SEMI ( statementExpressionList )? ')' embeddedStatement
			{
			DebugLocation(372, 4);
			string_literal239=(IToken)Match(input,124,Follow._124_in_forStatement2860);  
			stream_124.Add(string_literal239);

			DebugLocation(372, 10);
			char_literal240=(IToken)Match(input,LPAREN,Follow._LPAREN_in_forStatement2862);  
			stream_LPAREN.Add(char_literal240);

			DebugLocation(372, 14);
			// C:\\work\\ReoScript\\ReoScript.g:372:14: ( forInit )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==BINARY_LITERATE||LA69_0==DECREMENT||LA69_0==FALSE||(LA69_0>=HEX_LITERATE && LA69_0<=IDENTIFIER)||LA69_0==INCREMENT||(LA69_0>=LBRACE && LA69_0<=LCURLY)||LA69_0==LPAREN||LA69_0==NAN||(LA69_0>=NULL && LA69_0<=NUMBER_LITERATE)||LA69_0==STRING_LITERATE||(LA69_0>=THIS && LA69_0<=TYPE)||LA69_0==UNDEFINED||LA69_0==123||LA69_0==125||LA69_0==130))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:372:14: forInit
				{
				DebugLocation(372, 14);
				PushFollow(Follow._forInit_in_forStatement2864);
				forInit241=forInit();
				PopFollow();

				stream_forInit.Add(forInit241.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(372, 23);
			SEMI242=(IToken)Match(input,SEMI,Follow._SEMI_in_forStatement2867);  
			stream_SEMI.Add(SEMI242);

			DebugLocation(372, 28);
			// C:\\work\\ReoScript\\ReoScript.g:372:28: ( conditionalOrExpression )?
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==BINARY_LITERATE||LA70_0==DECREMENT||LA70_0==FALSE||(LA70_0>=HEX_LITERATE && LA70_0<=IDENTIFIER)||LA70_0==INCREMENT||(LA70_0>=LBRACE && LA70_0<=LCURLY)||LA70_0==LPAREN||LA70_0==MINUS||LA70_0==NAN||LA70_0==NOT||(LA70_0>=NULL && LA70_0<=NUMBER_LITERATE)||LA70_0==PLUS||LA70_0==STRING_LITERATE||(LA70_0>=THIS && LA70_0<=TRUE)||LA70_0==UNDEFINED||LA70_0==125||LA70_0==130||LA70_0==134||LA70_0==136))
			{
				alt70 = 1;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:372:28: conditionalOrExpression
				{
				DebugLocation(372, 28);
				PushFollow(Follow._conditionalOrExpression_in_forStatement2869);
				conditionalOrExpression243=conditionalOrExpression();
				PopFollow();

				stream_conditionalOrExpression.Add(conditionalOrExpression243.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(70); }

			DebugLocation(372, 53);
			SEMI244=(IToken)Match(input,SEMI,Follow._SEMI_in_forStatement2872);  
			stream_SEMI.Add(SEMI244);

			DebugLocation(372, 58);
			// C:\\work\\ReoScript\\ReoScript.g:372:58: ( statementExpressionList )?
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==BINARY_LITERATE||LA71_0==DECREMENT||LA71_0==FALSE||(LA71_0>=HEX_LITERATE && LA71_0<=IDENTIFIER)||LA71_0==INCREMENT||(LA71_0>=LBRACE && LA71_0<=LCURLY)||LA71_0==LPAREN||LA71_0==NAN||(LA71_0>=NULL && LA71_0<=NUMBER_LITERATE)||LA71_0==STRING_LITERATE||(LA71_0>=THIS && LA71_0<=TRUE)||LA71_0==UNDEFINED||LA71_0==123||LA71_0==125||LA71_0==130))
			{
				alt71 = 1;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:372:58: statementExpressionList
				{
				DebugLocation(372, 58);
				PushFollow(Follow._statementExpressionList_in_forStatement2874);
				statementExpressionList245=statementExpressionList();
				PopFollow();

				stream_statementExpressionList.Add(statementExpressionList245.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(372, 83);
			char_literal246=(IToken)Match(input,RPAREN,Follow._RPAREN_in_forStatement2877);  
			stream_RPAREN.Add(char_literal246);

			DebugLocation(372, 87);
			PushFollow(Follow._embeddedStatement_in_forStatement2879);
			embeddedStatement247=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(embeddedStatement247.Tree);


			{
			// AST REWRITE
			// elements: statementExpressionList, forInit, conditionalOrExpression, embeddedStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 373:3: -> ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) )
			{
				DebugLocation(373, 6);
				// C:\\work\\ReoScript\\ReoScript.g:373:6: ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(373, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_STATEMENT, "FOR_STATEMENT"), root_1);

				DebugLocation(374, 5);
				// C:\\work\\ReoScript\\ReoScript.g:374:5: ^( FOR_INIT ( forInit )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(374, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_2);

				DebugLocation(374, 16);
				// C:\\work\\ReoScript\\ReoScript.g:374:16: ( forInit )?
				if (stream_forInit.HasNext)
				{
					DebugLocation(374, 16);
					adaptor.AddChild(root_2, stream_forInit.NextTree());

				}
				stream_forInit.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(375, 5);
				// C:\\work\\ReoScript\\ReoScript.g:375:5: ^( FOR_CONDITION ( conditionalOrExpression )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(375, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_CONDITION, "FOR_CONDITION"), root_2);

				DebugLocation(375, 21);
				// C:\\work\\ReoScript\\ReoScript.g:375:21: ( conditionalOrExpression )?
				if (stream_conditionalOrExpression.HasNext)
				{
					DebugLocation(375, 21);
					adaptor.AddChild(root_2, stream_conditionalOrExpression.NextTree());

				}
				stream_conditionalOrExpression.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(376, 5);
				// C:\\work\\ReoScript\\ReoScript.g:376:5: ^( FOR_ITERATOR ( statementExpressionList )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(376, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_ITERATOR, "FOR_ITERATOR"), root_2);

				DebugLocation(376, 20);
				// C:\\work\\ReoScript\\ReoScript.g:376:20: ( statementExpressionList )?
				if (stream_statementExpressionList.HasNext)
				{
					DebugLocation(376, 20);
					adaptor.AddChild(root_2, stream_statementExpressionList.NextTree());

				}
				stream_statementExpressionList.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(377, 5);
				// C:\\work\\ReoScript\\ReoScript.g:377:5: ^( FOR_BODY embeddedStatement )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(377, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_BODY, "FOR_BODY"), root_2);

				DebugLocation(377, 16);
				adaptor.AddChild(root_2, stream_embeddedStatement.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forStatement", 46);
			LeaveRule("forStatement", 46);
			LeaveRule_forStatement();
		}
		DebugLocation(379, 1);
		} finally { DebugExitRule(GrammarFileName, "forStatement"); }
		return retval;

	}
	// $ANTLR end "forStatement"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();

	// $ANTLR start "forInit"
	// C:\\work\\ReoScript\\ReoScript.g:381:1: forInit : ( localVariableDeclaration | statementExpressionList );
	[GrammarRule("forInit")]
	private AstParserRuleReturnScope<CommonTree, IToken> forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 47);
		TraceIn("forInit", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration248 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpressionList249 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(381, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:382:2: ( localVariableDeclaration | statementExpressionList )
			int alt72=2;
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==TYPE))
			{
				alt72 = 1;
			}
			else if ((LA72_0==BINARY_LITERATE||LA72_0==DECREMENT||LA72_0==FALSE||(LA72_0>=HEX_LITERATE && LA72_0<=IDENTIFIER)||LA72_0==INCREMENT||(LA72_0>=LBRACE && LA72_0<=LCURLY)||LA72_0==LPAREN||LA72_0==NAN||(LA72_0>=NULL && LA72_0<=NUMBER_LITERATE)||LA72_0==STRING_LITERATE||(LA72_0>=THIS && LA72_0<=TRUE)||LA72_0==UNDEFINED||LA72_0==123||LA72_0==125||LA72_0==130))
			{
				alt72 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:382:4: localVariableDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(382, 4);
				PushFollow(Follow._localVariableDeclaration_in_forInit2951);
				localVariableDeclaration248=localVariableDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, localVariableDeclaration248.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:383:4: statementExpressionList
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(383, 4);
				PushFollow(Follow._statementExpressionList_in_forInit2957);
				statementExpressionList249=statementExpressionList();
				PopFollow();

				adaptor.AddChild(root_0, statementExpressionList249.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 47);
			LeaveRule("forInit", 47);
			LeaveRule_forInit();
		}
		DebugLocation(384, 1);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_foreachStatement();
	partial void LeaveRule_foreachStatement();

	// $ANTLR start "foreachStatement"
	// C:\\work\\ReoScript\\ReoScript.g:386:1: foreachStatement : 'for' '(' (local= 'var' )? IDENTIFIER 'in' expression ')' embeddedStatement -> ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement ( $local)? ) ;
	[GrammarRule("foreachStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> foreachStatement()
	{
		EnterRule_foreachStatement();
		EnterRule("foreachStatement", 48);
		TraceIn("foreachStatement", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken local = default(IToken);
		IToken string_literal250 = default(IToken);
		IToken char_literal251 = default(IToken);
		IToken IDENTIFIER252 = default(IToken);
		IToken string_literal253 = default(IToken);
		IToken char_literal255 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement256 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree local_tree = default(CommonTree);
		CommonTree string_literal250_tree = default(CommonTree);
		CommonTree char_literal251_tree = default(CommonTree);
		CommonTree IDENTIFIER252_tree = default(CommonTree);
		CommonTree string_literal253_tree = default(CommonTree);
		CommonTree char_literal255_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		try { DebugEnterRule(GrammarFileName, "foreachStatement");
		DebugLocation(386, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:387:2: ( 'for' '(' (local= 'var' )? IDENTIFIER 'in' expression ')' embeddedStatement -> ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement ( $local)? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:387:4: 'for' '(' (local= 'var' )? IDENTIFIER 'in' expression ')' embeddedStatement
			{
			DebugLocation(387, 4);
			string_literal250=(IToken)Match(input,124,Follow._124_in_foreachStatement2969);  
			stream_124.Add(string_literal250);

			DebugLocation(387, 10);
			char_literal251=(IToken)Match(input,LPAREN,Follow._LPAREN_in_foreachStatement2971);  
			stream_LPAREN.Add(char_literal251);

			DebugLocation(387, 19);
			// C:\\work\\ReoScript\\ReoScript.g:387:19: (local= 'var' )?
			int alt73=2;
			try { DebugEnterSubRule(73);
			try { DebugEnterDecision(73, false);
			int LA73_0 = input.LA(1);

			if ((LA73_0==TYPE))
			{
				alt73 = 1;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:387:19: local= 'var'
				{
				DebugLocation(387, 19);
				local=(IToken)Match(input,TYPE,Follow._TYPE_in_foreachStatement2975);  
				stream_TYPE.Add(local);


				}
				break;

			}
			} finally { DebugExitSubRule(73); }

			DebugLocation(387, 27);
			IDENTIFIER252=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_foreachStatement2978);  
			stream_IDENTIFIER.Add(IDENTIFIER252);

			DebugLocation(387, 38);
			string_literal253=(IToken)Match(input,128,Follow._128_in_foreachStatement2980);  
			stream_128.Add(string_literal253);

			DebugLocation(387, 43);
			PushFollow(Follow._expression_in_foreachStatement2982);
			expression254=expression();
			PopFollow();

			stream_expression.Add(expression254.Tree);
			DebugLocation(387, 54);
			char_literal255=(IToken)Match(input,RPAREN,Follow._RPAREN_in_foreachStatement2984);  
			stream_RPAREN.Add(char_literal255);

			DebugLocation(387, 58);
			PushFollow(Follow._embeddedStatement_in_foreachStatement2986);
			embeddedStatement256=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(embeddedStatement256.Tree);


			{
			// AST REWRITE
			// elements: embeddedStatement, expression, local, IDENTIFIER
			// token labels: local
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_local=new RewriteRuleITokenStream(adaptor,"token local",local);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 388:3: -> ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement ( $local)? )
			{
				DebugLocation(388, 6);
				// C:\\work\\ReoScript\\ReoScript.g:388:6: ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement ( $local)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(388, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOREACH_STATEMENT, "FOREACH_STATEMENT"), root_1);

				DebugLocation(388, 26);
				adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());
				DebugLocation(388, 37);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(388, 48);
				adaptor.AddChild(root_1, stream_embeddedStatement.NextTree());
				DebugLocation(388, 67);
				// C:\\work\\ReoScript\\ReoScript.g:388:67: ( $local)?
				if (stream_local.HasNext)
				{
					DebugLocation(388, 67);
					adaptor.AddChild(root_1, stream_local.NextNode());

				}
				stream_local.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("foreachStatement", 48);
			LeaveRule("foreachStatement", 48);
			LeaveRule_foreachStatement();
		}
		DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "foreachStatement"); }
		return retval;

	}
	// $ANTLR end "foreachStatement"

	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();

	// $ANTLR start "whileStatement"
	// C:\\work\\ReoScript\\ReoScript.g:391:1: whileStatement : 'while' LPAREN ( conditionalOrExpression ) RPAREN embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) ) ;
	[GrammarRule("whileStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 49);
		TraceIn("whileStatement", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal257 = default(IToken);
		IToken LPAREN258 = default(IToken);
		IToken RPAREN260 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression259 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement261 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal257_tree = default(CommonTree);
		CommonTree LPAREN258_tree = default(CommonTree);
		CommonTree RPAREN260_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(391, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:392:2: ( 'while' LPAREN ( conditionalOrExpression ) RPAREN embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:392:4: 'while' LPAREN ( conditionalOrExpression ) RPAREN embeddedStatement
			{
			DebugLocation(392, 4);
			string_literal257=(IToken)Match(input,135,Follow._135_in_whileStatement3015);  
			stream_135.Add(string_literal257);

			DebugLocation(392, 12);
			LPAREN258=(IToken)Match(input,LPAREN,Follow._LPAREN_in_whileStatement3017);  
			stream_LPAREN.Add(LPAREN258);

			DebugLocation(392, 19);
			// C:\\work\\ReoScript\\ReoScript.g:392:19: ( conditionalOrExpression )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:392:20: conditionalOrExpression
			{
			DebugLocation(392, 20);
			PushFollow(Follow._conditionalOrExpression_in_whileStatement3020);
			conditionalOrExpression259=conditionalOrExpression();
			PopFollow();

			stream_conditionalOrExpression.Add(conditionalOrExpression259.Tree);

			}

			DebugLocation(392, 45);
			RPAREN260=(IToken)Match(input,RPAREN,Follow._RPAREN_in_whileStatement3023);  
			stream_RPAREN.Add(RPAREN260);

			DebugLocation(392, 52);
			PushFollow(Follow._embeddedStatement_in_whileStatement3025);
			embeddedStatement261=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(embeddedStatement261.Tree);


			{
			// AST REWRITE
			// elements: embeddedStatement, conditionalOrExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 393:3: -> ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) )
			{
				DebugLocation(393, 7);
				// C:\\work\\ReoScript\\ReoScript.g:393:7: ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(393, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_STATEMENT, "FOR_STATEMENT"), root_1);

				DebugLocation(394, 5);
				// C:\\work\\ReoScript\\ReoScript.g:394:5: ^( FOR_INIT )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(394, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_2);

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(395, 5);
				// C:\\work\\ReoScript\\ReoScript.g:395:5: ^( FOR_CONDITION ( conditionalOrExpression )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(395, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_CONDITION, "FOR_CONDITION"), root_2);

				DebugLocation(395, 21);
				// C:\\work\\ReoScript\\ReoScript.g:395:21: ( conditionalOrExpression )?
				if (stream_conditionalOrExpression.HasNext)
				{
					DebugLocation(395, 21);
					adaptor.AddChild(root_2, stream_conditionalOrExpression.NextTree());

				}
				stream_conditionalOrExpression.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(396, 5);
				// C:\\work\\ReoScript\\ReoScript.g:396:5: ^( FOR_ITERATOR )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(396, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_ITERATOR, "FOR_ITERATOR"), root_2);

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(397, 5);
				// C:\\work\\ReoScript\\ReoScript.g:397:5: ^( FOR_BODY embeddedStatement )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(397, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_BODY, "FOR_BODY"), root_2);

				DebugLocation(397, 16);
				adaptor.AddChild(root_2, stream_embeddedStatement.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whileStatement", 49);
			LeaveRule("whileStatement", 49);
			LeaveRule_whileStatement();
		}
		DebugLocation(399, 1);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return retval;

	}
	// $ANTLR end "whileStatement"

	partial void EnterRule_switchStatement();
	partial void LeaveRule_switchStatement();

	// $ANTLR start "switchStatement"
	// C:\\work\\ReoScript\\ReoScript.g:401:1: switchStatement : 'switch' '(' conditionalOrExpression ')' '{' ( switchCaseStatementList )? '}' -> ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? ) ;
	[GrammarRule("switchStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchStatement()
	{
		EnterRule_switchStatement();
		EnterRule("switchStatement", 50);
		TraceIn("switchStatement", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal262 = default(IToken);
		IToken char_literal263 = default(IToken);
		IToken char_literal265 = default(IToken);
		IToken char_literal266 = default(IToken);
		IToken char_literal268 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression264 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchCaseStatementList267 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal262_tree = default(CommonTree);
		CommonTree char_literal263_tree = default(CommonTree);
		CommonTree char_literal265_tree = default(CommonTree);
		CommonTree char_literal266_tree = default(CommonTree);
		CommonTree char_literal268_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_switchCaseStatementList=new RewriteRuleSubtreeStream(adaptor,"rule switchCaseStatementList");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		try { DebugEnterRule(GrammarFileName, "switchStatement");
		DebugLocation(401, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:402:2: ( 'switch' '(' conditionalOrExpression ')' '{' ( switchCaseStatementList )? '}' -> ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:402:4: 'switch' '(' conditionalOrExpression ')' '{' ( switchCaseStatementList )? '}'
			{
			DebugLocation(402, 4);
			string_literal262=(IToken)Match(input,132,Follow._132_in_switchStatement3091);  
			stream_132.Add(string_literal262);

			DebugLocation(402, 13);
			char_literal263=(IToken)Match(input,LPAREN,Follow._LPAREN_in_switchStatement3093);  
			stream_LPAREN.Add(char_literal263);

			DebugLocation(402, 17);
			PushFollow(Follow._conditionalOrExpression_in_switchStatement3095);
			conditionalOrExpression264=conditionalOrExpression();
			PopFollow();

			stream_conditionalOrExpression.Add(conditionalOrExpression264.Tree);
			DebugLocation(402, 41);
			char_literal265=(IToken)Match(input,RPAREN,Follow._RPAREN_in_switchStatement3097);  
			stream_RPAREN.Add(char_literal265);

			DebugLocation(403, 4);
			char_literal266=(IToken)Match(input,LCURLY,Follow._LCURLY_in_switchStatement3102);  
			stream_LCURLY.Add(char_literal266);

			DebugLocation(403, 8);
			// C:\\work\\ReoScript\\ReoScript.g:403:8: ( switchCaseStatementList )?
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==BINARY_LITERATE||LA74_0==DECREMENT||LA74_0==FALSE||(LA74_0>=HEX_LITERATE && LA74_0<=IDENTIFIER)||LA74_0==INCREMENT||(LA74_0>=LBRACE && LA74_0<=LCURLY)||LA74_0==LPAREN||LA74_0==NAN||(LA74_0>=NULL && LA74_0<=NUMBER_LITERATE)||LA74_0==PRIVATE||(LA74_0>=PROTECTED && LA74_0<=PUBLIC)||LA74_0==STRING_LITERATE||(LA74_0>=THIS && LA74_0<=TYPE)||LA74_0==UNDEFINED||(LA74_0>=118 && LA74_0<=127)||(LA74_0>=130 && LA74_0<=133)||LA74_0==135))
			{
				alt74 = 1;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:403:8: switchCaseStatementList
				{
				DebugLocation(403, 8);
				PushFollow(Follow._switchCaseStatementList_in_switchStatement3104);
				switchCaseStatementList267=switchCaseStatementList();
				PopFollow();

				stream_switchCaseStatementList.Add(switchCaseStatementList267.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(74); }

			DebugLocation(403, 33);
			char_literal268=(IToken)Match(input,RCURLY,Follow._RCURLY_in_switchStatement3107);  
			stream_RCURLY.Add(char_literal268);



			{
			// AST REWRITE
			// elements: switchCaseStatementList, conditionalOrExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 404:4: -> ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? )
			{
				DebugLocation(404, 7);
				// C:\\work\\ReoScript\\ReoScript.g:404:7: ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(404, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH, "SWITCH"), root_1);

				DebugLocation(404, 16);
				adaptor.AddChild(root_1, stream_conditionalOrExpression.NextTree());
				DebugLocation(404, 40);
				// C:\\work\\ReoScript\\ReoScript.g:404:40: ( switchCaseStatementList )?
				if (stream_switchCaseStatementList.HasNext)
				{
					DebugLocation(404, 40);
					adaptor.AddChild(root_1, stream_switchCaseStatementList.NextTree());

				}
				stream_switchCaseStatementList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchStatement", 50);
			LeaveRule("switchStatement", 50);
			LeaveRule_switchStatement();
		}
		DebugLocation(405, 1);
		} finally { DebugExitRule(GrammarFileName, "switchStatement"); }
		return retval;

	}
	// $ANTLR end "switchStatement"

	partial void EnterRule_switchCaseStatementList();
	partial void LeaveRule_switchCaseStatementList();

	// $ANTLR start "switchCaseStatementList"
	// C:\\work\\ReoScript\\ReoScript.g:407:1: switchCaseStatementList : ( switchCaseCondition )+ ;
	[GrammarRule("switchCaseStatementList")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseStatementList()
	{
		EnterRule_switchCaseStatementList();
		EnterRule("switchCaseStatementList", 51);
		TraceIn("switchCaseStatementList", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> switchCaseCondition269 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "switchCaseStatementList");
		DebugLocation(407, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:408:2: ( ( switchCaseCondition )+ )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:408:4: ( switchCaseCondition )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(408, 4);
			// C:\\work\\ReoScript\\ReoScript.g:408:4: ( switchCaseCondition )+
			int cnt75=0;
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==BINARY_LITERATE||LA75_0==DECREMENT||LA75_0==FALSE||(LA75_0>=HEX_LITERATE && LA75_0<=IDENTIFIER)||LA75_0==INCREMENT||(LA75_0>=LBRACE && LA75_0<=LCURLY)||LA75_0==LPAREN||LA75_0==NAN||(LA75_0>=NULL && LA75_0<=NUMBER_LITERATE)||LA75_0==PRIVATE||(LA75_0>=PROTECTED && LA75_0<=PUBLIC)||LA75_0==STRING_LITERATE||(LA75_0>=THIS && LA75_0<=TYPE)||LA75_0==UNDEFINED||(LA75_0>=118 && LA75_0<=127)||(LA75_0>=130 && LA75_0<=133)||LA75_0==135))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:408:5: switchCaseCondition
					{
					DebugLocation(408, 5);
					PushFollow(Follow._switchCaseCondition_in_switchCaseStatementList3133);
					switchCaseCondition269=switchCaseCondition();
					PopFollow();

					adaptor.AddChild(root_0, switchCaseCondition269.Tree);

					}
					break;

				default:
					if (cnt75 >= 1)
						goto loop75;

					EarlyExitException eee75 = new EarlyExitException( 75, input );
					DebugRecognitionException(eee75);
					throw eee75;
				}
				cnt75++;
			}
			loop75:
				;

			} finally { DebugExitSubRule(75); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseStatementList", 51);
			LeaveRule("switchCaseStatementList", 51);
			LeaveRule_switchCaseStatementList();
		}
		DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "switchCaseStatementList"); }
		return retval;

	}
	// $ANTLR end "switchCaseStatementList"

	partial void EnterRule_switchCaseCondition();
	partial void LeaveRule_switchCaseCondition();

	// $ANTLR start "switchCaseCondition"
	// C:\\work\\ReoScript\\ReoScript.g:411:1: switchCaseCondition : ( 'case' expression ':' -> ^( SWITCH_CASE expression ) | statement -> statement | 'default' ':' -> ^( SWITCH_CASE_ELSE ) );
	[GrammarRule("switchCaseCondition")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseCondition()
	{
		EnterRule_switchCaseCondition();
		EnterRule("switchCaseCondition", 52);
		TraceIn("switchCaseCondition", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal270 = default(IToken);
		IToken char_literal272 = default(IToken);
		IToken string_literal274 = default(IToken);
		IToken char_literal275 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression271 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement273 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal270_tree = default(CommonTree);
		CommonTree char_literal272_tree = default(CommonTree);
		CommonTree string_literal274_tree = default(CommonTree);
		CommonTree char_literal275_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "switchCaseCondition");
		DebugLocation(411, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:412:2: ( 'case' expression ':' -> ^( SWITCH_CASE expression ) | statement -> statement | 'default' ':' -> ^( SWITCH_CASE_ELSE ) )
			int alt76=3;
			try { DebugEnterDecision(76, false);
			switch (input.LA(1))
			{
			case 119:
				{
				alt76 = 1;
				}
				break;
			case BINARY_LITERATE:
			case DECREMENT:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case INCREMENT:
			case LBRACE:
			case LCURLY:
			case LPAREN:
			case NAN:
			case NULL:
			case NUMBER_LITERATE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case TYPE:
			case UNDEFINED:
			case 118:
			case 120:
			case 121:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 130:
			case 131:
			case 132:
			case 133:
			case 135:
				{
				alt76 = 2;
				}
				break;
			case 122:
				{
				alt76 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:413:4: 'case' expression ':'
				{
				DebugLocation(413, 4);
				string_literal270=(IToken)Match(input,119,Follow._119_in_switchCaseCondition3151);  
				stream_119.Add(string_literal270);

				DebugLocation(413, 11);
				PushFollow(Follow._expression_in_switchCaseCondition3153);
				expression271=expression();
				PopFollow();

				stream_expression.Add(expression271.Tree);
				DebugLocation(413, 22);
				char_literal272=(IToken)Match(input,COLON,Follow._COLON_in_switchCaseCondition3155);  
				stream_COLON.Add(char_literal272);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 413:28: -> ^( SWITCH_CASE expression )
				{
					DebugLocation(413, 31);
					// C:\\work\\ReoScript\\ReoScript.g:413:31: ^( SWITCH_CASE expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(413, 33);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH_CASE, "SWITCH_CASE"), root_1);

					DebugLocation(413, 45);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:414:4: statement
				{
				DebugLocation(414, 4);
				PushFollow(Follow._statement_in_switchCaseCondition3170);
				statement273=statement();
				PopFollow();

				stream_statement.Add(statement273.Tree);


				{
				// AST REWRITE
				// elements: statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 414:19: -> statement
				{
					DebugLocation(414, 22);
					adaptor.AddChild(root_0, stream_statement.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:415:4: 'default' ':'
				{
				DebugLocation(415, 4);
				string_literal274=(IToken)Match(input,122,Follow._122_in_switchCaseCondition3184);  
				stream_122.Add(string_literal274);

				DebugLocation(415, 14);
				char_literal275=(IToken)Match(input,COLON,Follow._COLON_in_switchCaseCondition3186);  
				stream_COLON.Add(char_literal275);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 415:22: -> ^( SWITCH_CASE_ELSE )
				{
					DebugLocation(415, 25);
					// C:\\work\\ReoScript\\ReoScript.g:415:25: ^( SWITCH_CASE_ELSE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(415, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH_CASE_ELSE, "SWITCH_CASE_ELSE"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseCondition", 52);
			LeaveRule("switchCaseCondition", 52);
			LeaveRule_switchCaseCondition();
		}
		DebugLocation(416, 1);
		} finally { DebugExitRule(GrammarFileName, "switchCaseCondition"); }
		return retval;

	}
	// $ANTLR end "switchCaseCondition"

	partial void EnterRule_terminalStatement();
	partial void LeaveRule_terminalStatement();

	// $ANTLR start "terminalStatement"
	// C:\\work\\ReoScript\\ReoScript.g:418:1: terminalStatement : ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE ) SEMI ;
	[GrammarRule("terminalStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> terminalStatement()
	{
		EnterRule_terminalStatement();
		EnterRule("terminalStatement", 53);
		TraceIn("terminalStatement", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal277 = default(IToken);
		IToken string_literal278 = default(IToken);
		IToken SEMI279 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> returnStatement276 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal277_tree = default(CommonTree);
		CommonTree string_literal278_tree = default(CommonTree);
		CommonTree SEMI279_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_returnStatement=new RewriteRuleSubtreeStream(adaptor,"rule returnStatement");
		try { DebugEnterRule(GrammarFileName, "terminalStatement");
		DebugLocation(418, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:419:2: ( ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE ) SEMI )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:419:4: ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE ) SEMI
			{
			DebugLocation(419, 4);
			// C:\\work\\ReoScript\\ReoScript.g:419:4: ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE )
			int alt77=3;
			try { DebugEnterSubRule(77);
			try { DebugEnterDecision(77, false);
			switch (input.LA(1))
			{
			case 131:
				{
				alt77 = 1;
				}
				break;
			case 118:
				{
				alt77 = 2;
				}
				break;
			case 121:
				{
				alt77 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:419:6: returnStatement
				{
				DebugLocation(419, 6);
				PushFollow(Follow._returnStatement_in_terminalStatement3210);
				returnStatement276=returnStatement();
				PopFollow();

				stream_returnStatement.Add(returnStatement276.Tree);


				{
				// AST REWRITE
				// elements: returnStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 419:22: -> returnStatement
				{
					DebugLocation(419, 25);
					adaptor.AddChild(root_0, stream_returnStatement.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:419:43: ( 'break' )
				{
				DebugLocation(419, 43);
				// C:\\work\\ReoScript\\ReoScript.g:419:43: ( 'break' )
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:419:44: 'break'
				{
				DebugLocation(419, 44);
				string_literal277=(IToken)Match(input,118,Follow._118_in_terminalStatement3219);  
				stream_118.Add(string_literal277);


				}



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 419:52: -> BREAK
				{
					DebugLocation(419, 54);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(BREAK, "BREAK"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:419:62: ( 'continue' )
				{
				DebugLocation(419, 62);
				// C:\\work\\ReoScript\\ReoScript.g:419:62: ( 'continue' )
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:419:63: 'continue'
				{
				DebugLocation(419, 63);
				string_literal278=(IToken)Match(input,121,Follow._121_in_terminalStatement3227);  
				stream_121.Add(string_literal278);


				}



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 419:74: -> CONTINUE
				{
					DebugLocation(419, 76);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CONTINUE, "CONTINUE"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(77); }

			DebugLocation(419, 87);
			SEMI279=(IToken)Match(input,SEMI,Follow._SEMI_in_terminalStatement3234);  
			stream_SEMI.Add(SEMI279);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("terminalStatement", 53);
			LeaveRule("terminalStatement", 53);
			LeaveRule_terminalStatement();
		}
		DebugLocation(420, 1);
		} finally { DebugExitRule(GrammarFileName, "terminalStatement"); }
		return retval;

	}
	// $ANTLR end "terminalStatement"

	partial void EnterRule_returnStatement();
	partial void LeaveRule_returnStatement();

	// $ANTLR start "returnStatement"
	// C:\\work\\ReoScript\\ReoScript.g:422:1: returnStatement : 'return' ( expression )? -> ^( RETURN ( expression )? ) ;
	[GrammarRule("returnStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> returnStatement()
	{
		EnterRule_returnStatement();
		EnterRule("returnStatement", 54);
		TraceIn("returnStatement", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal280 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression281 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal280_tree = default(CommonTree);
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "returnStatement");
		DebugLocation(422, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:423:2: ( 'return' ( expression )? -> ^( RETURN ( expression )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:423:4: 'return' ( expression )?
			{
			DebugLocation(423, 4);
			string_literal280=(IToken)Match(input,131,Follow._131_in_returnStatement3245);  
			stream_131.Add(string_literal280);

			DebugLocation(423, 13);
			// C:\\work\\ReoScript\\ReoScript.g:423:13: ( expression )?
			int alt78=2;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==BINARY_LITERATE||LA78_0==DECREMENT||LA78_0==FALSE||(LA78_0>=HEX_LITERATE && LA78_0<=IDENTIFIER)||LA78_0==INCREMENT||(LA78_0>=LBRACE && LA78_0<=LCURLY)||LA78_0==LESS_THAN||LA78_0==LPAREN||LA78_0==MINUS||LA78_0==NAN||LA78_0==NOT||(LA78_0>=NULL && LA78_0<=NUMBER_LITERATE)||LA78_0==PLUS||LA78_0==STRING_LITERATE||(LA78_0>=THIS && LA78_0<=TRUE)||LA78_0==UNDEFINED||LA78_0==125||LA78_0==130||LA78_0==134||LA78_0==136))
			{
				alt78 = 1;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:423:13: expression
				{
				DebugLocation(423, 13);
				PushFollow(Follow._expression_in_returnStatement3247);
				expression281=expression();
				PopFollow();

				stream_expression.Add(expression281.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(78); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 423:25: -> ^( RETURN ( expression )? )
			{
				DebugLocation(423, 28);
				// C:\\work\\ReoScript\\ReoScript.g:423:28: ^( RETURN ( expression )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(423, 30);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, "RETURN"), root_1);

				DebugLocation(423, 37);
				// C:\\work\\ReoScript\\ReoScript.g:423:37: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(423, 37);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("returnStatement", 54);
			LeaveRule("returnStatement", 54);
			LeaveRule_returnStatement();
		}
		DebugLocation(424, 1);
		} finally { DebugExitRule(GrammarFileName, "returnStatement"); }
		return retval;

	}
	// $ANTLR end "returnStatement"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();

	// $ANTLR start "literal"
	// C:\\work\\ReoScript\\ReoScript.g:429:1: literal : ( TRUE | FALSE | NUMBER_LITERATE | STRING_LITERATE | THIS | NULL | UNDEFINED | HEX_LITERATE | BINARY_LITERATE | NAN );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 55);
		TraceIn("literal", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set282 = default(IToken);

		CommonTree set282_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(429, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:430:2: ( TRUE | FALSE | NUMBER_LITERATE | STRING_LITERATE | THIS | NULL | UNDEFINED | HEX_LITERATE | BINARY_LITERATE | NAN )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(430, 2);

			set282=(IToken)input.LT(1);
			if (input.LA(1)==BINARY_LITERATE||input.LA(1)==FALSE||input.LA(1)==HEX_LITERATE||input.LA(1)==NAN||(input.LA(1)>=NULL && input.LA(1)<=NUMBER_LITERATE)||input.LA(1)==STRING_LITERATE||(input.LA(1)>=THIS && input.LA(1)<=TRUE)||input.LA(1)==UNDEFINED)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set282));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 55);
			LeaveRule("literal", 55);
			LeaveRule_literal();
		}
		DebugLocation(441, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _statement_in_script461 = new BitSet(new ulong[]{0x64C008100100002UL,0xFB40B80206803102UL,0xBCUL});
		public static readonly BitSet _function_define_in_function_defines474 = new BitSet(new ulong[]{0x2UL,0x2000000006800000UL});
		public static readonly BitSet _memberModifier_in_function_define486 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_function_define489 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_function_define493 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LPAREN_in_function_define495 = new BitSet(new ulong[]{0x8000000000000UL,0x40000000UL});
		public static readonly BitSet _parameterDeclarationList_in_function_define497 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _RPAREN_in_function_define500 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _block_in_function_define503 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_anonymous_function_define545 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LPAREN_in_anonymous_function_define547 = new BitSet(new ulong[]{0x8000000000000UL,0x40000000UL});
		public static readonly BitSet _parameterDeclarationList_in_anonymous_function_define549 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _RPAREN_in_anonymous_function_define552 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _block_in_anonymous_function_define554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_anonymous_function_define576 = new BitSet(new ulong[]{0x8000000000000UL,0x40000000UL});
		public static readonly BitSet _parameterDeclarationList_in_anonymous_function_define578 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _RPAREN_in_anonymous_function_define581 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_anonymous_function_define583 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _block_in_anonymous_function_define591 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_anonymous_function_define615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_anonymous_function_define646 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_anonymous_function_define648 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _block_in_anonymous_function_define656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_anonymous_function_define679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_parameterDeclarationList715 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _COMMA_in_parameterDeclarationList718 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_parameterDeclarationList721 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _parameterDeclarationWithDefaultValue_in_parameterDeclarationWithDefaultValueList735 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _COMMA_in_parameterDeclarationWithDefaultValueList738 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _parameterDeclarationWithDefaultValue_in_parameterDeclarationWithDefaultValueList741 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _IDENTIFIER_in_parameterDeclarationWithDefaultValue754 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _ASSIGNMENT_in_parameterDeclarationWithDefaultValue757 = new BitSet(new ulong[]{0x60C008000100000UL,0x2000980200003102UL});
		public static readonly BitSet _primaryExpression_in_parameterDeclarationWithDefaultValue759 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_block785 = new BitSet(new ulong[]{0x64C008100100000UL,0xFB40B80216803102UL,0xBCUL});
		public static readonly BitSet _statement_in_block787 = new BitSet(new ulong[]{0x64C008100100000UL,0xFB40B80216803102UL,0xBCUL});
		public static readonly BitSet _RCURLY_in_block790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_class_define813 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_class_define815 = new BitSet(new ulong[]{0x400000001000000UL});
		public static readonly BitSet _COLON_in_class_define818 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_class_define821 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_class_define823 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_class_define827 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _LCURLY_in_class_define833 = new BitSet(new ulong[]{0x0UL,0x2000200016800000UL});
		public static readonly BitSet _localMemberVariableDeclaration_in_class_define845 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _SEMI_in_class_define847 = new BitSet(new ulong[]{0x0UL,0x2000200016800000UL});
		public static readonly BitSet _function_define_in_class_define855 = new BitSet(new ulong[]{0x0UL,0x2000200116800000UL});
		public static readonly BitSet _SEMI_in_class_define857 = new BitSet(new ulong[]{0x0UL,0x2000200016800000UL});
		public static readonly BitSet _RCURLY_in_class_define869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _importStatement_in_statement887 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _SEMI_in_statement889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_statement895 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _SEMI_in_statement897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_define_in_statement903 = new BitSet(new ulong[]{0x2UL,0x100000000UL});
		public static readonly BitSet _SEMI_in_statement905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_define_in_statement912 = new BitSet(new ulong[]{0x2UL,0x100000000UL});
		public static readonly BitSet _SEMI_in_statement914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tagTemplateDefine_in_statement921 = new BitSet(new ulong[]{0x2UL,0x100000000UL});
		public static readonly BitSet _SEMI_in_statement923 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _embeddedStatement_in_statement930 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_importStatement941 = new BitSet(new ulong[]{0x8000000000000UL,0x200000000UL});
		public static readonly BitSet _namespace_in_importStatement952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERATE_in_importStatement969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_namespace994 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _DOT_in_namespace997 = new BitSet(new ulong[]{0x8000000000000UL,0x80UL});
		public static readonly BitSet _set_in_namespace999 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _block_in_embeddedStatement1020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementExpression_in_embeddedStatement1025 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _SEMI_in_embeddedStatement1027 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifelse_in_embeddedStatement1033 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_embeddedStatement1038 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _foreachStatement_in_embeddedStatement1043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_embeddedStatement1048 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchStatement_in_embeddedStatement1053 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _terminalStatement_in_embeddedStatement1058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _invocationExpression_in_statementExpression1073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_statementExpression1078 = new BitSet(new ulong[]{0x60C008000100000UL,0x2000980200003102UL});
		public static readonly BitSet _primaryExpression_in_statementExpression1080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_statementExpression1095 = new BitSet(new ulong[]{0x60C008000100000UL,0x2000980200003102UL});
		public static readonly BitSet _primaryExpression_in_statementExpression1097 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCREMENT_in_statementExpression1113 = new BitSet(new ulong[]{0x60C008000100000UL,0x2000980200003102UL});
		public static readonly BitSet _primaryExpression_in_statementExpression1115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_statementExpression1132 = new BitSet(new ulong[]{0x60C008000100000UL,0x2000980200003102UL});
		public static readonly BitSet _primaryExpression_in_statementExpression1134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberModifier_in_localMemberVariableDeclaration1157 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _TYPE_in_localMemberVariableDeclaration1160 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localMemberVariableDeclaration1162 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _COMMA_in_localMemberVariableDeclaration1165 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localMemberVariableDeclaration1167 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _TYPE_in_localVariableDeclaration1205 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localVariableDeclaration1207 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _COMMA_in_localVariableDeclaration1210 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localVariableDeclaration1212 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _IDENTIFIER_in_localVariableDeclarationAssignment1238 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _ASSIGNMENT_in_localVariableDeclarationAssignment1241 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_localVariableDeclarationAssignment1243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_invocationExpression1294 = new BitSet(new ulong[]{0x400001000FFE02UL,0x0UL,0x2UL});
		public static readonly BitSet _ASSIGNMENT_in_invocationExpression1305 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_invocationExpression1307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_PLUS_in_invocationExpression1326 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_invocationExpression1328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_MINUS_in_invocationExpression1354 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_invocationExpression1356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_MUL_in_invocationExpression1382 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_invocationExpression1384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_DIV_in_invocationExpression1410 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_invocationExpression1412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_REM_in_invocationExpression1438 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_invocationExpression1440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_AND_in_invocationExpression1466 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_invocationExpression1468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_OR_in_invocationExpression1494 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_invocationExpression1496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_REV_in_invocationExpression1522 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_invocationExpression1524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_LSHIFT_in_invocationExpression1550 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_invocationExpression1552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_RSHIFT_in_invocationExpression1577 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_invocationExpression1579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCREMENT_in_invocationExpression1604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_invocationExpression1625 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_invocationExpression1646 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_invocationExpression1648 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementExpression_in_statementExpressionList1686 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _COMMA_in_statementExpressionList1689 = new BitSet(new ulong[]{0x64C008100100000UL,0x2800980200003102UL,0x4UL});
		public static readonly BitSet _statementExpression_in_statementExpressionList1692 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _tag_in_expression1717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_expression1723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOF_in_expression1725 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionList1739 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _COMMA_in_expressionList1742 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_expressionList1745 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _conditionalExpression_in_assignmentExpression1759 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _ASSIGNMENT_in_assignmentExpression1762 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_assignmentExpression1765 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalOrExpression_in_conditionalExpression1779 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _CONDITION_in_conditionalExpression1782 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_conditionalExpression1785 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_conditionalExpression1787 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_conditionalExpression1790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression1803 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _LOGICAL_OR_in_conditionalOrExpression1806 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression1809 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression1822 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _LOGICAL_AND_in_conditionalAndExpression1825 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression1828 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression1843 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _OR_in_inclusiveOrExpression1846 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression1849 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression1863 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _XOR_in_exclusiveOrExpression1866 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression1869 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _equalityExpression_in_andExpression1883 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_andExpression1886 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _equalityExpression_in_andExpression1889 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression1902 = new BitSet(new ulong[]{0x2000000002UL,0x800UL});
		public static readonly BitSet _set_in_equalityExpression1905 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression1914 = new BitSet(new ulong[]{0x2000000002UL,0x800UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression1929 = new BitSet(new ulong[]{0x1803000000000002UL});
		public static readonly BitSet _set_in_relationalExpression1932 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression1949 = new BitSet(new ulong[]{0x1803000000000002UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression1963 = new BitSet(new ulong[]{0x2UL,0x80000004UL});
		public static readonly BitSet _set_in_shiftExpression1966 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression1973 = new BitSet(new ulong[]{0x2UL,0x80000004UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression1988 = new BitSet(new ulong[]{0x2UL,0x80020UL});
		public static readonly BitSet _set_in_additiveExpression1991 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression1998 = new BitSet(new ulong[]{0x2UL,0x80020UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression2012 = new BitSet(new ulong[]{0x400000002UL,0xC0UL});
		public static readonly BitSet _set_in_multiplicativeExpression2015 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression2028 = new BitSet(new ulong[]{0x400000002UL,0xC0UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression2047 = new BitSet(new ulong[]{0x40000100000002UL});
		public static readonly BitSet _INCREMENT_in_unaryExpression2057 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_unaryExpression2079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCREMENT_in_unaryExpression2117 = new BitSet(new ulong[]{0x60C008000100000UL,0x2000980200003102UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression2119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_unaryExpression2136 = new BitSet(new ulong[]{0x60C008000100000UL,0x2000980200003102UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression2138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_unaryExpression2155 = new BitSet(new ulong[]{0x60C008000100000UL,0x2000980200003102UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression2157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_unaryExpression2175 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _MINUS_in_unaryExpression2179 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _NOT_in_unaryExpression2183 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _136_in_unaryExpression2187 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression2190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_unaryExpression2211 = new BitSet(new ulong[]{0x60C008000100000UL,0x2000980200003102UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression2213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_primaryExpression2240 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _literal_in_primaryExpression2256 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _array_literal_in_primaryExpression2273 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _anonymous_function_define_in_primaryExpression2287 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _LPAREN_in_primaryExpression2298 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_primaryExpression2300 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _RPAREN_in_primaryExpression2302 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _LPAREN_in_primaryExpression2318 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980240083522UL,0x144UL});
		public static readonly BitSet _RPAREN_in_primaryExpression2326 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _expressionList_in_primaryExpression2345 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _RPAREN_in_primaryExpression2347 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _DOT_in_primaryExpression2379 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_primaryExpression2381 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _LBRACE_in_primaryExpression2401 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_primaryExpression2405 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RBRACE_in_primaryExpression2407 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _object_literal_in_primaryExpression2428 = new BitSet(new ulong[]{0x600000800000002UL,0x2UL});
		public static readonly BitSet _object_literal_in_primaryExpression2454 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _DOT_in_primaryExpression2469 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_primaryExpression2471 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _LESS_THAN_in_tag2499 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tag2504 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_tag2506 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tag2512 = new BitSet(new ulong[]{0xA000000000000UL,0x8000000000000UL});
		public static readonly BitSet _tagAttr_in_tag2514 = new BitSet(new ulong[]{0xA000000000000UL,0x8000000000000UL});
		public static readonly BitSet _GREAT_THAN_in_tag2524 = new BitSet(new ulong[]{0x164C008100100000UL,0xFB50B80206803102UL,0xBCUL});
		public static readonly BitSet _tagStmt_in_tag2528 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _116_in_tag2531 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tag2534 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_tag2536 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tag2540 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _GREAT_THAN_in_tag2542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_tag2548 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_tagStmt2595 = new BitSet(new ulong[]{0x164C008100100002UL,0xFB40B80206803102UL,0xBCUL});
		public static readonly BitSet _tag_in_tagStmt2599 = new BitSet(new ulong[]{0x164C008100100002UL,0xFB40B80206803102UL,0xBCUL});
		public static readonly BitSet _IDENTIFIER_in_tagAttr2614 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _ASSIGNMENT_in_tagAttr2616 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _unaryExpression_in_tagAttr2620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberModifier_in_tagTemplateDefine2646 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_tagTemplateDefine2649 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _LESS_THAN_in_tagTemplateDefine2651 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tagTemplateDefine2655 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _GREAT_THAN_in_tagTemplateDefine2657 = new BitSet(new ulong[]{0x1000000000000000UL,0x2UL});
		public static readonly BitSet _LPAREN_in_tagTemplateDefine2661 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _parameterDeclarationList_in_tagTemplateDefine2665 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _RPAREN_in_tagTemplateDefine2667 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _tag_in_tagTemplateDefine2672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_variable2704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_array_literal2715 = new BitSet(new ulong[]{0x164C008104100000UL,0x2000980208083522UL,0x144UL});
		public static readonly BitSet _expressionList_in_array_literal2717 = new BitSet(new ulong[]{0x4000000UL,0x8000000UL});
		public static readonly BitSet _COMMA_in_array_literal2720 = new BitSet(new ulong[]{0x4000000UL,0x8000000UL});
		public static readonly BitSet _RBRACE_in_array_literal2723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_object_literal2746 = new BitSet(new ulong[]{0x8000004000000UL,0x210000000UL});
		public static readonly BitSet _keypair_in_object_literal2748 = new BitSet(new ulong[]{0x4000000UL,0x10000000UL});
		public static readonly BitSet _COMMA_in_object_literal2752 = new BitSet(new ulong[]{0x8000000000000UL,0x200000000UL});
		public static readonly BitSet _keypair_in_object_literal2754 = new BitSet(new ulong[]{0x4000000UL,0x10000000UL});
		public static readonly BitSet _COMMA_in_object_literal2758 = new BitSet(new ulong[]{0x4000000UL,0x10000000UL});
		public static readonly BitSet _RCURLY_in_object_literal2761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_keypair2786 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _STRING_LITERATE_in_keypair2788 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_keypair2791 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_keypair2794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_ifelse2809 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LPAREN_in_ifelse2811 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _conditionalOrExpression_in_ifelse2813 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _RPAREN_in_ifelse2815 = new BitSet(new ulong[]{0x64C008100100000UL,0x7A40980200003102UL,0x9CUL});
		public static readonly BitSet _embeddedStatement_in_ifelse2819 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _ELSE_in_ifelse2822 = new BitSet(new ulong[]{0x64C008100100000UL,0x7A40980200003102UL,0x9CUL});
		public static readonly BitSet _embeddedStatement_in_ifelse2826 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_forStatement2860 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LPAREN_in_forStatement2862 = new BitSet(new ulong[]{0x64C008100100000UL,0x2800B80300003102UL,0x4UL});
		public static readonly BitSet _forInit_in_forStatement2864 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _SEMI_in_forStatement2867 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980300083522UL,0x144UL});
		public static readonly BitSet _conditionalOrExpression_in_forStatement2869 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _SEMI_in_forStatement2872 = new BitSet(new ulong[]{0x64C008100100000UL,0x2800980240003102UL,0x4UL});
		public static readonly BitSet _statementExpressionList_in_forStatement2874 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _RPAREN_in_forStatement2877 = new BitSet(new ulong[]{0x64C008100100000UL,0x7A40980200003102UL,0x9CUL});
		public static readonly BitSet _embeddedStatement_in_forStatement2879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_forInit2951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementExpressionList_in_forInit2957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_foreachStatement2969 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LPAREN_in_foreachStatement2971 = new BitSet(new ulong[]{0x8000000000000UL,0x200000000000UL});
		public static readonly BitSet _TYPE_in_foreachStatement2975 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_foreachStatement2978 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_foreachStatement2980 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_foreachStatement2982 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _RPAREN_in_foreachStatement2984 = new BitSet(new ulong[]{0x64C008100100000UL,0x7A40980200003102UL,0x9CUL});
		public static readonly BitSet _embeddedStatement_in_foreachStatement2986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_whileStatement3015 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LPAREN_in_whileStatement3017 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _conditionalOrExpression_in_whileStatement3020 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _RPAREN_in_whileStatement3023 = new BitSet(new ulong[]{0x64C008100100000UL,0x7A40980200003102UL,0x9CUL});
		public static readonly BitSet _embeddedStatement_in_whileStatement3025 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_switchStatement3091 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LPAREN_in_switchStatement3093 = new BitSet(new ulong[]{0x64C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _conditionalOrExpression_in_switchStatement3095 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _RPAREN_in_switchStatement3097 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _LCURLY_in_switchStatement3102 = new BitSet(new ulong[]{0x64C008100100000UL,0xFFC0B80216803102UL,0xBCUL});
		public static readonly BitSet _switchCaseStatementList_in_switchStatement3104 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _RCURLY_in_switchStatement3107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseCondition_in_switchCaseStatementList3133 = new BitSet(new ulong[]{0x64C008100100002UL,0xFFC0B80206803102UL,0xBCUL});
		public static readonly BitSet _119_in_switchCaseCondition3151 = new BitSet(new ulong[]{0x164C008100100000UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_switchCaseCondition3153 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_switchCaseCondition3155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_switchCaseCondition3170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_switchCaseCondition3184 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_switchCaseCondition3186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _returnStatement_in_terminalStatement3210 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _118_in_terminalStatement3219 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _121_in_terminalStatement3227 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _SEMI_in_terminalStatement3234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_returnStatement3245 = new BitSet(new ulong[]{0x164C008100100002UL,0x2000980200083522UL,0x144UL});
		public static readonly BitSet _expression_in_returnStatement3247 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Unvell.ReoScript 
