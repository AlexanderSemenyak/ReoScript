//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\work\\ReoScript\\ReoScript.g 2013-02-08 22:21:21

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Unvell.ReoScript 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class ReoScriptParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "ANONYMOUS_FUNCTION_DEFINE", "ARGUMENT_LIST", "ARRAY_ACCESS", "ARRAY_LITERAL", "ASSIGNMENT", "ASSIGN_AND", "ASSIGN_DIV", "ASSIGN_LSHIFT", "ASSIGN_MINUS", "ASSIGN_MUL", "ASSIGN_OR", "ASSIGN_PLUS", "ASSIGN_REM", "ASSIGN_REV", "ASSIGN_RSHIFT", "BLOCK", "BREAK", "COLON", "COMBINE_OBJECT", "COMMA", "COMMENT", "CONDITION", "CONTINUE", "CREATE", "DECLARATION", "DECREMENT", "DELETE", "DIV", "DOT", "ELSE", "EQUALS", "ESCAPE_SEQUENCE", "FALSE", "FOREACH_STATEMENT", "FOR_BODY", "FOR_CONDITION", "FOR_INIT", "FOR_ITERATOR", "FOR_STATEMENT", "FUNCTION_CALL", "FUNCTION_DEFINE", "GREAT_EQUALS", "GREAT_THAN", "HEX_LITERATE", "IDENTIFIER", "IF_STATEMENT", "IMPORT", "INCREMENT", "LBRACE", "LCURLY", "LESS_EQUALS", "LESS_THAN", "LINE_COMMENT", "LOGICAL_AND", "LOGICAL_OR", "LPAREN", "LSHIFT", "MINUS", "MOD", "MUL", "NEWLINE", "NOT", "NOT_EQUALS", "NULL", "NUMBER_LITERATE", "OBJECT_LITERAL", "OR", "PARAMETER_DEFINES", "PLUS", "POST_UNARY_STEP", "PRE_UNARY", "PRE_UNARY_STEP", "PROPERTY_ACCESS", "RBRACE", "RCURLY", "RETURN", "RPAREN", "RSHIFT", "SEMI", "STRING_LITERATE", "SWITCH", "SWITCH_CASE", "SWITCH_CASE_ELSE", "THIS", "TRUE", "TYPE", "UNDEFINED", "WHILE_STATEMENT", "WS", "XOR", "'=>'", "'break'", "'case'", "'continue'", "'default'", "'delete'", "'for'", "'foreach'", "'function'", "'if'", "'import'", "'in'", "'new'", "'return'", "'switch'", "'while'", "'~'"
	};
	public const int EOF=-1;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int AND=4;
	public const int ANONYMOUS_FUNCTION_DEFINE=5;
	public const int ARGUMENT_LIST=6;
	public const int ARRAY_ACCESS=7;
	public const int ARRAY_LITERAL=8;
	public const int ASSIGNMENT=9;
	public const int ASSIGN_AND=10;
	public const int ASSIGN_DIV=11;
	public const int ASSIGN_LSHIFT=12;
	public const int ASSIGN_MINUS=13;
	public const int ASSIGN_MUL=14;
	public const int ASSIGN_OR=15;
	public const int ASSIGN_PLUS=16;
	public const int ASSIGN_REM=17;
	public const int ASSIGN_REV=18;
	public const int ASSIGN_RSHIFT=19;
	public const int BLOCK=20;
	public const int BREAK=21;
	public const int COLON=22;
	public const int COMBINE_OBJECT=23;
	public const int COMMA=24;
	public const int COMMENT=25;
	public const int CONDITION=26;
	public const int CONTINUE=27;
	public const int CREATE=28;
	public const int DECLARATION=29;
	public const int DECREMENT=30;
	public const int DELETE=31;
	public const int DIV=32;
	public const int DOT=33;
	public const int ELSE=34;
	public const int EQUALS=35;
	public const int ESCAPE_SEQUENCE=36;
	public const int FALSE=37;
	public const int FOREACH_STATEMENT=38;
	public const int FOR_BODY=39;
	public const int FOR_CONDITION=40;
	public const int FOR_INIT=41;
	public const int FOR_ITERATOR=42;
	public const int FOR_STATEMENT=43;
	public const int FUNCTION_CALL=44;
	public const int FUNCTION_DEFINE=45;
	public const int GREAT_EQUALS=46;
	public const int GREAT_THAN=47;
	public const int HEX_LITERATE=48;
	public const int IDENTIFIER=49;
	public const int IF_STATEMENT=50;
	public const int IMPORT=51;
	public const int INCREMENT=52;
	public const int LBRACE=53;
	public const int LCURLY=54;
	public const int LESS_EQUALS=55;
	public const int LESS_THAN=56;
	public const int LINE_COMMENT=57;
	public const int LOGICAL_AND=58;
	public const int LOGICAL_OR=59;
	public const int LPAREN=60;
	public const int LSHIFT=61;
	public const int MINUS=62;
	public const int MOD=63;
	public const int MUL=64;
	public const int NEWLINE=65;
	public const int NOT=66;
	public const int NOT_EQUALS=67;
	public const int NULL=68;
	public const int NUMBER_LITERATE=69;
	public const int OBJECT_LITERAL=70;
	public const int OR=71;
	public const int PARAMETER_DEFINES=72;
	public const int PLUS=73;
	public const int POST_UNARY_STEP=74;
	public const int PRE_UNARY=75;
	public const int PRE_UNARY_STEP=76;
	public const int PROPERTY_ACCESS=77;
	public const int RBRACE=78;
	public const int RCURLY=79;
	public const int RETURN=80;
	public const int RPAREN=81;
	public const int RSHIFT=82;
	public const int SEMI=83;
	public const int STRING_LITERATE=84;
	public const int SWITCH=85;
	public const int SWITCH_CASE=86;
	public const int SWITCH_CASE_ELSE=87;
	public const int THIS=88;
	public const int TRUE=89;
	public const int TYPE=90;
	public const int UNDEFINED=91;
	public const int WHILE_STATEMENT=92;
	public const int WS=93;
	public const int XOR=94;

	public ReoScriptParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ReoScriptParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ReoScriptParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\work\\ReoScript\\ReoScript.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_script();
	partial void LeaveRule_script();

	// $ANTLR start "script"
	// C:\\work\\ReoScript\\ReoScript.g:54:1: public script : ( statement )* ;
	[GrammarRule("script")]
	public AstParserRuleReturnScope<CommonTree, IToken> script()
	{
		EnterRule_script();
		EnterRule("script", 1);
		TraceIn("script", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> statement1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "script");
		DebugLocation(54, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:55:2: ( ( statement )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:59:2: ( statement )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(59, 2);
			// C:\\work\\ReoScript\\ReoScript.g:59:2: ( statement )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==DECREMENT||LA1_0==FALSE||(LA1_0>=HEX_LITERATE && LA1_0<=IDENTIFIER)||(LA1_0>=INCREMENT && LA1_0<=LCURLY)||LA1_0==LPAREN||(LA1_0>=NULL && LA1_0<=NUMBER_LITERATE)||LA1_0==STRING_LITERATE||(LA1_0>=THIS && LA1_0<=UNDEFINED)||LA1_0==96||LA1_0==98||(LA1_0>=100 && LA1_0<=105)||(LA1_0>=107 && LA1_0<=110)))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:59:2: statement
					{
					DebugLocation(59, 2);
					PushFollow(Follow._statement_in_script416);
					statement1=statement();
					PopFollow();

					adaptor.AddChild(root_0, statement1.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("script", 1);
			LeaveRule("script", 1);
			LeaveRule_script();
		}
		DebugLocation(60, 1);
		} finally { DebugExitRule(GrammarFileName, "script"); }
		return retval;

	}
	// $ANTLR end "script"

	partial void EnterRule_function_defines();
	partial void LeaveRule_function_defines();

	// $ANTLR start "function_defines"
	// C:\\work\\ReoScript\\ReoScript.g:62:1: function_defines : ( function_define )* ;
	[GrammarRule("function_defines")]
	private AstParserRuleReturnScope<CommonTree, IToken> function_defines()
	{
		EnterRule_function_defines();
		EnterRule("function_defines", 2);
		TraceIn("function_defines", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> function_define2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "function_defines");
		DebugLocation(62, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:63:2: ( ( function_define )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:63:4: ( function_define )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(63, 4);
			// C:\\work\\ReoScript\\ReoScript.g:63:4: ( function_define )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==103))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:63:4: function_define
					{
					DebugLocation(63, 4);
					PushFollow(Follow._function_define_in_function_defines429);
					function_define2=function_define();
					PopFollow();

					adaptor.AddChild(root_0, function_define2.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function_defines", 2);
			LeaveRule("function_defines", 2);
			LeaveRule_function_defines();
		}
		DebugLocation(64, 1);
		} finally { DebugExitRule(GrammarFileName, "function_defines"); }
		return retval;

	}
	// $ANTLR end "function_defines"

	partial void EnterRule_function_define();
	partial void LeaveRule_function_define();

	// $ANTLR start "function_define"
	// C:\\work\\ReoScript\\ReoScript.g:66:1: function_define : 'function' id= IDENTIFIER '(' ( parameterDeclarationList )? ')' block -> ^( FUNCTION_DEFINE $id ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) ;
	[GrammarRule("function_define")]
	private AstParserRuleReturnScope<CommonTree, IToken> function_define()
	{
		EnterRule_function_define();
		EnterRule("function_define", 3);
		TraceIn("function_define", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken id = default(IToken);
		IToken string_literal3 = default(IToken);
		IToken char_literal4 = default(IToken);
		IToken char_literal6 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationList5 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block7 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree id_tree = default(CommonTree);
		CommonTree string_literal3_tree = default(CommonTree);
		CommonTree char_literal4_tree = default(CommonTree);
		CommonTree char_literal6_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_parameterDeclarationList=new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclarationList");
		try { DebugEnterRule(GrammarFileName, "function_define");
		DebugLocation(66, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:67:2: ( 'function' id= IDENTIFIER '(' ( parameterDeclarationList )? ')' block -> ^( FUNCTION_DEFINE $id ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:67:4: 'function' id= IDENTIFIER '(' ( parameterDeclarationList )? ')' block
			{
			DebugLocation(67, 4);
			string_literal3=(IToken)Match(input,103,Follow._103_in_function_define441);  
			stream_103.Add(string_literal3);

			DebugLocation(67, 17);
			id=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_function_define445);  
			stream_IDENTIFIER.Add(id);

			DebugLocation(67, 29);
			char_literal4=(IToken)Match(input,LPAREN,Follow._LPAREN_in_function_define447);  
			stream_LPAREN.Add(char_literal4);

			DebugLocation(67, 33);
			// C:\\work\\ReoScript\\ReoScript.g:67:33: ( parameterDeclarationList )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==IDENTIFIER))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:67:33: parameterDeclarationList
				{
				DebugLocation(67, 33);
				PushFollow(Follow._parameterDeclarationList_in_function_define449);
				parameterDeclarationList5=parameterDeclarationList();
				PopFollow();

				stream_parameterDeclarationList.Add(parameterDeclarationList5.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(67, 59);
			char_literal6=(IToken)Match(input,RPAREN,Follow._RPAREN_in_function_define452);  
			stream_RPAREN.Add(char_literal6);

			DebugLocation(67, 63);
			PushFollow(Follow._block_in_function_define454);
			block7=block();
			PopFollow();

			stream_block.Add(block7.Tree);


			{
			// AST REWRITE
			// elements: id, parameterDeclarationList, block
			// token labels: id
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_id=new RewriteRuleITokenStream(adaptor,"token id",id);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 68:3: -> ^( FUNCTION_DEFINE $id ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
			{
				DebugLocation(68, 6);
				// C:\\work\\ReoScript\\ReoScript.g:68:6: ^( FUNCTION_DEFINE $id ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(68, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_DEFINE, "FUNCTION_DEFINE"), root_1);

				DebugLocation(68, 25);
				adaptor.AddChild(root_1, stream_id.NextNode());
				DebugLocation(68, 28);
				// C:\\work\\ReoScript\\ReoScript.g:68:28: ^( PARAMETER_DEFINES ( parameterDeclarationList )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(68, 30);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

				DebugLocation(68, 48);
				// C:\\work\\ReoScript\\ReoScript.g:68:48: ( parameterDeclarationList )?
				if (stream_parameterDeclarationList.HasNext)
				{
					DebugLocation(68, 48);
					adaptor.AddChild(root_2, stream_parameterDeclarationList.NextTree());

				}
				stream_parameterDeclarationList.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(68, 75);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function_define", 3);
			LeaveRule("function_define", 3);
			LeaveRule_function_define();
		}
		DebugLocation(69, 1);
		} finally { DebugExitRule(GrammarFileName, "function_define"); }
		return retval;

	}
	// $ANTLR end "function_define"

	partial void EnterRule_anonymous_function_define();
	partial void LeaveRule_anonymous_function_define();

	// $ANTLR start "anonymous_function_define"
	// C:\\work\\ReoScript\\ReoScript.g:71:1: anonymous_function_define : ( 'function' '(' ( parameterDeclarationList )? ')' block -> ^( ANONYMOUS_FUNCTION_DEFINE ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | '(' ( parameterDeclarationList )? ')' '=>' block -> ^( ANONYMOUS_FUNCTION_DEFINE ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) );
	[GrammarRule("anonymous_function_define")]
	private AstParserRuleReturnScope<CommonTree, IToken> anonymous_function_define()
	{
		EnterRule_anonymous_function_define();
		EnterRule("anonymous_function_define", 4);
		TraceIn("anonymous_function_define", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal8 = default(IToken);
		IToken char_literal9 = default(IToken);
		IToken char_literal11 = default(IToken);
		IToken char_literal13 = default(IToken);
		IToken char_literal15 = default(IToken);
		IToken string_literal16 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationList10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationList14 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block17 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal8_tree = default(CommonTree);
		CommonTree char_literal9_tree = default(CommonTree);
		CommonTree char_literal11_tree = default(CommonTree);
		CommonTree char_literal13_tree = default(CommonTree);
		CommonTree char_literal15_tree = default(CommonTree);
		CommonTree string_literal16_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_parameterDeclarationList=new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclarationList");
		try { DebugEnterRule(GrammarFileName, "anonymous_function_define");
		DebugLocation(71, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:72:2: ( 'function' '(' ( parameterDeclarationList )? ')' block -> ^( ANONYMOUS_FUNCTION_DEFINE ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) | '(' ( parameterDeclarationList )? ')' '=>' block -> ^( ANONYMOUS_FUNCTION_DEFINE ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block ) )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_0 = input.LA(1);

			if ((LA6_0==103))
			{
				alt6 = 1;
			}
			else if ((LA6_0==LPAREN))
			{
				alt6 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:72:4: 'function' '(' ( parameterDeclarationList )? ')' block
				{
				DebugLocation(72, 4);
				string_literal8=(IToken)Match(input,103,Follow._103_in_anonymous_function_define485);  
				stream_103.Add(string_literal8);

				DebugLocation(72, 15);
				char_literal9=(IToken)Match(input,LPAREN,Follow._LPAREN_in_anonymous_function_define487);  
				stream_LPAREN.Add(char_literal9);

				DebugLocation(72, 19);
				// C:\\work\\ReoScript\\ReoScript.g:72:19: ( parameterDeclarationList )?
				int alt4=2;
				try { DebugEnterSubRule(4);
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==IDENTIFIER))
				{
					alt4 = 1;
				}
				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:72:19: parameterDeclarationList
					{
					DebugLocation(72, 19);
					PushFollow(Follow._parameterDeclarationList_in_anonymous_function_define489);
					parameterDeclarationList10=parameterDeclarationList();
					PopFollow();

					stream_parameterDeclarationList.Add(parameterDeclarationList10.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(4); }

				DebugLocation(72, 45);
				char_literal11=(IToken)Match(input,RPAREN,Follow._RPAREN_in_anonymous_function_define492);  
				stream_RPAREN.Add(char_literal11);

				DebugLocation(72, 49);
				PushFollow(Follow._block_in_anonymous_function_define494);
				block12=block();
				PopFollow();

				stream_block.Add(block12.Tree);


				{
				// AST REWRITE
				// elements: parameterDeclarationList, block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 73:3: -> ^( ANONYMOUS_FUNCTION_DEFINE ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
				{
					DebugLocation(73, 6);
					// C:\\work\\ReoScript\\ReoScript.g:73:6: ^( ANONYMOUS_FUNCTION_DEFINE ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(73, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANONYMOUS_FUNCTION_DEFINE, "ANONYMOUS_FUNCTION_DEFINE"), root_1);

					DebugLocation(73, 34);
					// C:\\work\\ReoScript\\ReoScript.g:73:34: ^( PARAMETER_DEFINES ( parameterDeclarationList )? )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(73, 36);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

					DebugLocation(73, 54);
					// C:\\work\\ReoScript\\ReoScript.g:73:54: ( parameterDeclarationList )?
					if (stream_parameterDeclarationList.HasNext)
					{
						DebugLocation(73, 54);
						adaptor.AddChild(root_2, stream_parameterDeclarationList.NextTree());

					}
					stream_parameterDeclarationList.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(73, 81);
					adaptor.AddChild(root_1, stream_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:74:4: '(' ( parameterDeclarationList )? ')' '=>' block
				{
				DebugLocation(74, 4);
				char_literal13=(IToken)Match(input,LPAREN,Follow._LPAREN_in_anonymous_function_define516);  
				stream_LPAREN.Add(char_literal13);

				DebugLocation(74, 8);
				// C:\\work\\ReoScript\\ReoScript.g:74:8: ( parameterDeclarationList )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==IDENTIFIER))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:74:8: parameterDeclarationList
					{
					DebugLocation(74, 8);
					PushFollow(Follow._parameterDeclarationList_in_anonymous_function_define518);
					parameterDeclarationList14=parameterDeclarationList();
					PopFollow();

					stream_parameterDeclarationList.Add(parameterDeclarationList14.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(74, 34);
				char_literal15=(IToken)Match(input,RPAREN,Follow._RPAREN_in_anonymous_function_define521);  
				stream_RPAREN.Add(char_literal15);

				DebugLocation(74, 38);
				string_literal16=(IToken)Match(input,95,Follow._95_in_anonymous_function_define523);  
				stream_95.Add(string_literal16);

				DebugLocation(74, 43);
				PushFollow(Follow._block_in_anonymous_function_define525);
				block17=block();
				PopFollow();

				stream_block.Add(block17.Tree);


				{
				// AST REWRITE
				// elements: parameterDeclarationList, block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 75:3: -> ^( ANONYMOUS_FUNCTION_DEFINE ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
				{
					DebugLocation(75, 6);
					// C:\\work\\ReoScript\\ReoScript.g:75:6: ^( ANONYMOUS_FUNCTION_DEFINE ^( PARAMETER_DEFINES ( parameterDeclarationList )? ) block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(75, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANONYMOUS_FUNCTION_DEFINE, "ANONYMOUS_FUNCTION_DEFINE"), root_1);

					DebugLocation(75, 34);
					// C:\\work\\ReoScript\\ReoScript.g:75:34: ^( PARAMETER_DEFINES ( parameterDeclarationList )? )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(75, 36);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

					DebugLocation(75, 54);
					// C:\\work\\ReoScript\\ReoScript.g:75:54: ( parameterDeclarationList )?
					if (stream_parameterDeclarationList.HasNext)
					{
						DebugLocation(75, 54);
						adaptor.AddChild(root_2, stream_parameterDeclarationList.NextTree());

					}
					stream_parameterDeclarationList.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(75, 81);
					adaptor.AddChild(root_1, stream_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_function_define", 4);
			LeaveRule("anonymous_function_define", 4);
			LeaveRule_anonymous_function_define();
		}
		DebugLocation(76, 1);
		} finally { DebugExitRule(GrammarFileName, "anonymous_function_define"); }
		return retval;

	}
	// $ANTLR end "anonymous_function_define"

	partial void EnterRule_parameterDeclarationList();
	partial void LeaveRule_parameterDeclarationList();

	// $ANTLR start "parameterDeclarationList"
	// C:\\work\\ReoScript\\ReoScript.g:78:1: parameterDeclarationList : IDENTIFIER ( COMMA ! IDENTIFIER )* ;
	[GrammarRule("parameterDeclarationList")]
	private AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationList()
	{
		EnterRule_parameterDeclarationList();
		EnterRule("parameterDeclarationList", 5);
		TraceIn("parameterDeclarationList", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER18 = default(IToken);
		IToken COMMA19 = default(IToken);
		IToken IDENTIFIER20 = default(IToken);

		CommonTree IDENTIFIER18_tree = default(CommonTree);
		CommonTree COMMA19_tree = default(CommonTree);
		CommonTree IDENTIFIER20_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "parameterDeclarationList");
		DebugLocation(78, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:79:2: ( IDENTIFIER ( COMMA ! IDENTIFIER )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:79:4: IDENTIFIER ( COMMA ! IDENTIFIER )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(79, 4);
			IDENTIFIER18=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_parameterDeclarationList553); 
			IDENTIFIER18_tree = (CommonTree)adaptor.Create(IDENTIFIER18);
			adaptor.AddChild(root_0, IDENTIFIER18_tree);
			DebugLocation(79, 15);
			// C:\\work\\ReoScript\\ReoScript.g:79:15: ( COMMA ! IDENTIFIER )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==COMMA))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:79:16: COMMA ! IDENTIFIER
					{
					DebugLocation(79, 21);
					COMMA19=(IToken)Match(input,COMMA,Follow._COMMA_in_parameterDeclarationList556); 
					DebugLocation(79, 23);
					IDENTIFIER20=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_parameterDeclarationList559); 
					IDENTIFIER20_tree = (CommonTree)adaptor.Create(IDENTIFIER20);
					adaptor.AddChild(root_0, IDENTIFIER20_tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameterDeclarationList", 5);
			LeaveRule("parameterDeclarationList", 5);
			LeaveRule_parameterDeclarationList();
		}
		DebugLocation(80, 1);
		} finally { DebugExitRule(GrammarFileName, "parameterDeclarationList"); }
		return retval;

	}
	// $ANTLR end "parameterDeclarationList"

	partial void EnterRule_block();
	partial void LeaveRule_block();

	// $ANTLR start "block"
	// C:\\work\\ReoScript\\ReoScript.g:82:1: block : '{' ( statement )* '}' -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 6);
		TraceIn("block", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal21 = default(IToken);
		IToken char_literal23 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> statement22 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal21_tree = default(CommonTree);
		CommonTree char_literal23_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(82, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:83:2: ( '{' ( statement )* '}' -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:83:4: '{' ( statement )* '}'
			{
			DebugLocation(83, 4);
			char_literal21=(IToken)Match(input,LCURLY,Follow._LCURLY_in_block572);  
			stream_LCURLY.Add(char_literal21);

			DebugLocation(83, 8);
			// C:\\work\\ReoScript\\ReoScript.g:83:8: ( statement )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==DECREMENT||LA8_0==FALSE||(LA8_0>=HEX_LITERATE && LA8_0<=IDENTIFIER)||(LA8_0>=INCREMENT && LA8_0<=LCURLY)||LA8_0==LPAREN||(LA8_0>=NULL && LA8_0<=NUMBER_LITERATE)||LA8_0==STRING_LITERATE||(LA8_0>=THIS && LA8_0<=UNDEFINED)||LA8_0==96||LA8_0==98||(LA8_0>=100 && LA8_0<=105)||(LA8_0>=107 && LA8_0<=110)))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:83:8: statement
					{
					DebugLocation(83, 8);
					PushFollow(Follow._statement_in_block574);
					statement22=statement();
					PopFollow();

					stream_statement.Add(statement22.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(83, 19);
			char_literal23=(IToken)Match(input,RCURLY,Follow._RCURLY_in_block577);  
			stream_RCURLY.Add(char_literal23);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 84:3: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(84, 6);
				// C:\\work\\ReoScript\\ReoScript.g:84:6: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(84, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(84, 14);
				// C:\\work\\ReoScript\\ReoScript.g:84:14: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(84, 14);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 6);
			LeaveRule("block", 6);
			LeaveRule_block();
		}
		DebugLocation(85, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// C:\\work\\ReoScript\\ReoScript.g:88:1: public statement : ( importStatement SEMI !| localVariableDeclaration SEMI !| function_define ( SEMI !)? | embeddedStatement );
	[GrammarRule("statement")]
	public AstParserRuleReturnScope<CommonTree, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 7);
		TraceIn("statement", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken SEMI25 = default(IToken);
		IToken SEMI27 = default(IToken);
		IToken SEMI29 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> importStatement24 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration26 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> function_define28 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement30 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI25_tree = default(CommonTree);
		CommonTree SEMI27_tree = default(CommonTree);
		CommonTree SEMI29_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(88, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:89:2: ( importStatement SEMI !| localVariableDeclaration SEMI !| function_define ( SEMI !)? | embeddedStatement )
			int alt10=4;
			try { DebugEnterDecision(10, false);
			switch (input.LA(1))
			{
			case 105:
				{
				alt10 = 1;
				}
				break;
			case TYPE:
				{
				alt10 = 2;
				}
				break;
			case 103:
				{
				int LA10_3 = input.LA(2);

				if ((LA10_3==IDENTIFIER))
				{
					alt10 = 3;
				}
				else if ((LA10_3==LPAREN))
				{
					alt10 = 4;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DECREMENT:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case INCREMENT:
			case LBRACE:
			case LCURLY:
			case LPAREN:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case UNDEFINED:
			case 96:
			case 98:
			case 100:
			case 101:
			case 102:
			case 104:
			case 107:
			case 108:
			case 109:
			case 110:
				{
				alt10 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:90:4: importStatement SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(90, 4);
				PushFollow(Follow._importStatement_in_statement606);
				importStatement24=importStatement();
				PopFollow();

				adaptor.AddChild(root_0, importStatement24.Tree);
				DebugLocation(90, 24);
				SEMI25=(IToken)Match(input,SEMI,Follow._SEMI_in_statement608); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:91:4: localVariableDeclaration SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(91, 4);
				PushFollow(Follow._localVariableDeclaration_in_statement614);
				localVariableDeclaration26=localVariableDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, localVariableDeclaration26.Tree);
				DebugLocation(91, 33);
				SEMI27=(IToken)Match(input,SEMI,Follow._SEMI_in_statement616); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:92:4: function_define ( SEMI !)?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(92, 4);
				PushFollow(Follow._function_define_in_statement622);
				function_define28=function_define();
				PopFollow();

				adaptor.AddChild(root_0, function_define28.Tree);
				DebugLocation(92, 24);
				// C:\\work\\ReoScript\\ReoScript.g:92:24: ( SEMI !)?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==SEMI))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:92:24: SEMI !
					{
					DebugLocation(92, 24);
					SEMI29=(IToken)Match(input,SEMI,Follow._SEMI_in_statement624); 

					}
					break;

				}
				} finally { DebugExitSubRule(9); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:93:4: embeddedStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(93, 4);
				PushFollow(Follow._embeddedStatement_in_statement631);
				embeddedStatement30=embeddedStatement();
				PopFollow();

				adaptor.AddChild(root_0, embeddedStatement30.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 7);
			LeaveRule("statement", 7);
			LeaveRule_statement();
		}
		DebugLocation(94, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_importStatement();
	partial void LeaveRule_importStatement();

	// $ANTLR start "importStatement"
	// C:\\work\\ReoScript\\ReoScript.g:96:1: importStatement : 'import' namespace -> ^( IMPORT namespace ) ;
	[GrammarRule("importStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> importStatement()
	{
		EnterRule_importStatement();
		EnterRule("importStatement", 8);
		TraceIn("importStatement", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal31 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> namespace32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal31_tree = default(CommonTree);
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_namespace=new RewriteRuleSubtreeStream(adaptor,"rule namespace");
		try { DebugEnterRule(GrammarFileName, "importStatement");
		DebugLocation(96, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:97:2: ( 'import' namespace -> ^( IMPORT namespace ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:97:4: 'import' namespace
			{
			DebugLocation(97, 4);
			string_literal31=(IToken)Match(input,105,Follow._105_in_importStatement642);  
			stream_105.Add(string_literal31);

			DebugLocation(97, 13);
			PushFollow(Follow._namespace_in_importStatement644);
			namespace32=@namespace();
			PopFollow();

			stream_namespace.Add(namespace32.Tree);


			{
			// AST REWRITE
			// elements: namespace
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 98:3: -> ^( IMPORT namespace )
			{
				DebugLocation(98, 6);
				// C:\\work\\ReoScript\\ReoScript.g:98:6: ^( IMPORT namespace )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(98, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPORT, "IMPORT"), root_1);

				DebugLocation(98, 15);
				adaptor.AddChild(root_1, stream_namespace.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("importStatement", 8);
			LeaveRule("importStatement", 8);
			LeaveRule_importStatement();
		}
		DebugLocation(99, 1);
		} finally { DebugExitRule(GrammarFileName, "importStatement"); }
		return retval;

	}
	// $ANTLR end "importStatement"

	partial void EnterRule_namespace();
	partial void LeaveRule_namespace();

	// $ANTLR start "namespace"
	// C:\\work\\ReoScript\\ReoScript.g:101:1: namespace : IDENTIFIER ( '.' ( IDENTIFIER | '*' ) )* ;
	[GrammarRule("namespace")]
	private AstParserRuleReturnScope<CommonTree, IToken> @namespace()
	{
		EnterRule_namespace();
		EnterRule("namespace", 9);
		TraceIn("namespace", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER33 = default(IToken);
		IToken char_literal34 = default(IToken);
		IToken set35 = default(IToken);

		CommonTree IDENTIFIER33_tree = default(CommonTree);
		CommonTree char_literal34_tree = default(CommonTree);
		CommonTree set35_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "namespace");
		DebugLocation(101, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:102:2: ( IDENTIFIER ( '.' ( IDENTIFIER | '*' ) )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:102:4: IDENTIFIER ( '.' ( IDENTIFIER | '*' ) )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(102, 4);
			IDENTIFIER33=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_namespace665); 
			IDENTIFIER33_tree = (CommonTree)adaptor.Create(IDENTIFIER33);
			adaptor.AddChild(root_0, IDENTIFIER33_tree);
			DebugLocation(102, 15);
			// C:\\work\\ReoScript\\ReoScript.g:102:15: ( '.' ( IDENTIFIER | '*' ) )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==DOT))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:102:16: '.' ( IDENTIFIER | '*' )
					{
					DebugLocation(102, 16);
					char_literal34=(IToken)Match(input,DOT,Follow._DOT_in_namespace668); 
					char_literal34_tree = (CommonTree)adaptor.Create(char_literal34);
					adaptor.AddChild(root_0, char_literal34_tree);
					DebugLocation(102, 20);

					set35=(IToken)input.LT(1);
					if (input.LA(1)==IDENTIFIER||input.LA(1)==MUL)
					{
						input.Consume();
						adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set35));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace", 9);
			LeaveRule("namespace", 9);
			LeaveRule_namespace();
		}
		DebugLocation(103, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace"); }
		return retval;

	}
	// $ANTLR end "namespace"

	partial void EnterRule_embeddedStatement();
	partial void LeaveRule_embeddedStatement();

	// $ANTLR start "embeddedStatement"
	// C:\\work\\ReoScript\\ReoScript.g:105:1: embeddedStatement : ( block | statementExpression SEMI !| ifelse | forStatement | foreachStatement | whileStatement | switchStatement | terminalStatement );
	[GrammarRule("embeddedStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement()
	{
		EnterRule_embeddedStatement();
		EnterRule("embeddedStatement", 10);
		TraceIn("embeddedStatement", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken SEMI38 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> block36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpression37 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ifelse39 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forStatement40 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> foreachStatement41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> whileStatement42 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchStatement43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> terminalStatement44 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI38_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "embeddedStatement");
		DebugLocation(105, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:106:2: ( block | statementExpression SEMI !| ifelse | forStatement | foreachStatement | whileStatement | switchStatement | terminalStatement )
			int alt12=8;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case LCURLY:
				{
				switch (input.LA(2))
				{
				case DECREMENT:
				case FALSE:
				case HEX_LITERATE:
				case INCREMENT:
				case LBRACE:
				case LCURLY:
				case LPAREN:
				case NULL:
				case NUMBER_LITERATE:
				case STRING_LITERATE:
				case THIS:
				case TRUE:
				case TYPE:
				case UNDEFINED:
				case 96:
				case 98:
				case 100:
				case 101:
				case 102:
				case 103:
				case 104:
				case 105:
				case 107:
				case 108:
				case 109:
				case 110:
					{
					alt12 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA12_10 = input.LA(3);

					if (((LA12_10>=ASSIGNMENT && LA12_10<=ASSIGN_RSHIFT)||LA12_10==DECREMENT||LA12_10==DOT||(LA12_10>=INCREMENT && LA12_10<=LCURLY)||LA12_10==LPAREN||LA12_10==SEMI))
					{
						alt12 = 1;
					}
					else if ((LA12_10==COLON))
					{
						alt12 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 12, 10, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case RCURLY:
					{
					switch (input.LA(3))
					{
					case EOF:
					case ELSE:
					case FALSE:
					case HEX_LITERATE:
					case IDENTIFIER:
					case LBRACE:
					case LCURLY:
					case LPAREN:
					case NULL:
					case NUMBER_LITERATE:
					case RCURLY:
					case STRING_LITERATE:
					case THIS:
					case TRUE:
					case TYPE:
					case UNDEFINED:
					case 96:
					case 97:
					case 98:
					case 99:
					case 100:
					case 101:
					case 102:
					case 103:
					case 104:
					case 105:
					case 107:
					case 108:
					case 109:
					case 110:
						{
						alt12 = 1;
						}
						break;
					case INCREMENT:
						{
						int LA12_12 = input.LA(4);

						if ((LA12_12==FALSE||(LA12_12>=HEX_LITERATE && LA12_12<=IDENTIFIER)||(LA12_12>=LBRACE && LA12_12<=LCURLY)||LA12_12==LPAREN||(LA12_12>=NULL && LA12_12<=NUMBER_LITERATE)||LA12_12==STRING_LITERATE||(LA12_12>=THIS && LA12_12<=TRUE)||LA12_12==UNDEFINED||LA12_12==103))
						{
							alt12 = 1;
						}
						else if ((LA12_12==SEMI))
						{
							alt12 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 12, 12, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case DECREMENT:
						{
						int LA12_13 = input.LA(4);

						if ((LA12_13==FALSE||(LA12_13>=HEX_LITERATE && LA12_13<=IDENTIFIER)||(LA12_13>=LBRACE && LA12_13<=LCURLY)||LA12_13==LPAREN||(LA12_13>=NULL && LA12_13<=NUMBER_LITERATE)||LA12_13==STRING_LITERATE||(LA12_13>=THIS && LA12_13<=TRUE)||LA12_13==UNDEFINED||LA12_13==103))
						{
							alt12 = 1;
						}
						else if ((LA12_13==SEMI))
						{
							alt12 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 12, 13, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case ASSIGNMENT:
					case ASSIGN_AND:
					case ASSIGN_DIV:
					case ASSIGN_LSHIFT:
					case ASSIGN_MINUS:
					case ASSIGN_MUL:
					case ASSIGN_OR:
					case ASSIGN_PLUS:
					case ASSIGN_REM:
					case ASSIGN_REV:
					case ASSIGN_RSHIFT:
					case SEMI:
						{
						alt12 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 12, 11, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case COMMA:
					{
					alt12 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 12, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case DECREMENT:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case INCREMENT:
			case LBRACE:
			case LPAREN:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case UNDEFINED:
			case 100:
			case 103:
			case 107:
				{
				alt12 = 2;
				}
				break;
			case 104:
				{
				alt12 = 3;
				}
				break;
			case 101:
				{
				alt12 = 4;
				}
				break;
			case 102:
				{
				alt12 = 5;
				}
				break;
			case 110:
				{
				alt12 = 6;
				}
				break;
			case 109:
				{
				alt12 = 7;
				}
				break;
			case 96:
			case 98:
			case 108:
				{
				alt12 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:107:4: block
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(107, 4);
				PushFollow(Follow._block_in_embeddedStatement691);
				block36=block();
				PopFollow();

				adaptor.AddChild(root_0, block36.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:108:4: statementExpression SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(108, 4);
				PushFollow(Follow._statementExpression_in_embeddedStatement696);
				statementExpression37=statementExpression();
				PopFollow();

				adaptor.AddChild(root_0, statementExpression37.Tree);
				DebugLocation(108, 28);
				SEMI38=(IToken)Match(input,SEMI,Follow._SEMI_in_embeddedStatement698); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:109:4: ifelse
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(109, 4);
				PushFollow(Follow._ifelse_in_embeddedStatement704);
				ifelse39=ifelse();
				PopFollow();

				adaptor.AddChild(root_0, ifelse39.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:110:4: forStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(110, 4);
				PushFollow(Follow._forStatement_in_embeddedStatement709);
				forStatement40=forStatement();
				PopFollow();

				adaptor.AddChild(root_0, forStatement40.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:111:4: foreachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(111, 4);
				PushFollow(Follow._foreachStatement_in_embeddedStatement714);
				foreachStatement41=foreachStatement();
				PopFollow();

				adaptor.AddChild(root_0, foreachStatement41.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\work\\ReoScript\\ReoScript.g:112:4: whileStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(112, 4);
				PushFollow(Follow._whileStatement_in_embeddedStatement719);
				whileStatement42=whileStatement();
				PopFollow();

				adaptor.AddChild(root_0, whileStatement42.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\work\\ReoScript\\ReoScript.g:113:4: switchStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(113, 4);
				PushFollow(Follow._switchStatement_in_embeddedStatement724);
				switchStatement43=switchStatement();
				PopFollow();

				adaptor.AddChild(root_0, switchStatement43.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\work\\ReoScript\\ReoScript.g:114:4: terminalStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(114, 4);
				PushFollow(Follow._terminalStatement_in_embeddedStatement729);
				terminalStatement44=terminalStatement();
				PopFollow();

				adaptor.AddChild(root_0, terminalStatement44.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("embeddedStatement", 10);
			LeaveRule("embeddedStatement", 10);
			LeaveRule_embeddedStatement();
		}
		DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "embeddedStatement"); }
		return retval;

	}
	// $ANTLR end "embeddedStatement"

	partial void EnterRule_statementExpression();
	partial void LeaveRule_statementExpression();

	// $ANTLR start "statementExpression"
	// C:\\work\\ReoScript\\ReoScript.g:117:1: statementExpression : ( invocationExpression | 'new' primaryExpression -> ^( CREATE primaryExpression ) | 'delete' primaryExpression -> ^( DELETE primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) );
	[GrammarRule("statementExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> statementExpression()
	{
		EnterRule_statementExpression();
		EnterRule("statementExpression", 11);
		TraceIn("statementExpression", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal46 = default(IToken);
		IToken string_literal48 = default(IToken);
		IToken string_literal50 = default(IToken);
		IToken string_literal52 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> invocationExpression45 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression47 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression51 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression53 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal46_tree = default(CommonTree);
		CommonTree string_literal48_tree = default(CommonTree);
		CommonTree string_literal50_tree = default(CommonTree);
		CommonTree string_literal52_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INCREMENT=new RewriteRuleITokenStream(adaptor,"token INCREMENT");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_DECREMENT=new RewriteRuleITokenStream(adaptor,"token DECREMENT");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "statementExpression");
		DebugLocation(117, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:118:2: ( invocationExpression | 'new' primaryExpression -> ^( CREATE primaryExpression ) | 'delete' primaryExpression -> ^( DELETE primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) )
			int alt13=5;
			try { DebugEnterDecision(13, false);
			switch (input.LA(1))
			{
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case LBRACE:
			case LCURLY:
			case LPAREN:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case UNDEFINED:
			case 103:
				{
				alt13 = 1;
				}
				break;
			case 107:
				{
				alt13 = 2;
				}
				break;
			case 100:
				{
				alt13 = 3;
				}
				break;
			case INCREMENT:
				{
				alt13 = 4;
				}
				break;
			case DECREMENT:
				{
				alt13 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:120:2: invocationExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(120, 2);
				PushFollow(Follow._invocationExpression_in_statementExpression744);
				invocationExpression45=invocationExpression();
				PopFollow();

				adaptor.AddChild(root_0, invocationExpression45.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:121:4: 'new' primaryExpression
				{
				DebugLocation(121, 4);
				string_literal46=(IToken)Match(input,107,Follow._107_in_statementExpression749);  
				stream_107.Add(string_literal46);

				DebugLocation(121, 10);
				PushFollow(Follow._primaryExpression_in_statementExpression751);
				primaryExpression47=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression47.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 122:3: -> ^( CREATE primaryExpression )
				{
					DebugLocation(122, 6);
					// C:\\work\\ReoScript\\ReoScript.g:122:6: ^( CREATE primaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(122, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CREATE, "CREATE"), root_1);

					DebugLocation(122, 15);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:123:4: 'delete' primaryExpression
				{
				DebugLocation(123, 4);
				string_literal48=(IToken)Match(input,100,Follow._100_in_statementExpression766);  
				stream_100.Add(string_literal48);

				DebugLocation(123, 13);
				PushFollow(Follow._primaryExpression_in_statementExpression768);
				primaryExpression49=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression49.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 124:3: -> ^( DELETE primaryExpression )
				{
					DebugLocation(124, 6);
					// C:\\work\\ReoScript\\ReoScript.g:124:6: ^( DELETE primaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(124, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DELETE, "DELETE"), root_1);

					DebugLocation(124, 15);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:125:4: '++' primaryExpression
				{
				DebugLocation(125, 4);
				string_literal50=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_statementExpression783);  
				stream_INCREMENT.Add(string_literal50);

				DebugLocation(125, 9);
				PushFollow(Follow._primaryExpression_in_statementExpression785);
				primaryExpression51=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression51.Tree);


				{
				// AST REWRITE
				// elements: INCREMENT, primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 126:3: -> ^( PRE_UNARY_STEP primaryExpression '++' )
				{
					DebugLocation(126, 6);
					// C:\\work\\ReoScript\\ReoScript.g:126:6: ^( PRE_UNARY_STEP primaryExpression '++' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(126, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(126, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(126, 41);
					adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:127:4: '--' primaryExpression
				{
				DebugLocation(127, 4);
				string_literal52=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_statementExpression802);  
				stream_DECREMENT.Add(string_literal52);

				DebugLocation(127, 9);
				PushFollow(Follow._primaryExpression_in_statementExpression804);
				primaryExpression53=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression53.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression, DECREMENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 128:3: -> ^( PRE_UNARY_STEP primaryExpression '--' )
				{
					DebugLocation(128, 6);
					// C:\\work\\ReoScript\\ReoScript.g:128:6: ^( PRE_UNARY_STEP primaryExpression '--' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(128, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(128, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(128, 41);
					adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statementExpression", 11);
			LeaveRule("statementExpression", 11);
			LeaveRule_statementExpression();
		}
		DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "statementExpression"); }
		return retval;

	}
	// $ANTLR end "statementExpression"

	partial void EnterRule_localMemberVariableDeclaration();
	partial void LeaveRule_localMemberVariableDeclaration();

	// $ANTLR start "localMemberVariableDeclaration"
	// C:\\work\\ReoScript\\ReoScript.g:131:1: localMemberVariableDeclaration : TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ;
	[GrammarRule("localMemberVariableDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> localMemberVariableDeclaration()
	{
		EnterRule_localMemberVariableDeclaration();
		EnterRule("localMemberVariableDeclaration", 12);
		TraceIn("localMemberVariableDeclaration", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken TYPE54 = default(IToken);
		IToken char_literal56 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment55 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment57 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree TYPE54_tree = default(CommonTree);
		CommonTree char_literal56_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_localVariableDeclarationAssignment=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclarationAssignment");
		try { DebugEnterRule(GrammarFileName, "localMemberVariableDeclaration");
		DebugLocation(131, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:132:2: ( TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:132:24: TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )*
			{
			DebugLocation(132, 24);
			TYPE54=(IToken)Match(input,TYPE,Follow._TYPE_in_localMemberVariableDeclaration829);  
			stream_TYPE.Add(TYPE54);

			DebugLocation(132, 29);
			PushFollow(Follow._localVariableDeclarationAssignment_in_localMemberVariableDeclaration831);
			localVariableDeclarationAssignment55=localVariableDeclarationAssignment();
			PopFollow();

			stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment55.Tree);
			DebugLocation(132, 64);
			// C:\\work\\ReoScript\\ReoScript.g:132:64: ( ',' localVariableDeclarationAssignment )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==COMMA))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:132:65: ',' localVariableDeclarationAssignment
					{
					DebugLocation(132, 65);
					char_literal56=(IToken)Match(input,COMMA,Follow._COMMA_in_localMemberVariableDeclaration834);  
					stream_COMMA.Add(char_literal56);

					DebugLocation(132, 69);
					PushFollow(Follow._localVariableDeclarationAssignment_in_localMemberVariableDeclaration836);
					localVariableDeclarationAssignment57=localVariableDeclarationAssignment();
					PopFollow();

					stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment57.Tree);

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }



			{
			// AST REWRITE
			// elements: TYPE, localVariableDeclarationAssignment
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 133:3: -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ )
			{
				DebugLocation(133, 6);
				// C:\\work\\ReoScript\\ReoScript.g:133:6: ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(133, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DECLARATION, "DECLARATION"), root_1);

				DebugLocation(133, 40);
				adaptor.AddChild(root_1, stream_TYPE.NextNode());
				DebugLocation(133, 45);
				if (!(stream_localVariableDeclarationAssignment.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_localVariableDeclarationAssignment.HasNext )
				{
					DebugLocation(133, 45);
					adaptor.AddChild(root_1, stream_localVariableDeclarationAssignment.NextTree());

				}
				stream_localVariableDeclarationAssignment.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localMemberVariableDeclaration", 12);
			LeaveRule("localMemberVariableDeclaration", 12);
			LeaveRule_localMemberVariableDeclaration();
		}
		DebugLocation(134, 1);
		} finally { DebugExitRule(GrammarFileName, "localMemberVariableDeclaration"); }
		return retval;

	}
	// $ANTLR end "localMemberVariableDeclaration"

	partial void EnterRule_localVariableDeclaration();
	partial void LeaveRule_localVariableDeclaration();

	// $ANTLR start "localVariableDeclaration"
	// C:\\work\\ReoScript\\ReoScript.g:136:1: localVariableDeclaration : TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ;
	[GrammarRule("localVariableDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration()
	{
		EnterRule_localVariableDeclaration();
		EnterRule("localVariableDeclaration", 13);
		TraceIn("localVariableDeclaration", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken TYPE58 = default(IToken);
		IToken char_literal60 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment61 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree TYPE58_tree = default(CommonTree);
		CommonTree char_literal60_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_localVariableDeclarationAssignment=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclarationAssignment");
		try { DebugEnterRule(GrammarFileName, "localVariableDeclaration");
		DebugLocation(136, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:137:2: ( TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:137:4: TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )*
			{
			DebugLocation(137, 4);
			TYPE58=(IToken)Match(input,TYPE,Follow._TYPE_in_localVariableDeclaration865);  
			stream_TYPE.Add(TYPE58);

			DebugLocation(137, 9);
			PushFollow(Follow._localVariableDeclarationAssignment_in_localVariableDeclaration867);
			localVariableDeclarationAssignment59=localVariableDeclarationAssignment();
			PopFollow();

			stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment59.Tree);
			DebugLocation(137, 44);
			// C:\\work\\ReoScript\\ReoScript.g:137:44: ( ',' localVariableDeclarationAssignment )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==COMMA))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:137:45: ',' localVariableDeclarationAssignment
					{
					DebugLocation(137, 45);
					char_literal60=(IToken)Match(input,COMMA,Follow._COMMA_in_localVariableDeclaration870);  
					stream_COMMA.Add(char_literal60);

					DebugLocation(137, 49);
					PushFollow(Follow._localVariableDeclarationAssignment_in_localVariableDeclaration872);
					localVariableDeclarationAssignment61=localVariableDeclarationAssignment();
					PopFollow();

					stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment61.Tree);

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }



			{
			// AST REWRITE
			// elements: localVariableDeclarationAssignment, TYPE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 138:3: -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ )
			{
				DebugLocation(138, 6);
				// C:\\work\\ReoScript\\ReoScript.g:138:6: ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(138, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DECLARATION, "DECLARATION"), root_1);

				DebugLocation(138, 20);
				adaptor.AddChild(root_1, stream_TYPE.NextNode());
				DebugLocation(138, 25);
				if (!(stream_localVariableDeclarationAssignment.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_localVariableDeclarationAssignment.HasNext )
				{
					DebugLocation(138, 25);
					adaptor.AddChild(root_1, stream_localVariableDeclarationAssignment.NextTree());

				}
				stream_localVariableDeclarationAssignment.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclaration", 13);
			LeaveRule("localVariableDeclaration", 13);
			LeaveRule_localVariableDeclaration();
		}
		DebugLocation(139, 1);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclaration"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclaration"

	partial void EnterRule_localVariableDeclarationAssignment();
	partial void LeaveRule_localVariableDeclarationAssignment();

	// $ANTLR start "localVariableDeclarationAssignment"
	// C:\\work\\ReoScript\\ReoScript.g:141:1: localVariableDeclarationAssignment : IDENTIFIER ( '=' expression )? -> ^( ASSIGNMENT IDENTIFIER ( expression )? ) ;
	[GrammarRule("localVariableDeclarationAssignment")]
	private AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment()
	{
		EnterRule_localVariableDeclarationAssignment();
		EnterRule("localVariableDeclarationAssignment", 14);
		TraceIn("localVariableDeclarationAssignment", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER62 = default(IToken);
		IToken char_literal63 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression64 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENTIFIER62_tree = default(CommonTree);
		CommonTree char_literal63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGNMENT=new RewriteRuleITokenStream(adaptor,"token ASSIGNMENT");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "localVariableDeclarationAssignment");
		DebugLocation(141, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:142:2: ( IDENTIFIER ( '=' expression )? -> ^( ASSIGNMENT IDENTIFIER ( expression )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:142:4: IDENTIFIER ( '=' expression )?
			{
			DebugLocation(142, 4);
			IDENTIFIER62=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_localVariableDeclarationAssignment898);  
			stream_IDENTIFIER.Add(IDENTIFIER62);

			DebugLocation(142, 15);
			// C:\\work\\ReoScript\\ReoScript.g:142:15: ( '=' expression )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==ASSIGNMENT))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:142:16: '=' expression
				{
				DebugLocation(142, 16);
				char_literal63=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_localVariableDeclarationAssignment901);  
				stream_ASSIGNMENT.Add(char_literal63);

				DebugLocation(142, 20);
				PushFollow(Follow._expression_in_localVariableDeclarationAssignment903);
				expression64=expression();
				PopFollow();

				stream_expression.Add(expression64.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }



			{
			// AST REWRITE
			// elements: IDENTIFIER, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 143:3: -> ^( ASSIGNMENT IDENTIFIER ( expression )? )
			{
				DebugLocation(143, 6);
				// C:\\work\\ReoScript\\ReoScript.g:143:6: ^( ASSIGNMENT IDENTIFIER ( expression )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(143, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

				DebugLocation(143, 19);
				adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());
				DebugLocation(143, 30);
				// C:\\work\\ReoScript\\ReoScript.g:143:30: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(143, 30);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclarationAssignment", 14);
			LeaveRule("localVariableDeclarationAssignment", 14);
			LeaveRule_localVariableDeclarationAssignment();
		}
		DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclarationAssignment"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclarationAssignment"

	partial void EnterRule_invocationExpression();
	partial void LeaveRule_invocationExpression();

	// $ANTLR start "invocationExpression"
	// C:\\work\\ReoScript\\ReoScript.g:146:1: invocationExpression : id= primaryExpression ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | -> primaryExpression ) ;
	[GrammarRule("invocationExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> invocationExpression()
	{
		EnterRule_invocationExpression();
		EnterRule("invocationExpression", 15);
		TraceIn("invocationExpression", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal65 = default(IToken);
		IToken string_literal67 = default(IToken);
		IToken string_literal69 = default(IToken);
		IToken string_literal71 = default(IToken);
		IToken string_literal73 = default(IToken);
		IToken string_literal75 = default(IToken);
		IToken string_literal77 = default(IToken);
		IToken string_literal79 = default(IToken);
		IToken string_literal81 = default(IToken);
		IToken string_literal83 = default(IToken);
		IToken string_literal85 = default(IToken);
		IToken string_literal87 = default(IToken);
		IToken string_literal88 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> id = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression72 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression74 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression76 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression78 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression80 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression82 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression86 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal65_tree = default(CommonTree);
		CommonTree string_literal67_tree = default(CommonTree);
		CommonTree string_literal69_tree = default(CommonTree);
		CommonTree string_literal71_tree = default(CommonTree);
		CommonTree string_literal73_tree = default(CommonTree);
		CommonTree string_literal75_tree = default(CommonTree);
		CommonTree string_literal77_tree = default(CommonTree);
		CommonTree string_literal79_tree = default(CommonTree);
		CommonTree string_literal81_tree = default(CommonTree);
		CommonTree string_literal83_tree = default(CommonTree);
		CommonTree string_literal85_tree = default(CommonTree);
		CommonTree string_literal87_tree = default(CommonTree);
		CommonTree string_literal88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INCREMENT=new RewriteRuleITokenStream(adaptor,"token INCREMENT");
		RewriteRuleITokenStream stream_ASSIGN_OR=new RewriteRuleITokenStream(adaptor,"token ASSIGN_OR");
		RewriteRuleITokenStream stream_ASSIGN_MUL=new RewriteRuleITokenStream(adaptor,"token ASSIGN_MUL");
		RewriteRuleITokenStream stream_ASSIGN_LSHIFT=new RewriteRuleITokenStream(adaptor,"token ASSIGN_LSHIFT");
		RewriteRuleITokenStream stream_ASSIGN_REM=new RewriteRuleITokenStream(adaptor,"token ASSIGN_REM");
		RewriteRuleITokenStream stream_ASSIGN_REV=new RewriteRuleITokenStream(adaptor,"token ASSIGN_REV");
		RewriteRuleITokenStream stream_ASSIGN_AND=new RewriteRuleITokenStream(adaptor,"token ASSIGN_AND");
		RewriteRuleITokenStream stream_ASSIGN_PLUS=new RewriteRuleITokenStream(adaptor,"token ASSIGN_PLUS");
		RewriteRuleITokenStream stream_ASSIGN_RSHIFT=new RewriteRuleITokenStream(adaptor,"token ASSIGN_RSHIFT");
		RewriteRuleITokenStream stream_ASSIGNMENT=new RewriteRuleITokenStream(adaptor,"token ASSIGNMENT");
		RewriteRuleITokenStream stream_DECREMENT=new RewriteRuleITokenStream(adaptor,"token DECREMENT");
		RewriteRuleITokenStream stream_ASSIGN_MINUS=new RewriteRuleITokenStream(adaptor,"token ASSIGN_MINUS");
		RewriteRuleITokenStream stream_ASSIGN_DIV=new RewriteRuleITokenStream(adaptor,"token ASSIGN_DIV");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "invocationExpression");
		DebugLocation(146, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:147:2: (id= primaryExpression ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | -> primaryExpression ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:148:4: id= primaryExpression ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | -> primaryExpression )
			{
			DebugLocation(148, 6);
			PushFollow(Follow._primaryExpression_in_invocationExpression935);
			id=primaryExpression();
			PopFollow();

			stream_primaryExpression.Add(id.Tree);
			DebugLocation(149, 4);
			// C:\\work\\ReoScript\\ReoScript.g:149:4: ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | -> primaryExpression )
			int alt17=14;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			switch (input.LA(1))
			{
			case ASSIGNMENT:
				{
				alt17 = 1;
				}
				break;
			case ASSIGN_PLUS:
				{
				alt17 = 2;
				}
				break;
			case ASSIGN_MINUS:
				{
				alt17 = 3;
				}
				break;
			case ASSIGN_MUL:
				{
				alt17 = 4;
				}
				break;
			case ASSIGN_DIV:
				{
				alt17 = 5;
				}
				break;
			case ASSIGN_REM:
				{
				alt17 = 6;
				}
				break;
			case ASSIGN_AND:
				{
				alt17 = 7;
				}
				break;
			case ASSIGN_OR:
				{
				alt17 = 8;
				}
				break;
			case ASSIGN_REV:
				{
				alt17 = 9;
				}
				break;
			case ASSIGN_LSHIFT:
				{
				alt17 = 10;
				}
				break;
			case ASSIGN_RSHIFT:
				{
				alt17 = 11;
				}
				break;
			case INCREMENT:
				{
				alt17 = 12;
				}
				break;
			case DECREMENT:
				{
				alt17 = 13;
				}
				break;
			case COMMA:
			case RPAREN:
			case SEMI:
				{
				alt17 = 14;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:150:5: '=' expression
				{
				DebugLocation(150, 5);
				char_literal65=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_invocationExpression946);  
				stream_ASSIGNMENT.Add(char_literal65);

				DebugLocation(150, 9);
				PushFollow(Follow._expression_in_invocationExpression948);
				expression66=expression();
				PopFollow();

				stream_expression.Add(expression66.Tree);


				{
				// AST REWRITE
				// elements: expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 150:21: -> ^( ASSIGNMENT $id expression )
				{
					DebugLocation(150, 24);
					// C:\\work\\ReoScript\\ReoScript.g:150:24: ^( ASSIGNMENT $id expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(150, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(150, 38);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(150, 41);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:151:6: '+=' expression
				{
				DebugLocation(151, 6);
				string_literal67=(IToken)Match(input,ASSIGN_PLUS,Follow._ASSIGN_PLUS_in_invocationExpression967);  
				stream_ASSIGN_PLUS.Add(string_literal67);

				DebugLocation(151, 11);
				PushFollow(Follow._expression_in_invocationExpression969);
				expression68=expression();
				PopFollow();

				stream_expression.Add(expression68.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 151:23: -> ^( ASSIGNMENT $id ^( PLUS $id expression ) )
				{
					DebugLocation(151, 26);
					// C:\\work\\ReoScript\\ReoScript.g:151:26: ^( ASSIGNMENT $id ^( PLUS $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(151, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(151, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(151, 43);
					// C:\\work\\ReoScript\\ReoScript.g:151:43: ^( PLUS $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(151, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PLUS, "PLUS"), root_2);

					DebugLocation(151, 51);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(151, 54);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:152:6: '-=' expression
				{
				DebugLocation(152, 6);
				string_literal69=(IToken)Match(input,ASSIGN_MINUS,Follow._ASSIGN_MINUS_in_invocationExpression995);  
				stream_ASSIGN_MINUS.Add(string_literal69);

				DebugLocation(152, 11);
				PushFollow(Follow._expression_in_invocationExpression997);
				expression70=expression();
				PopFollow();

				stream_expression.Add(expression70.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 152:23: -> ^( ASSIGNMENT $id ^( MINUS $id expression ) )
				{
					DebugLocation(152, 26);
					// C:\\work\\ReoScript\\ReoScript.g:152:26: ^( ASSIGNMENT $id ^( MINUS $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(152, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(152, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(152, 43);
					// C:\\work\\ReoScript\\ReoScript.g:152:43: ^( MINUS $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(152, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MINUS, "MINUS"), root_2);

					DebugLocation(152, 52);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(152, 55);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:153:6: '*=' expression
				{
				DebugLocation(153, 6);
				string_literal71=(IToken)Match(input,ASSIGN_MUL,Follow._ASSIGN_MUL_in_invocationExpression1023);  
				stream_ASSIGN_MUL.Add(string_literal71);

				DebugLocation(153, 11);
				PushFollow(Follow._expression_in_invocationExpression1025);
				expression72=expression();
				PopFollow();

				stream_expression.Add(expression72.Tree);


				{
				// AST REWRITE
				// elements: expression, id, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 153:23: -> ^( ASSIGNMENT $id ^( MUL $id expression ) )
				{
					DebugLocation(153, 26);
					// C:\\work\\ReoScript\\ReoScript.g:153:26: ^( ASSIGNMENT $id ^( MUL $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(153, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(153, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(153, 43);
					// C:\\work\\ReoScript\\ReoScript.g:153:43: ^( MUL $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(153, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MUL, "MUL"), root_2);

					DebugLocation(153, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(153, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:154:6: '/=' expression
				{
				DebugLocation(154, 6);
				string_literal73=(IToken)Match(input,ASSIGN_DIV,Follow._ASSIGN_DIV_in_invocationExpression1051);  
				stream_ASSIGN_DIV.Add(string_literal73);

				DebugLocation(154, 11);
				PushFollow(Follow._expression_in_invocationExpression1053);
				expression74=expression();
				PopFollow();

				stream_expression.Add(expression74.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 154:23: -> ^( ASSIGNMENT $id ^( DIV $id expression ) )
				{
					DebugLocation(154, 26);
					// C:\\work\\ReoScript\\ReoScript.g:154:26: ^( ASSIGNMENT $id ^( DIV $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(154, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(154, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(154, 43);
					// C:\\work\\ReoScript\\ReoScript.g:154:43: ^( DIV $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(154, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DIV, "DIV"), root_2);

					DebugLocation(154, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(154, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\work\\ReoScript\\ReoScript.g:155:6: '%=' expression
				{
				DebugLocation(155, 6);
				string_literal75=(IToken)Match(input,ASSIGN_REM,Follow._ASSIGN_REM_in_invocationExpression1079);  
				stream_ASSIGN_REM.Add(string_literal75);

				DebugLocation(155, 11);
				PushFollow(Follow._expression_in_invocationExpression1081);
				expression76=expression();
				PopFollow();

				stream_expression.Add(expression76.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 155:23: -> ^( ASSIGNMENT $id ^( MOD $id expression ) )
				{
					DebugLocation(155, 26);
					// C:\\work\\ReoScript\\ReoScript.g:155:26: ^( ASSIGNMENT $id ^( MOD $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(155, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(155, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(155, 43);
					// C:\\work\\ReoScript\\ReoScript.g:155:43: ^( MOD $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(155, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MOD, "MOD"), root_2);

					DebugLocation(155, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(155, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\work\\ReoScript\\ReoScript.g:156:6: '&=' expression
				{
				DebugLocation(156, 6);
				string_literal77=(IToken)Match(input,ASSIGN_AND,Follow._ASSIGN_AND_in_invocationExpression1107);  
				stream_ASSIGN_AND.Add(string_literal77);

				DebugLocation(156, 11);
				PushFollow(Follow._expression_in_invocationExpression1109);
				expression78=expression();
				PopFollow();

				stream_expression.Add(expression78.Tree);


				{
				// AST REWRITE
				// elements: id, id, expression
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 156:23: -> ^( ASSIGNMENT $id ^( AND $id expression ) )
				{
					DebugLocation(156, 26);
					// C:\\work\\ReoScript\\ReoScript.g:156:26: ^( ASSIGNMENT $id ^( AND $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(156, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(156, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(156, 43);
					// C:\\work\\ReoScript\\ReoScript.g:156:43: ^( AND $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(156, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(AND, "AND"), root_2);

					DebugLocation(156, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(156, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\work\\ReoScript\\ReoScript.g:157:6: '|=' expression
				{
				DebugLocation(157, 6);
				string_literal79=(IToken)Match(input,ASSIGN_OR,Follow._ASSIGN_OR_in_invocationExpression1135);  
				stream_ASSIGN_OR.Add(string_literal79);

				DebugLocation(157, 11);
				PushFollow(Follow._expression_in_invocationExpression1137);
				expression80=expression();
				PopFollow();

				stream_expression.Add(expression80.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 157:23: -> ^( ASSIGNMENT $id ^( OR $id expression ) )
				{
					DebugLocation(157, 26);
					// C:\\work\\ReoScript\\ReoScript.g:157:26: ^( ASSIGNMENT $id ^( OR $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(157, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(157, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(157, 43);
					// C:\\work\\ReoScript\\ReoScript.g:157:43: ^( OR $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(157, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(OR, "OR"), root_2);

					DebugLocation(157, 49);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(157, 52);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\work\\ReoScript\\ReoScript.g:158:6: '^=' expression
				{
				DebugLocation(158, 6);
				string_literal81=(IToken)Match(input,ASSIGN_REV,Follow._ASSIGN_REV_in_invocationExpression1163);  
				stream_ASSIGN_REV.Add(string_literal81);

				DebugLocation(158, 11);
				PushFollow(Follow._expression_in_invocationExpression1165);
				expression82=expression();
				PopFollow();

				stream_expression.Add(expression82.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 158:23: -> ^( ASSIGNMENT $id ^( XOR $id expression ) )
				{
					DebugLocation(158, 26);
					// C:\\work\\ReoScript\\ReoScript.g:158:26: ^( ASSIGNMENT $id ^( XOR $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(158, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(158, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(158, 43);
					// C:\\work\\ReoScript\\ReoScript.g:158:43: ^( XOR $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(158, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(XOR, "XOR"), root_2);

					DebugLocation(158, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(158, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\work\\ReoScript\\ReoScript.g:159:6: '<<=' expression
				{
				DebugLocation(159, 6);
				string_literal83=(IToken)Match(input,ASSIGN_LSHIFT,Follow._ASSIGN_LSHIFT_in_invocationExpression1191);  
				stream_ASSIGN_LSHIFT.Add(string_literal83);

				DebugLocation(159, 12);
				PushFollow(Follow._expression_in_invocationExpression1193);
				expression84=expression();
				PopFollow();

				stream_expression.Add(expression84.Tree);


				{
				// AST REWRITE
				// elements: expression, id, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 159:23: -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) )
				{
					DebugLocation(159, 26);
					// C:\\work\\ReoScript\\ReoScript.g:159:26: ^( ASSIGNMENT $id ^( LSHIFT $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(159, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(159, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(159, 43);
					// C:\\work\\ReoScript\\ReoScript.g:159:43: ^( LSHIFT $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(159, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LSHIFT, "LSHIFT"), root_2);

					DebugLocation(159, 53);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(159, 56);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\work\\ReoScript\\ReoScript.g:160:6: '>>=' expression
				{
				DebugLocation(160, 6);
				string_literal85=(IToken)Match(input,ASSIGN_RSHIFT,Follow._ASSIGN_RSHIFT_in_invocationExpression1218);  
				stream_ASSIGN_RSHIFT.Add(string_literal85);

				DebugLocation(160, 12);
				PushFollow(Follow._expression_in_invocationExpression1220);
				expression86=expression();
				PopFollow();

				stream_expression.Add(expression86.Tree);


				{
				// AST REWRITE
				// elements: expression, id, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 160:23: -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) )
				{
					DebugLocation(160, 26);
					// C:\\work\\ReoScript\\ReoScript.g:160:26: ^( ASSIGNMENT $id ^( RSHIFT $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(160, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(160, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(160, 43);
					// C:\\work\\ReoScript\\ReoScript.g:160:43: ^( RSHIFT $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(160, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RSHIFT, "RSHIFT"), root_2);

					DebugLocation(160, 53);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(160, 56);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\work\\ReoScript\\ReoScript.g:161:6: '++'
				{
				DebugLocation(161, 6);
				string_literal87=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_invocationExpression1245);  
				stream_INCREMENT.Add(string_literal87);



				{
				// AST REWRITE
				// elements: id, INCREMENT
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 161:14: -> ^( POST_UNARY_STEP $id '++' )
				{
					DebugLocation(161, 17);
					// C:\\work\\ReoScript\\ReoScript.g:161:17: ^( POST_UNARY_STEP $id '++' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(161, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

					DebugLocation(161, 36);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(161, 39);
					adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\work\\ReoScript\\ReoScript.g:162:6: '--'
				{
				DebugLocation(162, 6);
				string_literal88=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_invocationExpression1266);  
				stream_DECREMENT.Add(string_literal88);



				{
				// AST REWRITE
				// elements: DECREMENT, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 162:14: -> ^( POST_UNARY_STEP $id '--' )
				{
					DebugLocation(162, 17);
					// C:\\work\\ReoScript\\ReoScript.g:162:17: ^( POST_UNARY_STEP $id '--' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(162, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

					DebugLocation(162, 36);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(162, 39);
					adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\work\\ReoScript\\ReoScript.g:163:11: 
				{

				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 163:11: -> primaryExpression
				{
					DebugLocation(163, 14);
					adaptor.AddChild(root_0, stream_primaryExpression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invocationExpression", 15);
			LeaveRule("invocationExpression", 15);
			LeaveRule_invocationExpression();
		}
		DebugLocation(165, 1);
		} finally { DebugExitRule(GrammarFileName, "invocationExpression"); }
		return retval;

	}
	// $ANTLR end "invocationExpression"

	partial void EnterRule_statementExpressionList();
	partial void LeaveRule_statementExpressionList();

	// $ANTLR start "statementExpressionList"
	// C:\\work\\ReoScript\\ReoScript.g:167:1: statementExpressionList : statementExpression ( COMMA ! statementExpression )* ;
	[GrammarRule("statementExpressionList")]
	private AstParserRuleReturnScope<CommonTree, IToken> statementExpressionList()
	{
		EnterRule_statementExpressionList();
		EnterRule("statementExpressionList", 16);
		TraceIn("statementExpressionList", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA90 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpression89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpression91 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA90_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "statementExpressionList");
		DebugLocation(167, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:168:2: ( statementExpression ( COMMA ! statementExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:168:4: statementExpression ( COMMA ! statementExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(168, 4);
			PushFollow(Follow._statementExpression_in_statementExpressionList1310);
			statementExpression89=statementExpression();
			PopFollow();

			adaptor.AddChild(root_0, statementExpression89.Tree);
			DebugLocation(168, 24);
			// C:\\work\\ReoScript\\ReoScript.g:168:24: ( COMMA ! statementExpression )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==COMMA))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:168:25: COMMA ! statementExpression
					{
					DebugLocation(168, 30);
					COMMA90=(IToken)Match(input,COMMA,Follow._COMMA_in_statementExpressionList1313); 
					DebugLocation(168, 32);
					PushFollow(Follow._statementExpression_in_statementExpressionList1316);
					statementExpression91=statementExpression();
					PopFollow();

					adaptor.AddChild(root_0, statementExpression91.Tree);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statementExpressionList", 16);
			LeaveRule("statementExpressionList", 16);
			LeaveRule_statementExpressionList();
		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "statementExpressionList"); }
		return retval;

	}
	// $ANTLR end "statementExpressionList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// C:\\work\\ReoScript\\ReoScript.g:172:1: public expression : ( 'new' assignmentExpression -> ^( CREATE assignmentExpression ) | assignmentExpression ( EOF !)? );
	[GrammarRule("expression")]
	public AstParserRuleReturnScope<CommonTree, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 17);
		TraceIn("expression", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal92 = default(IToken);
		IToken EOF95 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression93 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression94 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal92_tree = default(CommonTree);
		CommonTree EOF95_tree = default(CommonTree);
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(172, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:173:2: ( 'new' assignmentExpression -> ^( CREATE assignmentExpression ) | assignmentExpression ( EOF !)? )
			int alt20=2;
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==107))
			{
				alt20 = 1;
			}
			else if ((LA20_0==DECREMENT||LA20_0==FALSE||(LA20_0>=HEX_LITERATE && LA20_0<=IDENTIFIER)||(LA20_0>=INCREMENT && LA20_0<=LCURLY)||LA20_0==LPAREN||LA20_0==MINUS||LA20_0==NOT||(LA20_0>=NULL && LA20_0<=NUMBER_LITERATE)||LA20_0==PLUS||LA20_0==STRING_LITERATE||(LA20_0>=THIS && LA20_0<=TRUE)||LA20_0==UNDEFINED||LA20_0==103||LA20_0==111))
			{
				alt20 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:174:2: 'new' assignmentExpression
				{
				DebugLocation(174, 2);
				string_literal92=(IToken)Match(input,107,Follow._107_in_expression1333);  
				stream_107.Add(string_literal92);

				DebugLocation(174, 8);
				PushFollow(Follow._assignmentExpression_in_expression1335);
				assignmentExpression93=assignmentExpression();
				PopFollow();

				stream_assignmentExpression.Add(assignmentExpression93.Tree);


				{
				// AST REWRITE
				// elements: assignmentExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 175:3: -> ^( CREATE assignmentExpression )
				{
					DebugLocation(175, 6);
					// C:\\work\\ReoScript\\ReoScript.g:175:6: ^( CREATE assignmentExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(175, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CREATE, "CREATE"), root_1);

					DebugLocation(175, 15);
					adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:176:4: assignmentExpression ( EOF !)?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(176, 4);
				PushFollow(Follow._assignmentExpression_in_expression1350);
				assignmentExpression94=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, assignmentExpression94.Tree);
				DebugLocation(176, 28);
				// C:\\work\\ReoScript\\ReoScript.g:176:28: ( EOF !)?
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==EOF))
				{
					alt19 = 1;
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:176:28: EOF !
					{
					DebugLocation(176, 28);
					EOF95=(IToken)Match(input,EOF,Follow._EOF_in_expression1352); 

					}
					break;

				}
				} finally { DebugExitSubRule(19); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 17);
			LeaveRule("expression", 17);
			LeaveRule_expression();
		}
		DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_expressionList();
	partial void LeaveRule_expressionList();

	// $ANTLR start "expressionList"
	// C:\\work\\ReoScript\\ReoScript.g:179:1: expressionList : expression ( COMMA ! expression )* ;
	[GrammarRule("expressionList")]
	private AstParserRuleReturnScope<CommonTree, IToken> expressionList()
	{
		EnterRule_expressionList();
		EnterRule("expressionList", 18);
		TraceIn("expressionList", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA97 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression96 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression98 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA97_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expressionList");
		DebugLocation(179, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:180:2: ( expression ( COMMA ! expression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:180:4: expression ( COMMA ! expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(180, 4);
			PushFollow(Follow._expression_in_expressionList1366);
			expression96=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression96.Tree);
			DebugLocation(180, 15);
			// C:\\work\\ReoScript\\ReoScript.g:180:15: ( COMMA ! expression )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==COMMA))
				{
					int LA21_2 = input.LA(2);

					if ((LA21_2==DECREMENT||LA21_2==FALSE||(LA21_2>=HEX_LITERATE && LA21_2<=IDENTIFIER)||(LA21_2>=INCREMENT && LA21_2<=LCURLY)||LA21_2==LPAREN||LA21_2==MINUS||LA21_2==NOT||(LA21_2>=NULL && LA21_2<=NUMBER_LITERATE)||LA21_2==PLUS||LA21_2==STRING_LITERATE||(LA21_2>=THIS && LA21_2<=TRUE)||LA21_2==UNDEFINED||LA21_2==103||LA21_2==107||LA21_2==111))
					{
						alt21 = 1;
					}


				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:180:16: COMMA ! expression
					{
					DebugLocation(180, 21);
					COMMA97=(IToken)Match(input,COMMA,Follow._COMMA_in_expressionList1369); 
					DebugLocation(180, 23);
					PushFollow(Follow._expression_in_expressionList1372);
					expression98=expression();
					PopFollow();

					adaptor.AddChild(root_0, expression98.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionList", 18);
			LeaveRule("expressionList", 18);
			LeaveRule_expressionList();
		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionList"); }
		return retval;

	}
	// $ANTLR end "expressionList"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();

	// $ANTLR start "assignmentExpression"
	// C:\\work\\ReoScript\\ReoScript.g:183:1: assignmentExpression : conditionalExpression ( ASSIGNMENT ^ expression )? ;
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 19);
		TraceIn("assignmentExpression", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken ASSIGNMENT100 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression101 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSIGNMENT100_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(183, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:184:2: ( conditionalExpression ( ASSIGNMENT ^ expression )? )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:184:4: conditionalExpression ( ASSIGNMENT ^ expression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(184, 4);
			PushFollow(Follow._conditionalExpression_in_assignmentExpression1386);
			conditionalExpression99=conditionalExpression();
			PopFollow();

			adaptor.AddChild(root_0, conditionalExpression99.Tree);
			DebugLocation(184, 26);
			// C:\\work\\ReoScript\\ReoScript.g:184:26: ( ASSIGNMENT ^ expression )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==ASSIGNMENT))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:184:27: ASSIGNMENT ^ expression
				{
				DebugLocation(184, 37);
				ASSIGNMENT100=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_assignmentExpression1389); 
				ASSIGNMENT100_tree = (CommonTree)adaptor.Create(ASSIGNMENT100);
				root_0 = (CommonTree)adaptor.BecomeRoot(ASSIGNMENT100_tree, root_0);
				DebugLocation(184, 39);
				PushFollow(Follow._expression_in_assignmentExpression1392);
				expression101=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression101.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 19);
			LeaveRule("assignmentExpression", 19);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(185, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();

	// $ANTLR start "conditionalExpression"
	// C:\\work\\ReoScript\\ReoScript.g:187:1: conditionalExpression : conditionalOrExpression ( CONDITION ^ expression COLON ! expression )? ;
	[GrammarRule("conditionalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 20);
		TraceIn("conditionalExpression", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken CONDITION103 = default(IToken);
		IToken COLON105 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression104 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression106 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree CONDITION103_tree = default(CommonTree);
		CommonTree COLON105_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(187, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:188:2: ( conditionalOrExpression ( CONDITION ^ expression COLON ! expression )? )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:188:4: conditionalOrExpression ( CONDITION ^ expression COLON ! expression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(188, 4);
			PushFollow(Follow._conditionalOrExpression_in_conditionalExpression1406);
			conditionalOrExpression102=conditionalOrExpression();
			PopFollow();

			adaptor.AddChild(root_0, conditionalOrExpression102.Tree);
			DebugLocation(188, 28);
			// C:\\work\\ReoScript\\ReoScript.g:188:28: ( CONDITION ^ expression COLON ! expression )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==CONDITION))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:188:29: CONDITION ^ expression COLON ! expression
				{
				DebugLocation(188, 38);
				CONDITION103=(IToken)Match(input,CONDITION,Follow._CONDITION_in_conditionalExpression1409); 
				CONDITION103_tree = (CommonTree)adaptor.Create(CONDITION103);
				root_0 = (CommonTree)adaptor.BecomeRoot(CONDITION103_tree, root_0);
				DebugLocation(188, 40);
				PushFollow(Follow._expression_in_conditionalExpression1412);
				expression104=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression104.Tree);
				DebugLocation(188, 56);
				COLON105=(IToken)Match(input,COLON,Follow._COLON_in_conditionalExpression1414); 
				DebugLocation(188, 58);
				PushFollow(Follow._expression_in_conditionalExpression1417);
				expression106=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression106.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpression", 20);
			LeaveRule("conditionalExpression", 20);
			LeaveRule_conditionalExpression();
		}
		DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_conditionalOrExpression();
	partial void LeaveRule_conditionalOrExpression();

	// $ANTLR start "conditionalOrExpression"
	// C:\\work\\ReoScript\\ReoScript.g:191:1: conditionalOrExpression : conditionalAndExpression ( LOGICAL_OR ^ conditionalAndExpression )* ;
	[GrammarRule("conditionalOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression()
	{
		EnterRule_conditionalOrExpression();
		EnterRule("conditionalOrExpression", 21);
		TraceIn("conditionalOrExpression", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_OR108 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalAndExpression107 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalAndExpression109 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_OR108_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalOrExpression");
		DebugLocation(191, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:192:2: ( conditionalAndExpression ( LOGICAL_OR ^ conditionalAndExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:192:4: conditionalAndExpression ( LOGICAL_OR ^ conditionalAndExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(192, 4);
			PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression1430);
			conditionalAndExpression107=conditionalAndExpression();
			PopFollow();

			adaptor.AddChild(root_0, conditionalAndExpression107.Tree);
			DebugLocation(192, 29);
			// C:\\work\\ReoScript\\ReoScript.g:192:29: ( LOGICAL_OR ^ conditionalAndExpression )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==LOGICAL_OR))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:192:30: LOGICAL_OR ^ conditionalAndExpression
					{
					DebugLocation(192, 40);
					LOGICAL_OR108=(IToken)Match(input,LOGICAL_OR,Follow._LOGICAL_OR_in_conditionalOrExpression1433); 
					LOGICAL_OR108_tree = (CommonTree)adaptor.Create(LOGICAL_OR108);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_OR108_tree, root_0);
					DebugLocation(192, 42);
					PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression1436);
					conditionalAndExpression109=conditionalAndExpression();
					PopFollow();

					adaptor.AddChild(root_0, conditionalAndExpression109.Tree);

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalOrExpression", 21);
			LeaveRule("conditionalOrExpression", 21);
			LeaveRule_conditionalOrExpression();
		}
		DebugLocation(193, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalOrExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalOrExpression"

	partial void EnterRule_conditionalAndExpression();
	partial void LeaveRule_conditionalAndExpression();

	// $ANTLR start "conditionalAndExpression"
	// C:\\work\\ReoScript\\ReoScript.g:195:1: conditionalAndExpression : inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* ;
	[GrammarRule("conditionalAndExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalAndExpression()
	{
		EnterRule_conditionalAndExpression();
		EnterRule("conditionalAndExpression", 22);
		TraceIn("conditionalAndExpression", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_AND111 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression110 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression112 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_AND111_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalAndExpression");
		DebugLocation(195, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:196:2: ( inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:196:4: inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(196, 4);
			PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression1449);
			inclusiveOrExpression110=inclusiveOrExpression();
			PopFollow();

			adaptor.AddChild(root_0, inclusiveOrExpression110.Tree);
			DebugLocation(196, 26);
			// C:\\work\\ReoScript\\ReoScript.g:196:26: ( LOGICAL_AND ^ inclusiveOrExpression )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==LOGICAL_AND))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:196:27: LOGICAL_AND ^ inclusiveOrExpression
					{
					DebugLocation(196, 38);
					LOGICAL_AND111=(IToken)Match(input,LOGICAL_AND,Follow._LOGICAL_AND_in_conditionalAndExpression1452); 
					LOGICAL_AND111_tree = (CommonTree)adaptor.Create(LOGICAL_AND111);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_AND111_tree, root_0);
					DebugLocation(196, 40);
					PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression1455);
					inclusiveOrExpression112=inclusiveOrExpression();
					PopFollow();

					adaptor.AddChild(root_0, inclusiveOrExpression112.Tree);

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalAndExpression", 22);
			LeaveRule("conditionalAndExpression", 22);
			LeaveRule_conditionalAndExpression();
		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalAndExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalAndExpression"

	partial void EnterRule_inclusiveOrExpression();
	partial void LeaveRule_inclusiveOrExpression();

	// $ANTLR start "inclusiveOrExpression"
	// C:\\work\\ReoScript\\ReoScript.g:199:1: inclusiveOrExpression : exclusiveOrExpression ( OR ^ exclusiveOrExpression )* ;
	[GrammarRule("inclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression()
	{
		EnterRule_inclusiveOrExpression();
		EnterRule("inclusiveOrExpression", 23);
		TraceIn("inclusiveOrExpression", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken OR114 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression115 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree OR114_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "inclusiveOrExpression");
		DebugLocation(199, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:200:2: ( exclusiveOrExpression ( OR ^ exclusiveOrExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:200:4: exclusiveOrExpression ( OR ^ exclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(200, 4);
			PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression1470);
			exclusiveOrExpression113=exclusiveOrExpression();
			PopFollow();

			adaptor.AddChild(root_0, exclusiveOrExpression113.Tree);
			DebugLocation(200, 26);
			// C:\\work\\ReoScript\\ReoScript.g:200:26: ( OR ^ exclusiveOrExpression )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==OR))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:200:27: OR ^ exclusiveOrExpression
					{
					DebugLocation(200, 29);
					OR114=(IToken)Match(input,OR,Follow._OR_in_inclusiveOrExpression1473); 
					OR114_tree = (CommonTree)adaptor.Create(OR114);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR114_tree, root_0);
					DebugLocation(200, 31);
					PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression1476);
					exclusiveOrExpression115=exclusiveOrExpression();
					PopFollow();

					adaptor.AddChild(root_0, exclusiveOrExpression115.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusiveOrExpression", 23);
			LeaveRule("inclusiveOrExpression", 23);
			LeaveRule_inclusiveOrExpression();
		}
		DebugLocation(201, 1);
		} finally { DebugExitRule(GrammarFileName, "inclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "inclusiveOrExpression"

	partial void EnterRule_exclusiveOrExpression();
	partial void LeaveRule_exclusiveOrExpression();

	// $ANTLR start "exclusiveOrExpression"
	// C:\\work\\ReoScript\\ReoScript.g:203:1: exclusiveOrExpression : andExpression ( XOR ^ andExpression )* ;
	[GrammarRule("exclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression()
	{
		EnterRule_exclusiveOrExpression();
		EnterRule("exclusiveOrExpression", 24);
		TraceIn("exclusiveOrExpression", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken XOR117 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression118 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree XOR117_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "exclusiveOrExpression");
		DebugLocation(203, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:204:2: ( andExpression ( XOR ^ andExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:204:4: andExpression ( XOR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(204, 4);
			PushFollow(Follow._andExpression_in_exclusiveOrExpression1490);
			andExpression116=andExpression();
			PopFollow();

			adaptor.AddChild(root_0, andExpression116.Tree);
			DebugLocation(204, 18);
			// C:\\work\\ReoScript\\ReoScript.g:204:18: ( XOR ^ andExpression )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==XOR))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:204:19: XOR ^ andExpression
					{
					DebugLocation(204, 22);
					XOR117=(IToken)Match(input,XOR,Follow._XOR_in_exclusiveOrExpression1493); 
					XOR117_tree = (CommonTree)adaptor.Create(XOR117);
					root_0 = (CommonTree)adaptor.BecomeRoot(XOR117_tree, root_0);
					DebugLocation(204, 24);
					PushFollow(Follow._andExpression_in_exclusiveOrExpression1496);
					andExpression118=andExpression();
					PopFollow();

					adaptor.AddChild(root_0, andExpression118.Tree);

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusiveOrExpression", 24);
			LeaveRule("exclusiveOrExpression", 24);
			LeaveRule_exclusiveOrExpression();
		}
		DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "exclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "exclusiveOrExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();

	// $ANTLR start "andExpression"
	// C:\\work\\ReoScript\\ReoScript.g:207:1: andExpression : equalityExpression ( AND ^ equalityExpression )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 25);
		TraceIn("andExpression", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken AND120 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> equalityExpression119 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> equalityExpression121 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree AND120_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(207, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:208:2: ( equalityExpression ( AND ^ equalityExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:208:4: equalityExpression ( AND ^ equalityExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(208, 4);
			PushFollow(Follow._equalityExpression_in_andExpression1510);
			equalityExpression119=equalityExpression();
			PopFollow();

			adaptor.AddChild(root_0, equalityExpression119.Tree);
			DebugLocation(208, 23);
			// C:\\work\\ReoScript\\ReoScript.g:208:23: ( AND ^ equalityExpression )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==AND))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:208:24: AND ^ equalityExpression
					{
					DebugLocation(208, 27);
					AND120=(IToken)Match(input,AND,Follow._AND_in_andExpression1513); 
					AND120_tree = (CommonTree)adaptor.Create(AND120);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND120_tree, root_0);
					DebugLocation(208, 29);
					PushFollow(Follow._equalityExpression_in_andExpression1516);
					equalityExpression121=equalityExpression();
					PopFollow();

					adaptor.AddChild(root_0, equalityExpression121.Tree);

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 25);
			LeaveRule("andExpression", 25);
			LeaveRule_andExpression();
		}
		DebugLocation(209, 1);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();

	// $ANTLR start "equalityExpression"
	// C:\\work\\ReoScript\\ReoScript.g:211:1: equalityExpression : relationalExpression ( ( EQUALS | NOT_EQUALS ) ^ relationalExpression )* ;
	[GrammarRule("equalityExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 26);
		TraceIn("equalityExpression", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set123 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> relationalExpression122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> relationalExpression124 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set123_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(211, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:212:2: ( relationalExpression ( ( EQUALS | NOT_EQUALS ) ^ relationalExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:212:4: relationalExpression ( ( EQUALS | NOT_EQUALS ) ^ relationalExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(212, 4);
			PushFollow(Follow._relationalExpression_in_equalityExpression1529);
			relationalExpression122=relationalExpression();
			PopFollow();

			adaptor.AddChild(root_0, relationalExpression122.Tree);
			DebugLocation(212, 25);
			// C:\\work\\ReoScript\\ReoScript.g:212:25: ( ( EQUALS | NOT_EQUALS ) ^ relationalExpression )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==EQUALS||LA29_0==NOT_EQUALS))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:212:26: ( EQUALS | NOT_EQUALS ) ^ relationalExpression
					{
					DebugLocation(212, 47);

					set123=(IToken)input.LT(1);
					set123=(IToken)input.LT(1);
					if (input.LA(1)==EQUALS||input.LA(1)==NOT_EQUALS)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set123), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(212, 49);
					PushFollow(Follow._relationalExpression_in_equalityExpression1541);
					relationalExpression124=relationalExpression();
					PopFollow();

					adaptor.AddChild(root_0, relationalExpression124.Tree);

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 26);
			LeaveRule("equalityExpression", 26);
			LeaveRule_equalityExpression();
		}
		DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();

	// $ANTLR start "relationalExpression"
	// C:\\work\\ReoScript\\ReoScript.g:215:1: relationalExpression : shiftExpression ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 27);
		TraceIn("relationalExpression", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set126 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression127 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set126_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(215, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:216:2: ( shiftExpression ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:216:4: shiftExpression ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(216, 4);
			PushFollow(Follow._shiftExpression_in_relationalExpression1556);
			shiftExpression125=shiftExpression();
			PopFollow();

			adaptor.AddChild(root_0, shiftExpression125.Tree);
			DebugLocation(216, 20);
			// C:\\work\\ReoScript\\ReoScript.g:216:20: ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if (((LA30_0>=GREAT_EQUALS && LA30_0<=GREAT_THAN)||(LA30_0>=LESS_EQUALS && LA30_0<=LESS_THAN)))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:216:21: ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression
					{
					DebugLocation(216, 74);

					set126=(IToken)input.LT(1);
					set126=(IToken)input.LT(1);
					if ((input.LA(1)>=GREAT_EQUALS && input.LA(1)<=GREAT_THAN)||(input.LA(1)>=LESS_EQUALS && input.LA(1)<=LESS_THAN))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set126), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(216, 76);
					PushFollow(Follow._shiftExpression_in_relationalExpression1576);
					shiftExpression127=shiftExpression();
					PopFollow();

					adaptor.AddChild(root_0, shiftExpression127.Tree);

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 27);
			LeaveRule("relationalExpression", 27);
			LeaveRule_relationalExpression();
		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();

	// $ANTLR start "shiftExpression"
	// C:\\work\\ReoScript\\ReoScript.g:219:1: shiftExpression : additiveExpression ( ( LSHIFT | RSHIFT ) ^ additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 28);
		TraceIn("shiftExpression", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set129 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression128 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression130 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set129_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(219, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:220:2: ( additiveExpression ( ( LSHIFT | RSHIFT ) ^ additiveExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:220:4: additiveExpression ( ( LSHIFT | RSHIFT ) ^ additiveExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(220, 4);
			PushFollow(Follow._additiveExpression_in_shiftExpression1590);
			additiveExpression128=additiveExpression();
			PopFollow();

			adaptor.AddChild(root_0, additiveExpression128.Tree);
			DebugLocation(220, 23);
			// C:\\work\\ReoScript\\ReoScript.g:220:23: ( ( LSHIFT | RSHIFT ) ^ additiveExpression )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==LSHIFT||LA31_0==RSHIFT))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:220:24: ( LSHIFT | RSHIFT ) ^ additiveExpression
					{
					DebugLocation(220, 39);

					set129=(IToken)input.LT(1);
					set129=(IToken)input.LT(1);
					if (input.LA(1)==LSHIFT||input.LA(1)==RSHIFT)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set129), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(220, 41);
					PushFollow(Follow._additiveExpression_in_shiftExpression1600);
					additiveExpression130=additiveExpression();
					PopFollow();

					adaptor.AddChild(root_0, additiveExpression130.Tree);

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftExpression", 28);
			LeaveRule("shiftExpression", 28);
			LeaveRule_shiftExpression();
		}
		DebugLocation(221, 1);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return retval;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();

	// $ANTLR start "additiveExpression"
	// C:\\work\\ReoScript\\ReoScript.g:223:1: additiveExpression : multiplicativeExpression ( ( PLUS | MINUS ) ^ multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 29);
		TraceIn("additiveExpression", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set132 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression133 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set132_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(223, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:224:2: ( multiplicativeExpression ( ( PLUS | MINUS ) ^ multiplicativeExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:224:4: multiplicativeExpression ( ( PLUS | MINUS ) ^ multiplicativeExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(224, 4);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression1615);
			multiplicativeExpression131=multiplicativeExpression();
			PopFollow();

			adaptor.AddChild(root_0, multiplicativeExpression131.Tree);
			DebugLocation(224, 29);
			// C:\\work\\ReoScript\\ReoScript.g:224:29: ( ( PLUS | MINUS ) ^ multiplicativeExpression )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==MINUS||LA32_0==PLUS))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:224:30: ( PLUS | MINUS ) ^ multiplicativeExpression
					{
					DebugLocation(224, 42);

					set132=(IToken)input.LT(1);
					set132=(IToken)input.LT(1);
					if (input.LA(1)==MINUS||input.LA(1)==PLUS)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set132), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(224, 44);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression1625);
					multiplicativeExpression133=multiplicativeExpression();
					PopFollow();

					adaptor.AddChild(root_0, multiplicativeExpression133.Tree);

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 29);
			LeaveRule("additiveExpression", 29);
			LeaveRule_additiveExpression();
		}
		DebugLocation(225, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();

	// $ANTLR start "multiplicativeExpression"
	// C:\\work\\ReoScript\\ReoScript.g:227:1: multiplicativeExpression : unaryExpression ( ( MUL | DIV | MOD ) ^ unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 30);
		TraceIn("multiplicativeExpression", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set135 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression134 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression136 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set135_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(227, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:228:2: ( unaryExpression ( ( MUL | DIV | MOD ) ^ unaryExpression )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:228:4: unaryExpression ( ( MUL | DIV | MOD ) ^ unaryExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(228, 4);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression1639);
			unaryExpression134=unaryExpression();
			PopFollow();

			adaptor.AddChild(root_0, unaryExpression134.Tree);
			DebugLocation(228, 20);
			// C:\\work\\ReoScript\\ReoScript.g:228:20: ( ( MUL | DIV | MOD ) ^ unaryExpression )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if ((LA33_0==DIV||(LA33_0>=MOD && LA33_0<=MUL)))
				{
					alt33 = 1;
				}


				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:228:21: ( MUL | DIV | MOD ) ^ unaryExpression
					{
					DebugLocation(228, 38);

					set135=(IToken)input.LT(1);
					set135=(IToken)input.LT(1);
					if (input.LA(1)==DIV||(input.LA(1)>=MOD && input.LA(1)<=MUL))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set135), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(228, 40);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression1655);
					unaryExpression136=unaryExpression();
					PopFollow();

					adaptor.AddChild(root_0, unaryExpression136.Tree);

					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 30);
			LeaveRule("multiplicativeExpression", 30);
			LeaveRule_multiplicativeExpression();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();

	// $ANTLR start "unaryExpression"
	// C:\\work\\ReoScript\\ReoScript.g:231:1: unaryExpression : ( primaryExpression ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) | (op= '+' |op= '-' |op= '!' |op= '~' ) unaryExpression -> ^( PRE_UNARY $op unaryExpression ) | '(' ! expression ')' !);
	[GrammarRule("unaryExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 31);
		TraceIn("unaryExpression", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken op = default(IToken);
		IToken string_literal138 = default(IToken);
		IToken string_literal139 = default(IToken);
		IToken string_literal140 = default(IToken);
		IToken string_literal142 = default(IToken);
		IToken char_literal145 = default(IToken);
		IToken char_literal147 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression137 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression141 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression143 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression144 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression146 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree op_tree = default(CommonTree);
		CommonTree string_literal138_tree = default(CommonTree);
		CommonTree string_literal139_tree = default(CommonTree);
		CommonTree string_literal140_tree = default(CommonTree);
		CommonTree string_literal142_tree = default(CommonTree);
		CommonTree char_literal145_tree = default(CommonTree);
		CommonTree char_literal147_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INCREMENT=new RewriteRuleITokenStream(adaptor,"token INCREMENT");
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
		RewriteRuleITokenStream stream_MINUS=new RewriteRuleITokenStream(adaptor,"token MINUS");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_DECREMENT=new RewriteRuleITokenStream(adaptor,"token DECREMENT");
		RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(231, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:232:2: ( primaryExpression ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) | (op= '+' |op= '-' |op= '!' |op= '~' ) unaryExpression -> ^( PRE_UNARY $op unaryExpression ) | '(' ! expression ')' !)
			int alt36=5;
			try { DebugEnterDecision(36, false);
			switch (input.LA(1))
			{
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case LBRACE:
			case LCURLY:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case UNDEFINED:
			case 103:
				{
				alt36 = 1;
				}
				break;
			case LPAREN:
				{
				switch (input.LA(2))
				{
				case IDENTIFIER:
					{
					switch (input.LA(3))
					{
					case COMMA:
						{
						alt36 = 1;
						}
						break;
					case RPAREN:
						{
						int LA36_8 = input.LA(4);

						if ((LA36_8==95))
						{
							alt36 = 1;
						}
						else if ((LA36_8==EOF||LA36_8==AND||LA36_8==ASSIGNMENT||LA36_8==COLON||LA36_8==COMMA||LA36_8==CONDITION||LA36_8==DIV||LA36_8==EQUALS||(LA36_8>=GREAT_EQUALS && LA36_8<=GREAT_THAN)||(LA36_8>=LESS_EQUALS && LA36_8<=LESS_THAN)||(LA36_8>=LOGICAL_AND && LA36_8<=LOGICAL_OR)||(LA36_8>=LSHIFT && LA36_8<=MUL)||LA36_8==NOT_EQUALS||LA36_8==OR||LA36_8==PLUS||(LA36_8>=RBRACE && LA36_8<=RCURLY)||(LA36_8>=RPAREN && LA36_8<=SEMI)||LA36_8==XOR))
						{
							alt36 = 5;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 36, 8, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case EOF:
					case AND:
					case ASSIGNMENT:
					case CONDITION:
					case DECREMENT:
					case DIV:
					case DOT:
					case EQUALS:
					case GREAT_EQUALS:
					case GREAT_THAN:
					case INCREMENT:
					case LBRACE:
					case LCURLY:
					case LESS_EQUALS:
					case LESS_THAN:
					case LOGICAL_AND:
					case LOGICAL_OR:
					case LPAREN:
					case LSHIFT:
					case MINUS:
					case MOD:
					case MUL:
					case NOT_EQUALS:
					case OR:
					case PLUS:
					case RSHIFT:
					case XOR:
						{
						alt36 = 5;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 36, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case RPAREN:
					{
					alt36 = 1;
					}
					break;
				case DECREMENT:
				case FALSE:
				case HEX_LITERATE:
				case INCREMENT:
				case LBRACE:
				case LCURLY:
				case LPAREN:
				case MINUS:
				case NOT:
				case NULL:
				case NUMBER_LITERATE:
				case PLUS:
				case STRING_LITERATE:
				case THIS:
				case TRUE:
				case UNDEFINED:
				case 103:
				case 107:
				case 111:
					{
					alt36 = 5;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 36, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case INCREMENT:
				{
				alt36 = 2;
				}
				break;
			case DECREMENT:
				{
				alt36 = 3;
				}
				break;
			case MINUS:
			case NOT:
			case PLUS:
			case 111:
				{
				alt36 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:233:4: primaryExpression ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression )
				{
				DebugLocation(233, 4);
				PushFollow(Follow._primaryExpression_in_unaryExpression1674);
				primaryExpression137=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression137.Tree);
				DebugLocation(233, 22);
				// C:\\work\\ReoScript\\ReoScript.g:233:22: ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression )
				int alt34=3;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, false);
				switch (input.LA(1))
				{
				case INCREMENT:
					{
					alt34 = 1;
					}
					break;
				case DECREMENT:
					{
					alt34 = 2;
					}
					break;
				case EOF:
				case AND:
				case ASSIGNMENT:
				case COLON:
				case COMMA:
				case CONDITION:
				case DIV:
				case EQUALS:
				case GREAT_EQUALS:
				case GREAT_THAN:
				case LESS_EQUALS:
				case LESS_THAN:
				case LOGICAL_AND:
				case LOGICAL_OR:
				case LSHIFT:
				case MINUS:
				case MOD:
				case MUL:
				case NOT_EQUALS:
				case OR:
				case PLUS:
				case RBRACE:
				case RCURLY:
				case RPAREN:
				case RSHIFT:
				case SEMI:
				case XOR:
					{
					alt34 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:234:6: '++'
					{
					DebugLocation(234, 6);
					string_literal138=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_unaryExpression1684);  
					stream_INCREMENT.Add(string_literal138);



					{
					// AST REWRITE
					// elements: primaryExpression, INCREMENT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 234:11: -> ^( POST_UNARY_STEP primaryExpression '++' )
					{
						DebugLocation(234, 14);
						// C:\\work\\ReoScript\\ReoScript.g:234:14: ^( POST_UNARY_STEP primaryExpression '++' )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(234, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

						DebugLocation(234, 32);
						adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
						DebugLocation(234, 50);
						adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:235:10: '--'
					{
					DebugLocation(235, 10);
					string_literal139=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_unaryExpression1705);  
					stream_DECREMENT.Add(string_literal139);



					{
					// AST REWRITE
					// elements: primaryExpression, DECREMENT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 235:15: -> ^( POST_UNARY_STEP primaryExpression '--' )
					{
						DebugLocation(235, 18);
						// C:\\work\\ReoScript\\ReoScript.g:235:18: ^( POST_UNARY_STEP primaryExpression '--' )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(235, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

						DebugLocation(235, 36);
						adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
						DebugLocation(235, 54);
						adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\work\\ReoScript\\ReoScript.g:236:10: 
					{

					{
					// AST REWRITE
					// elements: primaryExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 236:10: -> primaryExpression
					{
						DebugLocation(236, 13);
						adaptor.AddChild(root_0, stream_primaryExpression.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(34); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:238:4: '++' primaryExpression
				{
				DebugLocation(238, 4);
				string_literal140=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_unaryExpression1742);  
				stream_INCREMENT.Add(string_literal140);

				DebugLocation(238, 9);
				PushFollow(Follow._primaryExpression_in_unaryExpression1744);
				primaryExpression141=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression141.Tree);


				{
				// AST REWRITE
				// elements: INCREMENT, primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 239:3: -> ^( PRE_UNARY_STEP primaryExpression '++' )
				{
					DebugLocation(239, 6);
					// C:\\work\\ReoScript\\ReoScript.g:239:6: ^( PRE_UNARY_STEP primaryExpression '++' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(239, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(239, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(239, 41);
					adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:240:4: '--' primaryExpression
				{
				DebugLocation(240, 4);
				string_literal142=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_unaryExpression1761);  
				stream_DECREMENT.Add(string_literal142);

				DebugLocation(240, 9);
				PushFollow(Follow._primaryExpression_in_unaryExpression1763);
				primaryExpression143=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression143.Tree);


				{
				// AST REWRITE
				// elements: DECREMENT, primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 241:3: -> ^( PRE_UNARY_STEP primaryExpression '--' )
				{
					DebugLocation(241, 6);
					// C:\\work\\ReoScript\\ReoScript.g:241:6: ^( PRE_UNARY_STEP primaryExpression '--' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(241, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(241, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(241, 41);
					adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\work\\ReoScript\\ReoScript.g:242:4: (op= '+' |op= '-' |op= '!' |op= '~' ) unaryExpression
				{
				DebugLocation(242, 4);
				// C:\\work\\ReoScript\\ReoScript.g:242:4: (op= '+' |op= '-' |op= '!' |op= '~' )
				int alt35=4;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, false);
				switch (input.LA(1))
				{
				case PLUS:
					{
					alt35 = 1;
					}
					break;
				case MINUS:
					{
					alt35 = 2;
					}
					break;
				case NOT:
					{
					alt35 = 3;
					}
					break;
				case 111:
					{
					alt35 = 4;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:242:5: op= '+'
					{
					DebugLocation(242, 7);
					op=(IToken)Match(input,PLUS,Follow._PLUS_in_unaryExpression1783);  
					stream_PLUS.Add(op);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:242:12: op= '-'
					{
					DebugLocation(242, 14);
					op=(IToken)Match(input,MINUS,Follow._MINUS_in_unaryExpression1787);  
					stream_MINUS.Add(op);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\work\\ReoScript\\ReoScript.g:242:19: op= '!'
					{
					DebugLocation(242, 21);
					op=(IToken)Match(input,NOT,Follow._NOT_in_unaryExpression1791);  
					stream_NOT.Add(op);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\work\\ReoScript\\ReoScript.g:242:26: op= '~'
					{
					DebugLocation(242, 28);
					op=(IToken)Match(input,111,Follow._111_in_unaryExpression1795);  
					stream_111.Add(op);


					}
					break;

				}
				} finally { DebugExitSubRule(35); }

				DebugLocation(242, 34);
				PushFollow(Follow._unaryExpression_in_unaryExpression1798);
				unaryExpression144=unaryExpression();
				PopFollow();

				stream_unaryExpression.Add(unaryExpression144.Tree);


				{
				// AST REWRITE
				// elements: op, unaryExpression
				// token labels: op
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_op=new RewriteRuleITokenStream(adaptor,"token op",op);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 243:3: -> ^( PRE_UNARY $op unaryExpression )
				{
					DebugLocation(243, 6);
					// C:\\work\\ReoScript\\ReoScript.g:243:6: ^( PRE_UNARY $op unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(243, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY, "PRE_UNARY"), root_1);

					DebugLocation(243, 19);
					adaptor.AddChild(root_1, stream_op.NextNode());
					DebugLocation(243, 22);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\work\\ReoScript\\ReoScript.g:244:4: '(' ! expression ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(244, 7);
				char_literal145=(IToken)Match(input,LPAREN,Follow._LPAREN_in_unaryExpression1816); 
				DebugLocation(244, 9);
				PushFollow(Follow._expression_in_unaryExpression1819);
				expression146=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression146.Tree);
				DebugLocation(244, 23);
				char_literal147=(IToken)Match(input,RPAREN,Follow._RPAREN_in_unaryExpression1821); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 31);
			LeaveRule("unaryExpression", 31);
			LeaveRule_unaryExpression();
		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();

	// $ANTLR start "primaryExpression"
	// C:\\work\\ReoScript\\ReoScript.g:247:1: primaryExpression : ( ( variable -> variable | literal -> literal | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define ) ( '(' ( expressionList )? ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST ( expressionList )? ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' expression ']' -> ^( ARRAY_ACCESS $primaryExpression expression ) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )* | object_literal -> object_literal );
	[GrammarRule("primaryExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 32);
		TraceIn("primaryExpression", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal152 = default(IToken);
		IToken char_literal154 = default(IToken);
		IToken char_literal155 = default(IToken);
		IToken IDENTIFIER156 = default(IToken);
		IToken char_literal157 = default(IToken);
		IToken char_literal159 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variable148 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> literal149 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> array_literal150 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> anonymous_function_define151 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expressionList153 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression158 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> object_literal160 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> object_literal161 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal152_tree = default(CommonTree);
		CommonTree char_literal154_tree = default(CommonTree);
		CommonTree char_literal155_tree = default(CommonTree);
		CommonTree IDENTIFIER156_tree = default(CommonTree);
		CommonTree char_literal157_tree = default(CommonTree);
		CommonTree char_literal159_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_RBRACE=new RewriteRuleITokenStream(adaptor,"token RBRACE");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_LBRACE=new RewriteRuleITokenStream(adaptor,"token LBRACE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_anonymous_function_define=new RewriteRuleSubtreeStream(adaptor,"rule anonymous_function_define");
		RewriteRuleSubtreeStream stream_array_literal=new RewriteRuleSubtreeStream(adaptor,"rule array_literal");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		RewriteRuleSubtreeStream stream_object_literal=new RewriteRuleSubtreeStream(adaptor,"rule object_literal");
		RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(247, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:248:2: ( ( variable -> variable | literal -> literal | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define ) ( '(' ( expressionList )? ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST ( expressionList )? ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' expression ']' -> ^( ARRAY_ACCESS $primaryExpression expression ) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )* | object_literal -> object_literal )
			int alt40=2;
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==FALSE||(LA40_0>=HEX_LITERATE && LA40_0<=IDENTIFIER)||LA40_0==LBRACE||LA40_0==LPAREN||(LA40_0>=NULL && LA40_0<=NUMBER_LITERATE)||LA40_0==STRING_LITERATE||(LA40_0>=THIS && LA40_0<=TRUE)||LA40_0==UNDEFINED||LA40_0==103))
			{
				alt40 = 1;
			}
			else if ((LA40_0==LCURLY))
			{
				alt40 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:249:2: ( variable -> variable | literal -> literal | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define ) ( '(' ( expressionList )? ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST ( expressionList )? ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' expression ']' -> ^( ARRAY_ACCESS $primaryExpression expression ) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )*
				{
				DebugLocation(249, 2);
				// C:\\work\\ReoScript\\ReoScript.g:249:2: ( variable -> variable | literal -> literal | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define )
				int alt37=4;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					alt37 = 1;
					}
					break;
				case FALSE:
				case HEX_LITERATE:
				case NULL:
				case NUMBER_LITERATE:
				case STRING_LITERATE:
				case THIS:
				case TRUE:
				case UNDEFINED:
					{
					alt37 = 2;
					}
					break;
				case LBRACE:
					{
					alt37 = 3;
					}
					break;
				case LPAREN:
				case 103:
					{
					alt37 = 4;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:250:5: variable
					{
					DebugLocation(250, 5);
					PushFollow(Follow._variable_in_primaryExpression1841);
					variable148=variable();
					PopFollow();

					stream_variable.Add(variable148.Tree);


					{
					// AST REWRITE
					// elements: variable
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 250:19: -> variable
					{
						DebugLocation(250, 22);
						adaptor.AddChild(root_0, stream_variable.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:251:5: literal
					{
					DebugLocation(251, 5);
					PushFollow(Follow._literal_in_primaryExpression1856);
					literal149=literal();
					PopFollow();

					stream_literal.Add(literal149.Tree);


					{
					// AST REWRITE
					// elements: literal
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 251:19: -> literal
					{
						DebugLocation(251, 22);
						adaptor.AddChild(root_0, stream_literal.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\work\\ReoScript\\ReoScript.g:252:5: array_literal
					{
					DebugLocation(252, 5);
					PushFollow(Follow._array_literal_in_primaryExpression1872);
					array_literal150=array_literal();
					PopFollow();

					stream_array_literal.Add(array_literal150.Tree);


					{
					// AST REWRITE
					// elements: array_literal
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 252:22: -> array_literal
					{
						DebugLocation(252, 25);
						adaptor.AddChild(root_0, stream_array_literal.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\work\\ReoScript\\ReoScript.g:253:5: anonymous_function_define
					{
					DebugLocation(253, 5);
					PushFollow(Follow._anonymous_function_define_in_primaryExpression1885);
					anonymous_function_define151=anonymous_function_define();
					PopFollow();

					stream_anonymous_function_define.Add(anonymous_function_define151.Tree);


					{
					// AST REWRITE
					// elements: anonymous_function_define
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 253:32: -> anonymous_function_define
					{
						DebugLocation(253, 35);
						adaptor.AddChild(root_0, stream_anonymous_function_define.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(255, 2);
				// C:\\work\\ReoScript\\ReoScript.g:255:2: ( '(' ( expressionList )? ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST ( expressionList )? ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' expression ']' -> ^( ARRAY_ACCESS $primaryExpression expression ) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )*
				try { DebugEnterSubRule(39);
				while (true)
				{
					int alt39=5;
					try { DebugEnterDecision(39, false);
					switch (input.LA(1))
					{
					case LPAREN:
						{
						alt39 = 1;
						}
						break;
					case DOT:
						{
						alt39 = 2;
						}
						break;
					case LBRACE:
						{
						alt39 = 3;
						}
						break;
					case LCURLY:
						{
						alt39 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(39); }
					switch ( alt39 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\work\\ReoScript\\ReoScript.g:256:3: '(' ( expressionList )? ')'
						{
						DebugLocation(256, 3);
						char_literal152=(IToken)Match(input,LPAREN,Follow._LPAREN_in_primaryExpression1900);  
						stream_LPAREN.Add(char_literal152);

						DebugLocation(256, 7);
						// C:\\work\\ReoScript\\ReoScript.g:256:7: ( expressionList )?
						int alt38=2;
						try { DebugEnterSubRule(38);
						try { DebugEnterDecision(38, false);
						int LA38_0 = input.LA(1);

						if ((LA38_0==DECREMENT||LA38_0==FALSE||(LA38_0>=HEX_LITERATE && LA38_0<=IDENTIFIER)||(LA38_0>=INCREMENT && LA38_0<=LCURLY)||LA38_0==LPAREN||LA38_0==MINUS||LA38_0==NOT||(LA38_0>=NULL && LA38_0<=NUMBER_LITERATE)||LA38_0==PLUS||LA38_0==STRING_LITERATE||(LA38_0>=THIS && LA38_0<=TRUE)||LA38_0==UNDEFINED||LA38_0==103||LA38_0==107||LA38_0==111))
						{
							alt38 = 1;
						}
						} finally { DebugExitDecision(38); }
						switch (alt38)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\work\\ReoScript\\ReoScript.g:256:7: expressionList
							{
							DebugLocation(256, 7);
							PushFollow(Follow._expressionList_in_primaryExpression1902);
							expressionList153=expressionList();
							PopFollow();

							stream_expressionList.Add(expressionList153.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(38); }

						DebugLocation(256, 23);
						char_literal154=(IToken)Match(input,RPAREN,Follow._RPAREN_in_primaryExpression1905);  
						stream_RPAREN.Add(char_literal154);



						{
						// AST REWRITE
						// elements: expressionList, primaryExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 257:4: -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST ( expressionList )? ) )
						{
							DebugLocation(257, 7);
							// C:\\work\\ReoScript\\ReoScript.g:257:7: ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST ( expressionList )? ) )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(257, 9);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

							DebugLocation(257, 24);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(257, 42);
							// C:\\work\\ReoScript\\ReoScript.g:257:42: ^( ARGUMENT_LIST ( expressionList )? )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(257, 44);
							root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGUMENT_LIST, "ARGUMENT_LIST"), root_2);

							DebugLocation(257, 58);
							// C:\\work\\ReoScript\\ReoScript.g:257:58: ( expressionList )?
							if (stream_expressionList.HasNext)
							{
								DebugLocation(257, 58);
								adaptor.AddChild(root_2, stream_expressionList.NextTree());

							}
							stream_expressionList.Reset();

							adaptor.AddChild(root_1, root_2);
							}

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\work\\ReoScript\\ReoScript.g:258:5: '.' IDENTIFIER
						{
						DebugLocation(258, 5);
						char_literal155=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression1930);  
						stream_DOT.Add(char_literal155);

						DebugLocation(258, 9);
						IDENTIFIER156=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primaryExpression1932);  
						stream_IDENTIFIER.Add(IDENTIFIER156);



						{
						// AST REWRITE
						// elements: primaryExpression, IDENTIFIER
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 259:4: -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER )
						{
							DebugLocation(259, 7);
							// C:\\work\\ReoScript\\ReoScript.g:259:7: ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(259, 9);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROPERTY_ACCESS, "PROPERTY_ACCESS"), root_1);

							DebugLocation(259, 26);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(259, 44);
							adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\work\\ReoScript\\ReoScript.g:260:5: '[' expression ']'
						{
						DebugLocation(260, 5);
						char_literal157=(IToken)Match(input,LBRACE,Follow._LBRACE_in_primaryExpression1952);  
						stream_LBRACE.Add(char_literal157);

						DebugLocation(260, 9);
						PushFollow(Follow._expression_in_primaryExpression1954);
						expression158=expression();
						PopFollow();

						stream_expression.Add(expression158.Tree);
						DebugLocation(260, 20);
						char_literal159=(IToken)Match(input,RBRACE,Follow._RBRACE_in_primaryExpression1956);  
						stream_RBRACE.Add(char_literal159);



						{
						// AST REWRITE
						// elements: expression, primaryExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 261:4: -> ^( ARRAY_ACCESS $primaryExpression expression )
						{
							DebugLocation(261, 7);
							// C:\\work\\ReoScript\\ReoScript.g:261:7: ^( ARRAY_ACCESS $primaryExpression expression )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(261, 9);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_ACCESS, "ARRAY_ACCESS"), root_1);

							DebugLocation(261, 23);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(261, 41);
							adaptor.AddChild(root_1, stream_expression.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\work\\ReoScript\\ReoScript.g:262:5: object_literal
						{
						DebugLocation(262, 5);
						PushFollow(Follow._object_literal_in_primaryExpression1976);
						object_literal160=object_literal();
						PopFollow();

						stream_object_literal.Add(object_literal160.Tree);


						{
						// AST REWRITE
						// elements: object_literal, primaryExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 263:4: -> ^( COMBINE_OBJECT $primaryExpression object_literal )
						{
							DebugLocation(263, 7);
							// C:\\work\\ReoScript\\ReoScript.g:263:7: ^( COMBINE_OBJECT $primaryExpression object_literal )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(263, 9);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(COMBINE_OBJECT, "COMBINE_OBJECT"), root_1);

							DebugLocation(263, 25);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(263, 43);
							adaptor.AddChild(root_1, stream_object_literal.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					default:
						goto loop39;
					}
				}

				loop39:
					;

				} finally { DebugExitSubRule(39); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:266:4: object_literal
				{
				DebugLocation(266, 4);
				PushFollow(Follow._object_literal_in_primaryExpression2002);
				object_literal161=object_literal();
				PopFollow();

				stream_object_literal.Add(object_literal161.Tree);


				{
				// AST REWRITE
				// elements: object_literal
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 266:22: -> object_literal
				{
					DebugLocation(266, 25);
					adaptor.AddChild(root_0, stream_object_literal.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primaryExpression", 32);
			LeaveRule("primaryExpression", 32);
			LeaveRule_primaryExpression();
		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return retval;

	}
	// $ANTLR end "primaryExpression"

	partial void EnterRule_access();
	partial void LeaveRule_access();

	// $ANTLR start "access"
	// C:\\work\\ReoScript\\ReoScript.g:270:1: access :;
	[GrammarRule("access")]
	private AstParserRuleReturnScope<CommonTree, IToken> access()
	{
		EnterRule_access();
		EnterRule("access", 33);
		TraceIn("access", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "access");
		DebugLocation(270, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:271:2: ()
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:272:2: 
			{
			root_0 = (CommonTree)adaptor.Nil();

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		finally
		{
			TraceOut("access", 33);
			LeaveRule("access", 33);
			LeaveRule_access();
		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "access"); }
		return retval;

	}
	// $ANTLR end "access"

	partial void EnterRule_variable();
	partial void LeaveRule_variable();

	// $ANTLR start "variable"
	// C:\\work\\ReoScript\\ReoScript.g:274:1: variable : IDENTIFIER ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<CommonTree, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 34);
		TraceIn("variable", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER162 = default(IToken);

		CommonTree IDENTIFIER162_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(274, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:275:2: ( IDENTIFIER )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:275:4: IDENTIFIER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(275, 4);
			IDENTIFIER162=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_variable2032); 
			IDENTIFIER162_tree = (CommonTree)adaptor.Create(IDENTIFIER162);
			adaptor.AddChild(root_0, IDENTIFIER162_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 34);
			LeaveRule("variable", 34);
			LeaveRule_variable();
		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"

	partial void EnterRule_array_literal();
	partial void LeaveRule_array_literal();

	// $ANTLR start "array_literal"
	// C:\\work\\ReoScript\\ReoScript.g:278:1: array_literal : '[' ( expressionList )? ( ',' )* ']' -> ^( ARRAY_LITERAL ( expressionList )? ) ;
	[GrammarRule("array_literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> array_literal()
	{
		EnterRule_array_literal();
		EnterRule("array_literal", 35);
		TraceIn("array_literal", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal163 = default(IToken);
		IToken char_literal165 = default(IToken);
		IToken char_literal166 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expressionList164 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal163_tree = default(CommonTree);
		CommonTree char_literal165_tree = default(CommonTree);
		CommonTree char_literal166_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RBRACE=new RewriteRuleITokenStream(adaptor,"token RBRACE");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_LBRACE=new RewriteRuleITokenStream(adaptor,"token LBRACE");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		try { DebugEnterRule(GrammarFileName, "array_literal");
		DebugLocation(278, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:279:2: ( '[' ( expressionList )? ( ',' )* ']' -> ^( ARRAY_LITERAL ( expressionList )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:279:4: '[' ( expressionList )? ( ',' )* ']'
			{
			DebugLocation(279, 4);
			char_literal163=(IToken)Match(input,LBRACE,Follow._LBRACE_in_array_literal2043);  
			stream_LBRACE.Add(char_literal163);

			DebugLocation(279, 8);
			// C:\\work\\ReoScript\\ReoScript.g:279:8: ( expressionList )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==DECREMENT||LA41_0==FALSE||(LA41_0>=HEX_LITERATE && LA41_0<=IDENTIFIER)||(LA41_0>=INCREMENT && LA41_0<=LCURLY)||LA41_0==LPAREN||LA41_0==MINUS||LA41_0==NOT||(LA41_0>=NULL && LA41_0<=NUMBER_LITERATE)||LA41_0==PLUS||LA41_0==STRING_LITERATE||(LA41_0>=THIS && LA41_0<=TRUE)||LA41_0==UNDEFINED||LA41_0==103||LA41_0==107||LA41_0==111))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:279:8: expressionList
				{
				DebugLocation(279, 8);
				PushFollow(Follow._expressionList_in_array_literal2045);
				expressionList164=expressionList();
				PopFollow();

				stream_expressionList.Add(expressionList164.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(279, 24);
			// C:\\work\\ReoScript\\ReoScript.g:279:24: ( ',' )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==COMMA))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:279:24: ','
					{
					DebugLocation(279, 24);
					char_literal165=(IToken)Match(input,COMMA,Follow._COMMA_in_array_literal2048);  
					stream_COMMA.Add(char_literal165);


					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }

			DebugLocation(279, 29);
			char_literal166=(IToken)Match(input,RBRACE,Follow._RBRACE_in_array_literal2051);  
			stream_RBRACE.Add(char_literal166);



			{
			// AST REWRITE
			// elements: expressionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 280:4: -> ^( ARRAY_LITERAL ( expressionList )? )
			{
				DebugLocation(280, 7);
				// C:\\work\\ReoScript\\ReoScript.g:280:7: ^( ARRAY_LITERAL ( expressionList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(280, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_LITERAL, "ARRAY_LITERAL"), root_1);

				DebugLocation(280, 23);
				// C:\\work\\ReoScript\\ReoScript.g:280:23: ( expressionList )?
				if (stream_expressionList.HasNext)
				{
					DebugLocation(280, 23);
					adaptor.AddChild(root_1, stream_expressionList.NextTree());

				}
				stream_expressionList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("array_literal", 35);
			LeaveRule("array_literal", 35);
			LeaveRule_array_literal();
		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "array_literal"); }
		return retval;

	}
	// $ANTLR end "array_literal"

	partial void EnterRule_object_literal();
	partial void LeaveRule_object_literal();

	// $ANTLR start "object_literal"
	// C:\\work\\ReoScript\\ReoScript.g:283:1: object_literal : '{' ( keypair )? ( ',' keypair )* ( ',' )* '}' -> ^( OBJECT_LITERAL ( keypair )* ) ;
	[GrammarRule("object_literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> object_literal()
	{
		EnterRule_object_literal();
		EnterRule("object_literal", 36);
		TraceIn("object_literal", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal167 = default(IToken);
		IToken char_literal169 = default(IToken);
		IToken char_literal171 = default(IToken);
		IToken char_literal172 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> keypair168 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> keypair170 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal167_tree = default(CommonTree);
		CommonTree char_literal169_tree = default(CommonTree);
		CommonTree char_literal171_tree = default(CommonTree);
		CommonTree char_literal172_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_keypair=new RewriteRuleSubtreeStream(adaptor,"rule keypair");
		try { DebugEnterRule(GrammarFileName, "object_literal");
		DebugLocation(283, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:284:2: ( '{' ( keypair )? ( ',' keypair )* ( ',' )* '}' -> ^( OBJECT_LITERAL ( keypair )* ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:284:4: '{' ( keypair )? ( ',' keypair )* ( ',' )* '}'
			{
			DebugLocation(284, 4);
			char_literal167=(IToken)Match(input,LCURLY,Follow._LCURLY_in_object_literal2074);  
			stream_LCURLY.Add(char_literal167);

			DebugLocation(284, 8);
			// C:\\work\\ReoScript\\ReoScript.g:284:8: ( keypair )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==IDENTIFIER))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:284:8: keypair
				{
				DebugLocation(284, 8);
				PushFollow(Follow._keypair_in_object_literal2076);
				keypair168=keypair();
				PopFollow();

				stream_keypair.Add(keypair168.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(284, 17);
			// C:\\work\\ReoScript\\ReoScript.g:284:17: ( ',' keypair )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==COMMA))
				{
					int LA44_1 = input.LA(2);

					if ((LA44_1==IDENTIFIER))
					{
						alt44 = 1;
					}


				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:284:18: ',' keypair
					{
					DebugLocation(284, 18);
					char_literal169=(IToken)Match(input,COMMA,Follow._COMMA_in_object_literal2080);  
					stream_COMMA.Add(char_literal169);

					DebugLocation(284, 22);
					PushFollow(Follow._keypair_in_object_literal2082);
					keypair170=keypair();
					PopFollow();

					stream_keypair.Add(keypair170.Tree);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }

			DebugLocation(284, 32);
			// C:\\work\\ReoScript\\ReoScript.g:284:32: ( ',' )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==COMMA))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:284:32: ','
					{
					DebugLocation(284, 32);
					char_literal171=(IToken)Match(input,COMMA,Follow._COMMA_in_object_literal2086);  
					stream_COMMA.Add(char_literal171);


					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }

			DebugLocation(284, 37);
			char_literal172=(IToken)Match(input,RCURLY,Follow._RCURLY_in_object_literal2089);  
			stream_RCURLY.Add(char_literal172);



			{
			// AST REWRITE
			// elements: keypair
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 285:4: -> ^( OBJECT_LITERAL ( keypair )* )
			{
				DebugLocation(285, 7);
				// C:\\work\\ReoScript\\ReoScript.g:285:7: ^( OBJECT_LITERAL ( keypair )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(285, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(OBJECT_LITERAL, "OBJECT_LITERAL"), root_1);

				DebugLocation(285, 24);
				// C:\\work\\ReoScript\\ReoScript.g:285:24: ( keypair )*
				while ( stream_keypair.HasNext )
				{
					DebugLocation(285, 24);
					adaptor.AddChild(root_1, stream_keypair.NextTree());

				}
				stream_keypair.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("object_literal", 36);
			LeaveRule("object_literal", 36);
			LeaveRule_object_literal();
		}
		DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "object_literal"); }
		return retval;

	}
	// $ANTLR end "object_literal"

	partial void EnterRule_keypair();
	partial void LeaveRule_keypair();

	// $ANTLR start "keypair"
	// C:\\work\\ReoScript\\ReoScript.g:288:1: keypair : variable ':' ! expression ;
	[GrammarRule("keypair")]
	private AstParserRuleReturnScope<CommonTree, IToken> keypair()
	{
		EnterRule_keypair();
		EnterRule("keypair", 37);
		TraceIn("keypair", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal174 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variable173 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression175 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal174_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "keypair");
		DebugLocation(288, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:289:2: ( variable ':' ! expression )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:289:4: variable ':' ! expression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(289, 4);
			PushFollow(Follow._variable_in_keypair2113);
			variable173=variable();
			PopFollow();

			adaptor.AddChild(root_0, variable173.Tree);
			DebugLocation(289, 16);
			char_literal174=(IToken)Match(input,COLON,Follow._COLON_in_keypair2115); 
			DebugLocation(289, 18);
			PushFollow(Follow._expression_in_keypair2118);
			expression175=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression175.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keypair", 37);
			LeaveRule("keypair", 37);
			LeaveRule_keypair();
		}
		DebugLocation(290, 1);
		} finally { DebugExitRule(GrammarFileName, "keypair"); }
		return retval;

	}
	// $ANTLR end "keypair"

	partial void EnterRule_ifelse();
	partial void LeaveRule_ifelse();

	// $ANTLR start "ifelse"
	// C:\\work\\ReoScript\\ReoScript.g:294:1: ifelse : 'if' LPAREN conditionalOrExpression RPAREN es1= embeddedStatement ( 'else' es2= embeddedStatement )? -> ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? ) ;
	[GrammarRule("ifelse")]
	private AstParserRuleReturnScope<CommonTree, IToken> ifelse()
	{
		EnterRule_ifelse();
		EnterRule("ifelse", 38);
		TraceIn("ifelse", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal176 = default(IToken);
		IToken LPAREN177 = default(IToken);
		IToken RPAREN179 = default(IToken);
		IToken string_literal180 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> es1 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> es2 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression178 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal176_tree = default(CommonTree);
		CommonTree LPAREN177_tree = default(CommonTree);
		CommonTree RPAREN179_tree = default(CommonTree);
		CommonTree string_literal180_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		try { DebugEnterRule(GrammarFileName, "ifelse");
		DebugLocation(294, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:295:2: ( 'if' LPAREN conditionalOrExpression RPAREN es1= embeddedStatement ( 'else' es2= embeddedStatement )? -> ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:295:4: 'if' LPAREN conditionalOrExpression RPAREN es1= embeddedStatement ( 'else' es2= embeddedStatement )?
			{
			DebugLocation(295, 4);
			string_literal176=(IToken)Match(input,104,Follow._104_in_ifelse2133);  
			stream_104.Add(string_literal176);

			DebugLocation(295, 9);
			LPAREN177=(IToken)Match(input,LPAREN,Follow._LPAREN_in_ifelse2135);  
			stream_LPAREN.Add(LPAREN177);

			DebugLocation(295, 16);
			PushFollow(Follow._conditionalOrExpression_in_ifelse2137);
			conditionalOrExpression178=conditionalOrExpression();
			PopFollow();

			stream_conditionalOrExpression.Add(conditionalOrExpression178.Tree);
			DebugLocation(295, 40);
			RPAREN179=(IToken)Match(input,RPAREN,Follow._RPAREN_in_ifelse2139);  
			stream_RPAREN.Add(RPAREN179);

			DebugLocation(295, 50);
			PushFollow(Follow._embeddedStatement_in_ifelse2143);
			es1=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(es1.Tree);
			DebugLocation(295, 69);
			// C:\\work\\ReoScript\\ReoScript.g:295:69: ( 'else' es2= embeddedStatement )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_0 = input.LA(1);

			if ((LA46_0==ELSE))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:295:70: 'else' es2= embeddedStatement
				{
				DebugLocation(295, 70);
				string_literal180=(IToken)Match(input,ELSE,Follow._ELSE_in_ifelse2146);  
				stream_ELSE.Add(string_literal180);

				DebugLocation(295, 80);
				PushFollow(Follow._embeddedStatement_in_ifelse2150);
				es2=embeddedStatement();
				PopFollow();

				stream_embeddedStatement.Add(es2.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: es1, conditionalOrExpression, es2
			// token labels: 
			// rule labels: retval, es2, es1
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_es2=new RewriteRuleSubtreeStream(adaptor,"rule es2",es2!=null?es2.Tree:null);
			RewriteRuleSubtreeStream stream_es1=new RewriteRuleSubtreeStream(adaptor,"rule es1",es1!=null?es1.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 296:3: -> ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? )
			{
				DebugLocation(296, 6);
				// C:\\work\\ReoScript\\ReoScript.g:296:6: ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(296, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IF_STATEMENT, "IF_STATEMENT"), root_1);

				DebugLocation(296, 21);
				adaptor.AddChild(root_1, stream_conditionalOrExpression.NextTree());
				DebugLocation(296, 46);
				adaptor.AddChild(root_1, stream_es1.NextTree());
				DebugLocation(296, 51);
				// C:\\work\\ReoScript\\ReoScript.g:296:51: ( $es2)?
				if (stream_es2.HasNext)
				{
					DebugLocation(296, 51);
					adaptor.AddChild(root_1, stream_es2.NextTree());

				}
				stream_es2.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ifelse", 38);
			LeaveRule("ifelse", 38);
			LeaveRule_ifelse();
		}
		DebugLocation(297, 1);
		} finally { DebugExitRule(GrammarFileName, "ifelse"); }
		return retval;

	}
	// $ANTLR end "ifelse"

	partial void EnterRule_forStatement();
	partial void LeaveRule_forStatement();

	// $ANTLR start "forStatement"
	// C:\\work\\ReoScript\\ReoScript.g:299:1: forStatement : 'for' '(' ( forInit )? SEMI ( conditionalOrExpression )? SEMI ( statementExpressionList )? ')' embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) ) ;
	[GrammarRule("forStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> forStatement()
	{
		EnterRule_forStatement();
		EnterRule("forStatement", 39);
		TraceIn("forStatement", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal181 = default(IToken);
		IToken char_literal182 = default(IToken);
		IToken SEMI184 = default(IToken);
		IToken SEMI186 = default(IToken);
		IToken char_literal188 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> forInit183 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression185 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpressionList187 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement189 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal181_tree = default(CommonTree);
		CommonTree char_literal182_tree = default(CommonTree);
		CommonTree SEMI184_tree = default(CommonTree);
		CommonTree SEMI186_tree = default(CommonTree);
		CommonTree char_literal188_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
		RewriteRuleSubtreeStream stream_statementExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule statementExpressionList");
		try { DebugEnterRule(GrammarFileName, "forStatement");
		DebugLocation(299, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:300:2: ( 'for' '(' ( forInit )? SEMI ( conditionalOrExpression )? SEMI ( statementExpressionList )? ')' embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:300:4: 'for' '(' ( forInit )? SEMI ( conditionalOrExpression )? SEMI ( statementExpressionList )? ')' embeddedStatement
			{
			DebugLocation(300, 4);
			string_literal181=(IToken)Match(input,101,Follow._101_in_forStatement2184);  
			stream_101.Add(string_literal181);

			DebugLocation(300, 10);
			char_literal182=(IToken)Match(input,LPAREN,Follow._LPAREN_in_forStatement2186);  
			stream_LPAREN.Add(char_literal182);

			DebugLocation(300, 14);
			// C:\\work\\ReoScript\\ReoScript.g:300:14: ( forInit )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			int LA47_0 = input.LA(1);

			if ((LA47_0==DECREMENT||LA47_0==FALSE||(LA47_0>=HEX_LITERATE && LA47_0<=IDENTIFIER)||(LA47_0>=INCREMENT && LA47_0<=LCURLY)||LA47_0==LPAREN||(LA47_0>=NULL && LA47_0<=NUMBER_LITERATE)||LA47_0==STRING_LITERATE||(LA47_0>=THIS && LA47_0<=UNDEFINED)||LA47_0==100||LA47_0==103||LA47_0==107))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:300:14: forInit
				{
				DebugLocation(300, 14);
				PushFollow(Follow._forInit_in_forStatement2188);
				forInit183=forInit();
				PopFollow();

				stream_forInit.Add(forInit183.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(47); }

			DebugLocation(300, 23);
			SEMI184=(IToken)Match(input,SEMI,Follow._SEMI_in_forStatement2191);  
			stream_SEMI.Add(SEMI184);

			DebugLocation(300, 28);
			// C:\\work\\ReoScript\\ReoScript.g:300:28: ( conditionalOrExpression )?
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==DECREMENT||LA48_0==FALSE||(LA48_0>=HEX_LITERATE && LA48_0<=IDENTIFIER)||(LA48_0>=INCREMENT && LA48_0<=LCURLY)||LA48_0==LPAREN||LA48_0==MINUS||LA48_0==NOT||(LA48_0>=NULL && LA48_0<=NUMBER_LITERATE)||LA48_0==PLUS||LA48_0==STRING_LITERATE||(LA48_0>=THIS && LA48_0<=TRUE)||LA48_0==UNDEFINED||LA48_0==103||LA48_0==111))
			{
				alt48 = 1;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:300:28: conditionalOrExpression
				{
				DebugLocation(300, 28);
				PushFollow(Follow._conditionalOrExpression_in_forStatement2193);
				conditionalOrExpression185=conditionalOrExpression();
				PopFollow();

				stream_conditionalOrExpression.Add(conditionalOrExpression185.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(48); }

			DebugLocation(300, 53);
			SEMI186=(IToken)Match(input,SEMI,Follow._SEMI_in_forStatement2196);  
			stream_SEMI.Add(SEMI186);

			DebugLocation(300, 58);
			// C:\\work\\ReoScript\\ReoScript.g:300:58: ( statementExpressionList )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, false);
			int LA49_0 = input.LA(1);

			if ((LA49_0==DECREMENT||LA49_0==FALSE||(LA49_0>=HEX_LITERATE && LA49_0<=IDENTIFIER)||(LA49_0>=INCREMENT && LA49_0<=LCURLY)||LA49_0==LPAREN||(LA49_0>=NULL && LA49_0<=NUMBER_LITERATE)||LA49_0==STRING_LITERATE||(LA49_0>=THIS && LA49_0<=TRUE)||LA49_0==UNDEFINED||LA49_0==100||LA49_0==103||LA49_0==107))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:300:58: statementExpressionList
				{
				DebugLocation(300, 58);
				PushFollow(Follow._statementExpressionList_in_forStatement2198);
				statementExpressionList187=statementExpressionList();
				PopFollow();

				stream_statementExpressionList.Add(statementExpressionList187.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(49); }

			DebugLocation(300, 83);
			char_literal188=(IToken)Match(input,RPAREN,Follow._RPAREN_in_forStatement2201);  
			stream_RPAREN.Add(char_literal188);

			DebugLocation(300, 87);
			PushFollow(Follow._embeddedStatement_in_forStatement2203);
			embeddedStatement189=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(embeddedStatement189.Tree);


			{
			// AST REWRITE
			// elements: forInit, statementExpressionList, conditionalOrExpression, embeddedStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 301:3: -> ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) )
			{
				DebugLocation(301, 6);
				// C:\\work\\ReoScript\\ReoScript.g:301:6: ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(301, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_STATEMENT, "FOR_STATEMENT"), root_1);

				DebugLocation(302, 5);
				// C:\\work\\ReoScript\\ReoScript.g:302:5: ^( FOR_INIT ( forInit )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(302, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_2);

				DebugLocation(302, 16);
				// C:\\work\\ReoScript\\ReoScript.g:302:16: ( forInit )?
				if (stream_forInit.HasNext)
				{
					DebugLocation(302, 16);
					adaptor.AddChild(root_2, stream_forInit.NextTree());

				}
				stream_forInit.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(303, 5);
				// C:\\work\\ReoScript\\ReoScript.g:303:5: ^( FOR_CONDITION ( conditionalOrExpression )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(303, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_CONDITION, "FOR_CONDITION"), root_2);

				DebugLocation(303, 21);
				// C:\\work\\ReoScript\\ReoScript.g:303:21: ( conditionalOrExpression )?
				if (stream_conditionalOrExpression.HasNext)
				{
					DebugLocation(303, 21);
					adaptor.AddChild(root_2, stream_conditionalOrExpression.NextTree());

				}
				stream_conditionalOrExpression.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(304, 5);
				// C:\\work\\ReoScript\\ReoScript.g:304:5: ^( FOR_ITERATOR ( statementExpressionList )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(304, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_ITERATOR, "FOR_ITERATOR"), root_2);

				DebugLocation(304, 20);
				// C:\\work\\ReoScript\\ReoScript.g:304:20: ( statementExpressionList )?
				if (stream_statementExpressionList.HasNext)
				{
					DebugLocation(304, 20);
					adaptor.AddChild(root_2, stream_statementExpressionList.NextTree());

				}
				stream_statementExpressionList.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(305, 5);
				// C:\\work\\ReoScript\\ReoScript.g:305:5: ^( FOR_BODY embeddedStatement )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(305, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_BODY, "FOR_BODY"), root_2);

				DebugLocation(305, 16);
				adaptor.AddChild(root_2, stream_embeddedStatement.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forStatement", 39);
			LeaveRule("forStatement", 39);
			LeaveRule_forStatement();
		}
		DebugLocation(307, 1);
		} finally { DebugExitRule(GrammarFileName, "forStatement"); }
		return retval;

	}
	// $ANTLR end "forStatement"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();

	// $ANTLR start "forInit"
	// C:\\work\\ReoScript\\ReoScript.g:309:1: forInit : ( localVariableDeclaration | statementExpressionList );
	[GrammarRule("forInit")]
	private AstParserRuleReturnScope<CommonTree, IToken> forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 40);
		TraceIn("forInit", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration190 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpressionList191 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(309, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:310:2: ( localVariableDeclaration | statementExpressionList )
			int alt50=2;
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==TYPE))
			{
				alt50 = 1;
			}
			else if ((LA50_0==DECREMENT||LA50_0==FALSE||(LA50_0>=HEX_LITERATE && LA50_0<=IDENTIFIER)||(LA50_0>=INCREMENT && LA50_0<=LCURLY)||LA50_0==LPAREN||(LA50_0>=NULL && LA50_0<=NUMBER_LITERATE)||LA50_0==STRING_LITERATE||(LA50_0>=THIS && LA50_0<=TRUE)||LA50_0==UNDEFINED||LA50_0==100||LA50_0==103||LA50_0==107))
			{
				alt50 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:310:4: localVariableDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(310, 4);
				PushFollow(Follow._localVariableDeclaration_in_forInit2275);
				localVariableDeclaration190=localVariableDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, localVariableDeclaration190.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:311:4: statementExpressionList
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(311, 4);
				PushFollow(Follow._statementExpressionList_in_forInit2281);
				statementExpressionList191=statementExpressionList();
				PopFollow();

				adaptor.AddChild(root_0, statementExpressionList191.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 40);
			LeaveRule("forInit", 40);
			LeaveRule_forInit();
		}
		DebugLocation(312, 1);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_foreachStatement();
	partial void LeaveRule_foreachStatement();

	// $ANTLR start "foreachStatement"
	// C:\\work\\ReoScript\\ReoScript.g:314:1: foreachStatement : 'foreach' '(' ( 'var' )? IDENTIFIER 'in' expression ')' embeddedStatement -> ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement ) ;
	[GrammarRule("foreachStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> foreachStatement()
	{
		EnterRule_foreachStatement();
		EnterRule("foreachStatement", 41);
		TraceIn("foreachStatement", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal192 = default(IToken);
		IToken char_literal193 = default(IToken);
		IToken string_literal194 = default(IToken);
		IToken IDENTIFIER195 = default(IToken);
		IToken string_literal196 = default(IToken);
		IToken char_literal198 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression197 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement199 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal192_tree = default(CommonTree);
		CommonTree char_literal193_tree = default(CommonTree);
		CommonTree string_literal194_tree = default(CommonTree);
		CommonTree IDENTIFIER195_tree = default(CommonTree);
		CommonTree string_literal196_tree = default(CommonTree);
		CommonTree char_literal198_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		try { DebugEnterRule(GrammarFileName, "foreachStatement");
		DebugLocation(314, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:315:2: ( 'foreach' '(' ( 'var' )? IDENTIFIER 'in' expression ')' embeddedStatement -> ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:315:4: 'foreach' '(' ( 'var' )? IDENTIFIER 'in' expression ')' embeddedStatement
			{
			DebugLocation(315, 4);
			string_literal192=(IToken)Match(input,102,Follow._102_in_foreachStatement2293);  
			stream_102.Add(string_literal192);

			DebugLocation(315, 14);
			char_literal193=(IToken)Match(input,LPAREN,Follow._LPAREN_in_foreachStatement2295);  
			stream_LPAREN.Add(char_literal193);

			DebugLocation(315, 18);
			// C:\\work\\ReoScript\\ReoScript.g:315:18: ( 'var' )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==TYPE))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:315:18: 'var'
				{
				DebugLocation(315, 18);
				string_literal194=(IToken)Match(input,TYPE,Follow._TYPE_in_foreachStatement2297);  
				stream_TYPE.Add(string_literal194);


				}
				break;

			}
			} finally { DebugExitSubRule(51); }

			DebugLocation(315, 25);
			IDENTIFIER195=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_foreachStatement2300);  
			stream_IDENTIFIER.Add(IDENTIFIER195);

			DebugLocation(315, 36);
			string_literal196=(IToken)Match(input,106,Follow._106_in_foreachStatement2302);  
			stream_106.Add(string_literal196);

			DebugLocation(315, 41);
			PushFollow(Follow._expression_in_foreachStatement2304);
			expression197=expression();
			PopFollow();

			stream_expression.Add(expression197.Tree);
			DebugLocation(315, 52);
			char_literal198=(IToken)Match(input,RPAREN,Follow._RPAREN_in_foreachStatement2306);  
			stream_RPAREN.Add(char_literal198);

			DebugLocation(315, 56);
			PushFollow(Follow._embeddedStatement_in_foreachStatement2308);
			embeddedStatement199=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(embeddedStatement199.Tree);


			{
			// AST REWRITE
			// elements: expression, embeddedStatement, IDENTIFIER
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 316:3: -> ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement )
			{
				DebugLocation(316, 6);
				// C:\\work\\ReoScript\\ReoScript.g:316:6: ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(316, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOREACH_STATEMENT, "FOREACH_STATEMENT"), root_1);

				DebugLocation(316, 26);
				adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());
				DebugLocation(316, 37);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(316, 48);
				adaptor.AddChild(root_1, stream_embeddedStatement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("foreachStatement", 41);
			LeaveRule("foreachStatement", 41);
			LeaveRule_foreachStatement();
		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "foreachStatement"); }
		return retval;

	}
	// $ANTLR end "foreachStatement"

	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();

	// $ANTLR start "whileStatement"
	// C:\\work\\ReoScript\\ReoScript.g:319:1: whileStatement : 'while' LPAREN ( conditionalOrExpression ) RPAREN embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) ) ;
	[GrammarRule("whileStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 42);
		TraceIn("whileStatement", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal200 = default(IToken);
		IToken LPAREN201 = default(IToken);
		IToken RPAREN203 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression202 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement204 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal200_tree = default(CommonTree);
		CommonTree LPAREN201_tree = default(CommonTree);
		CommonTree RPAREN203_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(319, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:320:2: ( 'while' LPAREN ( conditionalOrExpression ) RPAREN embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:320:4: 'while' LPAREN ( conditionalOrExpression ) RPAREN embeddedStatement
			{
			DebugLocation(320, 4);
			string_literal200=(IToken)Match(input,110,Follow._110_in_whileStatement2333);  
			stream_110.Add(string_literal200);

			DebugLocation(320, 12);
			LPAREN201=(IToken)Match(input,LPAREN,Follow._LPAREN_in_whileStatement2335);  
			stream_LPAREN.Add(LPAREN201);

			DebugLocation(320, 19);
			// C:\\work\\ReoScript\\ReoScript.g:320:19: ( conditionalOrExpression )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:320:20: conditionalOrExpression
			{
			DebugLocation(320, 20);
			PushFollow(Follow._conditionalOrExpression_in_whileStatement2338);
			conditionalOrExpression202=conditionalOrExpression();
			PopFollow();

			stream_conditionalOrExpression.Add(conditionalOrExpression202.Tree);

			}

			DebugLocation(320, 45);
			RPAREN203=(IToken)Match(input,RPAREN,Follow._RPAREN_in_whileStatement2341);  
			stream_RPAREN.Add(RPAREN203);

			DebugLocation(320, 52);
			PushFollow(Follow._embeddedStatement_in_whileStatement2343);
			embeddedStatement204=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(embeddedStatement204.Tree);


			{
			// AST REWRITE
			// elements: embeddedStatement, conditionalOrExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 321:3: -> ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) )
			{
				DebugLocation(321, 7);
				// C:\\work\\ReoScript\\ReoScript.g:321:7: ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(321, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_STATEMENT, "FOR_STATEMENT"), root_1);

				DebugLocation(322, 5);
				// C:\\work\\ReoScript\\ReoScript.g:322:5: ^( FOR_INIT )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(322, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_2);

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(323, 5);
				// C:\\work\\ReoScript\\ReoScript.g:323:5: ^( FOR_CONDITION ( conditionalOrExpression )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(323, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_CONDITION, "FOR_CONDITION"), root_2);

				DebugLocation(323, 21);
				// C:\\work\\ReoScript\\ReoScript.g:323:21: ( conditionalOrExpression )?
				if (stream_conditionalOrExpression.HasNext)
				{
					DebugLocation(323, 21);
					adaptor.AddChild(root_2, stream_conditionalOrExpression.NextTree());

				}
				stream_conditionalOrExpression.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(324, 5);
				// C:\\work\\ReoScript\\ReoScript.g:324:5: ^( FOR_ITERATOR )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(324, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_ITERATOR, "FOR_ITERATOR"), root_2);

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(325, 5);
				// C:\\work\\ReoScript\\ReoScript.g:325:5: ^( FOR_BODY embeddedStatement )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(325, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_BODY, "FOR_BODY"), root_2);

				DebugLocation(325, 16);
				adaptor.AddChild(root_2, stream_embeddedStatement.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whileStatement", 42);
			LeaveRule("whileStatement", 42);
			LeaveRule_whileStatement();
		}
		DebugLocation(327, 1);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return retval;

	}
	// $ANTLR end "whileStatement"

	partial void EnterRule_switchStatement();
	partial void LeaveRule_switchStatement();

	// $ANTLR start "switchStatement"
	// C:\\work\\ReoScript\\ReoScript.g:329:1: switchStatement : 'switch' '(' conditionalOrExpression ')' '{' ( switchCaseStatementList )? '}' -> ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? ) ;
	[GrammarRule("switchStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchStatement()
	{
		EnterRule_switchStatement();
		EnterRule("switchStatement", 43);
		TraceIn("switchStatement", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal205 = default(IToken);
		IToken char_literal206 = default(IToken);
		IToken char_literal208 = default(IToken);
		IToken char_literal209 = default(IToken);
		IToken char_literal211 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression207 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchCaseStatementList210 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal205_tree = default(CommonTree);
		CommonTree char_literal206_tree = default(CommonTree);
		CommonTree char_literal208_tree = default(CommonTree);
		CommonTree char_literal209_tree = default(CommonTree);
		CommonTree char_literal211_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_switchCaseStatementList=new RewriteRuleSubtreeStream(adaptor,"rule switchCaseStatementList");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		try { DebugEnterRule(GrammarFileName, "switchStatement");
		DebugLocation(329, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:330:2: ( 'switch' '(' conditionalOrExpression ')' '{' ( switchCaseStatementList )? '}' -> ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:330:4: 'switch' '(' conditionalOrExpression ')' '{' ( switchCaseStatementList )? '}'
			{
			DebugLocation(330, 4);
			string_literal205=(IToken)Match(input,109,Follow._109_in_switchStatement2409);  
			stream_109.Add(string_literal205);

			DebugLocation(330, 13);
			char_literal206=(IToken)Match(input,LPAREN,Follow._LPAREN_in_switchStatement2411);  
			stream_LPAREN.Add(char_literal206);

			DebugLocation(330, 17);
			PushFollow(Follow._conditionalOrExpression_in_switchStatement2413);
			conditionalOrExpression207=conditionalOrExpression();
			PopFollow();

			stream_conditionalOrExpression.Add(conditionalOrExpression207.Tree);
			DebugLocation(330, 41);
			char_literal208=(IToken)Match(input,RPAREN,Follow._RPAREN_in_switchStatement2415);  
			stream_RPAREN.Add(char_literal208);

			DebugLocation(331, 4);
			char_literal209=(IToken)Match(input,LCURLY,Follow._LCURLY_in_switchStatement2420);  
			stream_LCURLY.Add(char_literal209);

			DebugLocation(331, 8);
			// C:\\work\\ReoScript\\ReoScript.g:331:8: ( switchCaseStatementList )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==DECREMENT||LA52_0==FALSE||(LA52_0>=HEX_LITERATE && LA52_0<=IDENTIFIER)||(LA52_0>=INCREMENT && LA52_0<=LCURLY)||LA52_0==LPAREN||(LA52_0>=NULL && LA52_0<=NUMBER_LITERATE)||LA52_0==STRING_LITERATE||(LA52_0>=THIS && LA52_0<=UNDEFINED)||(LA52_0>=96 && LA52_0<=105)||(LA52_0>=107 && LA52_0<=110)))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:331:8: switchCaseStatementList
				{
				DebugLocation(331, 8);
				PushFollow(Follow._switchCaseStatementList_in_switchStatement2422);
				switchCaseStatementList210=switchCaseStatementList();
				PopFollow();

				stream_switchCaseStatementList.Add(switchCaseStatementList210.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(331, 33);
			char_literal211=(IToken)Match(input,RCURLY,Follow._RCURLY_in_switchStatement2425);  
			stream_RCURLY.Add(char_literal211);



			{
			// AST REWRITE
			// elements: switchCaseStatementList, conditionalOrExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 332:4: -> ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? )
			{
				DebugLocation(332, 7);
				// C:\\work\\ReoScript\\ReoScript.g:332:7: ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(332, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH, "SWITCH"), root_1);

				DebugLocation(332, 16);
				adaptor.AddChild(root_1, stream_conditionalOrExpression.NextTree());
				DebugLocation(332, 40);
				// C:\\work\\ReoScript\\ReoScript.g:332:40: ( switchCaseStatementList )?
				if (stream_switchCaseStatementList.HasNext)
				{
					DebugLocation(332, 40);
					adaptor.AddChild(root_1, stream_switchCaseStatementList.NextTree());

				}
				stream_switchCaseStatementList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchStatement", 43);
			LeaveRule("switchStatement", 43);
			LeaveRule_switchStatement();
		}
		DebugLocation(333, 1);
		} finally { DebugExitRule(GrammarFileName, "switchStatement"); }
		return retval;

	}
	// $ANTLR end "switchStatement"

	partial void EnterRule_switchCaseStatementList();
	partial void LeaveRule_switchCaseStatementList();

	// $ANTLR start "switchCaseStatementList"
	// C:\\work\\ReoScript\\ReoScript.g:335:1: switchCaseStatementList : ( switchCaseCondition )+ ;
	[GrammarRule("switchCaseStatementList")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseStatementList()
	{
		EnterRule_switchCaseStatementList();
		EnterRule("switchCaseStatementList", 44);
		TraceIn("switchCaseStatementList", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> switchCaseCondition212 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "switchCaseStatementList");
		DebugLocation(335, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:336:2: ( ( switchCaseCondition )+ )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:336:4: ( switchCaseCondition )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(336, 4);
			// C:\\work\\ReoScript\\ReoScript.g:336:4: ( switchCaseCondition )+
			int cnt53=0;
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==DECREMENT||LA53_0==FALSE||(LA53_0>=HEX_LITERATE && LA53_0<=IDENTIFIER)||(LA53_0>=INCREMENT && LA53_0<=LCURLY)||LA53_0==LPAREN||(LA53_0>=NULL && LA53_0<=NUMBER_LITERATE)||LA53_0==STRING_LITERATE||(LA53_0>=THIS && LA53_0<=UNDEFINED)||(LA53_0>=96 && LA53_0<=105)||(LA53_0>=107 && LA53_0<=110)))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:336:5: switchCaseCondition
					{
					DebugLocation(336, 5);
					PushFollow(Follow._switchCaseCondition_in_switchCaseStatementList2451);
					switchCaseCondition212=switchCaseCondition();
					PopFollow();

					adaptor.AddChild(root_0, switchCaseCondition212.Tree);

					}
					break;

				default:
					if (cnt53 >= 1)
						goto loop53;

					EarlyExitException eee53 = new EarlyExitException( 53, input );
					DebugRecognitionException(eee53);
					throw eee53;
				}
				cnt53++;
			}
			loop53:
				;

			} finally { DebugExitSubRule(53); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseStatementList", 44);
			LeaveRule("switchCaseStatementList", 44);
			LeaveRule_switchCaseStatementList();
		}
		DebugLocation(337, 1);
		} finally { DebugExitRule(GrammarFileName, "switchCaseStatementList"); }
		return retval;

	}
	// $ANTLR end "switchCaseStatementList"

	partial void EnterRule_switchCaseCondition();
	partial void LeaveRule_switchCaseCondition();

	// $ANTLR start "switchCaseCondition"
	// C:\\work\\ReoScript\\ReoScript.g:339:1: switchCaseCondition : ( 'case' expression ':' -> ^( SWITCH_CASE expression ) | statement -> statement | 'default' ':' -> ^( SWITCH_CASE_ELSE ) );
	[GrammarRule("switchCaseCondition")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseCondition()
	{
		EnterRule_switchCaseCondition();
		EnterRule("switchCaseCondition", 45);
		TraceIn("switchCaseCondition", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal213 = default(IToken);
		IToken char_literal215 = default(IToken);
		IToken string_literal217 = default(IToken);
		IToken char_literal218 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement216 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal213_tree = default(CommonTree);
		CommonTree char_literal215_tree = default(CommonTree);
		CommonTree string_literal217_tree = default(CommonTree);
		CommonTree char_literal218_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "switchCaseCondition");
		DebugLocation(339, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:340:2: ( 'case' expression ':' -> ^( SWITCH_CASE expression ) | statement -> statement | 'default' ':' -> ^( SWITCH_CASE_ELSE ) )
			int alt54=3;
			try { DebugEnterDecision(54, false);
			switch (input.LA(1))
			{
			case 97:
				{
				alt54 = 1;
				}
				break;
			case DECREMENT:
			case FALSE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case INCREMENT:
			case LBRACE:
			case LCURLY:
			case LPAREN:
			case NULL:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case TRUE:
			case TYPE:
			case UNDEFINED:
			case 96:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 107:
			case 108:
			case 109:
			case 110:
				{
				alt54 = 2;
				}
				break;
			case 99:
				{
				alt54 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:341:4: 'case' expression ':'
				{
				DebugLocation(341, 4);
				string_literal213=(IToken)Match(input,97,Follow._97_in_switchCaseCondition2469);  
				stream_97.Add(string_literal213);

				DebugLocation(341, 11);
				PushFollow(Follow._expression_in_switchCaseCondition2471);
				expression214=expression();
				PopFollow();

				stream_expression.Add(expression214.Tree);
				DebugLocation(341, 22);
				char_literal215=(IToken)Match(input,COLON,Follow._COLON_in_switchCaseCondition2473);  
				stream_COLON.Add(char_literal215);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 341:28: -> ^( SWITCH_CASE expression )
				{
					DebugLocation(341, 31);
					// C:\\work\\ReoScript\\ReoScript.g:341:31: ^( SWITCH_CASE expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(341, 33);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH_CASE, "SWITCH_CASE"), root_1);

					DebugLocation(341, 45);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:342:4: statement
				{
				DebugLocation(342, 4);
				PushFollow(Follow._statement_in_switchCaseCondition2488);
				statement216=statement();
				PopFollow();

				stream_statement.Add(statement216.Tree);


				{
				// AST REWRITE
				// elements: statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 342:19: -> statement
				{
					DebugLocation(342, 22);
					adaptor.AddChild(root_0, stream_statement.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:343:4: 'default' ':'
				{
				DebugLocation(343, 4);
				string_literal217=(IToken)Match(input,99,Follow._99_in_switchCaseCondition2502);  
				stream_99.Add(string_literal217);

				DebugLocation(343, 14);
				char_literal218=(IToken)Match(input,COLON,Follow._COLON_in_switchCaseCondition2504);  
				stream_COLON.Add(char_literal218);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 343:22: -> ^( SWITCH_CASE_ELSE )
				{
					DebugLocation(343, 25);
					// C:\\work\\ReoScript\\ReoScript.g:343:25: ^( SWITCH_CASE_ELSE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(343, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH_CASE_ELSE, "SWITCH_CASE_ELSE"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseCondition", 45);
			LeaveRule("switchCaseCondition", 45);
			LeaveRule_switchCaseCondition();
		}
		DebugLocation(344, 1);
		} finally { DebugExitRule(GrammarFileName, "switchCaseCondition"); }
		return retval;

	}
	// $ANTLR end "switchCaseCondition"

	partial void EnterRule_terminalStatement();
	partial void LeaveRule_terminalStatement();

	// $ANTLR start "terminalStatement"
	// C:\\work\\ReoScript\\ReoScript.g:346:1: terminalStatement : ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE ) SEMI ;
	[GrammarRule("terminalStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> terminalStatement()
	{
		EnterRule_terminalStatement();
		EnterRule("terminalStatement", 46);
		TraceIn("terminalStatement", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal220 = default(IToken);
		IToken string_literal221 = default(IToken);
		IToken SEMI222 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> returnStatement219 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal220_tree = default(CommonTree);
		CommonTree string_literal221_tree = default(CommonTree);
		CommonTree SEMI222_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_returnStatement=new RewriteRuleSubtreeStream(adaptor,"rule returnStatement");
		try { DebugEnterRule(GrammarFileName, "terminalStatement");
		DebugLocation(346, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:347:2: ( ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE ) SEMI )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:347:4: ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE ) SEMI
			{
			DebugLocation(347, 4);
			// C:\\work\\ReoScript\\ReoScript.g:347:4: ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE )
			int alt55=3;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			switch (input.LA(1))
			{
			case 108:
				{
				alt55 = 1;
				}
				break;
			case 96:
				{
				alt55 = 2;
				}
				break;
			case 98:
				{
				alt55 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:347:6: returnStatement
				{
				DebugLocation(347, 6);
				PushFollow(Follow._returnStatement_in_terminalStatement2528);
				returnStatement219=returnStatement();
				PopFollow();

				stream_returnStatement.Add(returnStatement219.Tree);


				{
				// AST REWRITE
				// elements: returnStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 347:22: -> returnStatement
				{
					DebugLocation(347, 25);
					adaptor.AddChild(root_0, stream_returnStatement.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:347:43: ( 'break' )
				{
				DebugLocation(347, 43);
				// C:\\work\\ReoScript\\ReoScript.g:347:43: ( 'break' )
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:347:44: 'break'
				{
				DebugLocation(347, 44);
				string_literal220=(IToken)Match(input,96,Follow._96_in_terminalStatement2537);  
				stream_96.Add(string_literal220);


				}



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 347:52: -> BREAK
				{
					DebugLocation(347, 54);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(BREAK, "BREAK"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:347:62: ( 'continue' )
				{
				DebugLocation(347, 62);
				// C:\\work\\ReoScript\\ReoScript.g:347:62: ( 'continue' )
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:347:63: 'continue'
				{
				DebugLocation(347, 63);
				string_literal221=(IToken)Match(input,98,Follow._98_in_terminalStatement2545);  
				stream_98.Add(string_literal221);


				}



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 347:74: -> CONTINUE
				{
					DebugLocation(347, 76);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CONTINUE, "CONTINUE"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(347, 87);
			SEMI222=(IToken)Match(input,SEMI,Follow._SEMI_in_terminalStatement2552);  
			stream_SEMI.Add(SEMI222);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("terminalStatement", 46);
			LeaveRule("terminalStatement", 46);
			LeaveRule_terminalStatement();
		}
		DebugLocation(348, 1);
		} finally { DebugExitRule(GrammarFileName, "terminalStatement"); }
		return retval;

	}
	// $ANTLR end "terminalStatement"

	partial void EnterRule_returnStatement();
	partial void LeaveRule_returnStatement();

	// $ANTLR start "returnStatement"
	// C:\\work\\ReoScript\\ReoScript.g:350:1: returnStatement : 'return' ( expression )? -> ^( RETURN ( expression )? ) ;
	[GrammarRule("returnStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> returnStatement()
	{
		EnterRule_returnStatement();
		EnterRule("returnStatement", 47);
		TraceIn("returnStatement", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal223 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression224 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal223_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "returnStatement");
		DebugLocation(350, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:351:2: ( 'return' ( expression )? -> ^( RETURN ( expression )? ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:351:4: 'return' ( expression )?
			{
			DebugLocation(351, 4);
			string_literal223=(IToken)Match(input,108,Follow._108_in_returnStatement2563);  
			stream_108.Add(string_literal223);

			DebugLocation(351, 13);
			// C:\\work\\ReoScript\\ReoScript.g:351:13: ( expression )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==DECREMENT||LA56_0==FALSE||(LA56_0>=HEX_LITERATE && LA56_0<=IDENTIFIER)||(LA56_0>=INCREMENT && LA56_0<=LCURLY)||LA56_0==LPAREN||LA56_0==MINUS||LA56_0==NOT||(LA56_0>=NULL && LA56_0<=NUMBER_LITERATE)||LA56_0==PLUS||LA56_0==STRING_LITERATE||(LA56_0>=THIS && LA56_0<=TRUE)||LA56_0==UNDEFINED||LA56_0==103||LA56_0==107||LA56_0==111))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:351:13: expression
				{
				DebugLocation(351, 13);
				PushFollow(Follow._expression_in_returnStatement2565);
				expression224=expression();
				PopFollow();

				stream_expression.Add(expression224.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(56); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 351:25: -> ^( RETURN ( expression )? )
			{
				DebugLocation(351, 28);
				// C:\\work\\ReoScript\\ReoScript.g:351:28: ^( RETURN ( expression )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(351, 30);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, "RETURN"), root_1);

				DebugLocation(351, 37);
				// C:\\work\\ReoScript\\ReoScript.g:351:37: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(351, 37);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("returnStatement", 47);
			LeaveRule("returnStatement", 47);
			LeaveRule_returnStatement();
		}
		DebugLocation(352, 1);
		} finally { DebugExitRule(GrammarFileName, "returnStatement"); }
		return retval;

	}
	// $ANTLR end "returnStatement"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();

	// $ANTLR start "literal"
	// C:\\work\\ReoScript\\ReoScript.g:357:1: literal : ( TRUE | FALSE | NUMBER_LITERATE | HEX_LITERATE | STRING_LITERATE | THIS | NULL | UNDEFINED );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 48);
		TraceIn("literal", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set225 = default(IToken);

		CommonTree set225_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(357, 1);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:358:2: ( TRUE | FALSE | NUMBER_LITERATE | HEX_LITERATE | STRING_LITERATE | THIS | NULL | UNDEFINED )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(358, 2);

			set225=(IToken)input.LT(1);
			if (input.LA(1)==FALSE||input.LA(1)==HEX_LITERATE||(input.LA(1)>=NULL && input.LA(1)<=NUMBER_LITERATE)||input.LA(1)==STRING_LITERATE||(input.LA(1)>=THIS && input.LA(1)<=TRUE)||input.LA(1)==UNDEFINED)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set225));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 48);
			LeaveRule("literal", 48);
			LeaveRule_literal();
		}
		DebugLocation(367, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _statement_in_script416 = new BitSet(new ulong[]{0x1073002040000002UL,0x7BF50F100030UL});
		public static readonly BitSet _function_define_in_function_defines429 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _103_in_function_define441 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_function_define445 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _LPAREN_in_function_define447 = new BitSet(new ulong[]{0x2000000000000UL,0x20000UL});
		public static readonly BitSet _parameterDeclarationList_in_function_define449 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _RPAREN_in_function_define452 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _block_in_function_define454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_anonymous_function_define485 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _LPAREN_in_anonymous_function_define487 = new BitSet(new ulong[]{0x2000000000000UL,0x20000UL});
		public static readonly BitSet _parameterDeclarationList_in_anonymous_function_define489 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _RPAREN_in_anonymous_function_define492 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _block_in_anonymous_function_define494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_anonymous_function_define516 = new BitSet(new ulong[]{0x2000000000000UL,0x20000UL});
		public static readonly BitSet _parameterDeclarationList_in_anonymous_function_define518 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _RPAREN_in_anonymous_function_define521 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _95_in_anonymous_function_define523 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _block_in_anonymous_function_define525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_parameterDeclarationList553 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _COMMA_in_parameterDeclarationList556 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_parameterDeclarationList559 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _LCURLY_in_block572 = new BitSet(new ulong[]{0x1073002040000000UL,0x7BF50F108030UL});
		public static readonly BitSet _statement_in_block574 = new BitSet(new ulong[]{0x1073002040000000UL,0x7BF50F108030UL});
		public static readonly BitSet _RCURLY_in_block577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _importStatement_in_statement606 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_statement608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_statement614 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_statement616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_define_in_statement622 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _SEMI_in_statement624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _embeddedStatement_in_statement631 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _105_in_importStatement642 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _namespace_in_importStatement644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_namespace665 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _DOT_in_namespace668 = new BitSet(new ulong[]{0x2000000000000UL,0x1UL});
		public static readonly BitSet _set_in_namespace670 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _block_in_embeddedStatement691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementExpression_in_embeddedStatement696 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_embeddedStatement698 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifelse_in_embeddedStatement704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_embeddedStatement709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _foreachStatement_in_embeddedStatement714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_embeddedStatement719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchStatement_in_embeddedStatement724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _terminalStatement_in_embeddedStatement729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _invocationExpression_in_statementExpression744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_statementExpression749 = new BitSet(new ulong[]{0x1063002000000000UL,0x800B100030UL});
		public static readonly BitSet _primaryExpression_in_statementExpression751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_statementExpression766 = new BitSet(new ulong[]{0x1063002000000000UL,0x800B100030UL});
		public static readonly BitSet _primaryExpression_in_statementExpression768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCREMENT_in_statementExpression783 = new BitSet(new ulong[]{0x1063002000000000UL,0x800B100030UL});
		public static readonly BitSet _primaryExpression_in_statementExpression785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_statementExpression802 = new BitSet(new ulong[]{0x1063002000000000UL,0x800B100030UL});
		public static readonly BitSet _primaryExpression_in_statementExpression804 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TYPE_in_localMemberVariableDeclaration829 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localMemberVariableDeclaration831 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _COMMA_in_localMemberVariableDeclaration834 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localMemberVariableDeclaration836 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _TYPE_in_localVariableDeclaration865 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localVariableDeclaration867 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _COMMA_in_localVariableDeclaration870 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localVariableDeclaration872 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _IDENTIFIER_in_localVariableDeclarationAssignment898 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _ASSIGNMENT_in_localVariableDeclarationAssignment901 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_localVariableDeclarationAssignment903 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_invocationExpression935 = new BitSet(new ulong[]{0x100000400FFE02UL});
		public static readonly BitSet _ASSIGNMENT_in_invocationExpression946 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_invocationExpression948 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_PLUS_in_invocationExpression967 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_invocationExpression969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_MINUS_in_invocationExpression995 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_invocationExpression997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_MUL_in_invocationExpression1023 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_invocationExpression1025 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_DIV_in_invocationExpression1051 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_invocationExpression1053 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_REM_in_invocationExpression1079 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_invocationExpression1081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_AND_in_invocationExpression1107 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_invocationExpression1109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_OR_in_invocationExpression1135 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_invocationExpression1137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_REV_in_invocationExpression1163 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_invocationExpression1165 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_LSHIFT_in_invocationExpression1191 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_invocationExpression1193 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_RSHIFT_in_invocationExpression1218 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_invocationExpression1220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCREMENT_in_invocationExpression1245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_invocationExpression1266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementExpression_in_statementExpressionList1310 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _COMMA_in_statementExpressionList1313 = new BitSet(new ulong[]{0x1073002040000000UL,0x8900B100030UL});
		public static readonly BitSet _statementExpression_in_statementExpressionList1316 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _107_in_expression1333 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _assignmentExpression_in_expression1335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_expression1350 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOF_in_expression1352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionList1366 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _COMMA_in_expressionList1369 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_expressionList1372 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _conditionalExpression_in_assignmentExpression1386 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _ASSIGNMENT_in_assignmentExpression1389 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_assignmentExpression1392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalOrExpression_in_conditionalExpression1406 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _CONDITION_in_conditionalExpression1409 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_conditionalExpression1412 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _COLON_in_conditionalExpression1414 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_conditionalExpression1417 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression1430 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _LOGICAL_OR_in_conditionalOrExpression1433 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression1436 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression1449 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _LOGICAL_AND_in_conditionalAndExpression1452 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression1455 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression1470 = new BitSet(new ulong[]{0x2UL,0x80UL});
		public static readonly BitSet _OR_in_inclusiveOrExpression1473 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression1476 = new BitSet(new ulong[]{0x2UL,0x80UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression1490 = new BitSet(new ulong[]{0x2UL,0x40000000UL});
		public static readonly BitSet _XOR_in_exclusiveOrExpression1493 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression1496 = new BitSet(new ulong[]{0x2UL,0x40000000UL});
		public static readonly BitSet _equalityExpression_in_andExpression1510 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_andExpression1513 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _equalityExpression_in_andExpression1516 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression1529 = new BitSet(new ulong[]{0x800000002UL,0x8UL});
		public static readonly BitSet _set_in_equalityExpression1532 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression1541 = new BitSet(new ulong[]{0x800000002UL,0x8UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression1556 = new BitSet(new ulong[]{0x180C00000000002UL});
		public static readonly BitSet _set_in_relationalExpression1559 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression1576 = new BitSet(new ulong[]{0x180C00000000002UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression1590 = new BitSet(new ulong[]{0x2000000000000002UL,0x40000UL});
		public static readonly BitSet _set_in_shiftExpression1593 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression1600 = new BitSet(new ulong[]{0x2000000000000002UL,0x40000UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression1615 = new BitSet(new ulong[]{0x4000000000000002UL,0x200UL});
		public static readonly BitSet _set_in_additiveExpression1618 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression1625 = new BitSet(new ulong[]{0x4000000000000002UL,0x200UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression1639 = new BitSet(new ulong[]{0x8000000100000002UL,0x1UL});
		public static readonly BitSet _set_in_multiplicativeExpression1642 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression1655 = new BitSet(new ulong[]{0x8000000100000002UL,0x1UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression1674 = new BitSet(new ulong[]{0x10000040000002UL});
		public static readonly BitSet _INCREMENT_in_unaryExpression1684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_unaryExpression1705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCREMENT_in_unaryExpression1742 = new BitSet(new ulong[]{0x1063002000000000UL,0x800B100030UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression1744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_unaryExpression1761 = new BitSet(new ulong[]{0x1063002000000000UL,0x800B100030UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression1763 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_unaryExpression1783 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _MINUS_in_unaryExpression1787 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _NOT_in_unaryExpression1791 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _111_in_unaryExpression1795 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression1798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_unaryExpression1816 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_unaryExpression1819 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _RPAREN_in_unaryExpression1821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_primaryExpression1841 = new BitSet(new ulong[]{0x1060000200000002UL});
		public static readonly BitSet _literal_in_primaryExpression1856 = new BitSet(new ulong[]{0x1060000200000002UL});
		public static readonly BitSet _array_literal_in_primaryExpression1872 = new BitSet(new ulong[]{0x1060000200000002UL});
		public static readonly BitSet _anonymous_function_define_in_primaryExpression1885 = new BitSet(new ulong[]{0x1060000200000002UL});
		public static readonly BitSet _LPAREN_in_primaryExpression1900 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B120234UL});
		public static readonly BitSet _expressionList_in_primaryExpression1902 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _RPAREN_in_primaryExpression1905 = new BitSet(new ulong[]{0x1060000200000002UL});
		public static readonly BitSet _DOT_in_primaryExpression1930 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_primaryExpression1932 = new BitSet(new ulong[]{0x1060000200000002UL});
		public static readonly BitSet _LBRACE_in_primaryExpression1952 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_primaryExpression1954 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _RBRACE_in_primaryExpression1956 = new BitSet(new ulong[]{0x1060000200000002UL});
		public static readonly BitSet _object_literal_in_primaryExpression1976 = new BitSet(new ulong[]{0x1060000200000002UL});
		public static readonly BitSet _object_literal_in_primaryExpression2002 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_variable2032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_array_literal2043 = new BitSet(new ulong[]{0x5073002041000000UL,0x88800B104234UL});
		public static readonly BitSet _expressionList_in_array_literal2045 = new BitSet(new ulong[]{0x1000000UL,0x4000UL});
		public static readonly BitSet _COMMA_in_array_literal2048 = new BitSet(new ulong[]{0x1000000UL,0x4000UL});
		public static readonly BitSet _RBRACE_in_array_literal2051 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_object_literal2074 = new BitSet(new ulong[]{0x2000001000000UL,0x8000UL});
		public static readonly BitSet _keypair_in_object_literal2076 = new BitSet(new ulong[]{0x1000000UL,0x8000UL});
		public static readonly BitSet _COMMA_in_object_literal2080 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _keypair_in_object_literal2082 = new BitSet(new ulong[]{0x1000000UL,0x8000UL});
		public static readonly BitSet _COMMA_in_object_literal2086 = new BitSet(new ulong[]{0x1000000UL,0x8000UL});
		public static readonly BitSet _RCURLY_in_object_literal2089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_keypair2113 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _COLON_in_keypair2115 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_keypair2118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_ifelse2133 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _LPAREN_in_ifelse2135 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _conditionalOrExpression_in_ifelse2137 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _RPAREN_in_ifelse2139 = new BitSet(new ulong[]{0x1073002040000000UL,0x79F50B100030UL});
		public static readonly BitSet _embeddedStatement_in_ifelse2143 = new BitSet(new ulong[]{0x400000002UL});
		public static readonly BitSet _ELSE_in_ifelse2146 = new BitSet(new ulong[]{0x1073002040000000UL,0x79F50B100030UL});
		public static readonly BitSet _embeddedStatement_in_ifelse2150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_forStatement2184 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _LPAREN_in_forStatement2186 = new BitSet(new ulong[]{0x1073002040000000UL,0x8900F180030UL});
		public static readonly BitSet _forInit_in_forStatement2188 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_forStatement2191 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B180234UL});
		public static readonly BitSet _conditionalOrExpression_in_forStatement2193 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_forStatement2196 = new BitSet(new ulong[]{0x1073002040000000UL,0x8900B120030UL});
		public static readonly BitSet _statementExpressionList_in_forStatement2198 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _RPAREN_in_forStatement2201 = new BitSet(new ulong[]{0x1073002040000000UL,0x79F50B100030UL});
		public static readonly BitSet _embeddedStatement_in_forStatement2203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_forInit2275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementExpressionList_in_forInit2281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_foreachStatement2293 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _LPAREN_in_foreachStatement2295 = new BitSet(new ulong[]{0x2000000000000UL,0x4000000UL});
		public static readonly BitSet _TYPE_in_foreachStatement2297 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_foreachStatement2300 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _106_in_foreachStatement2302 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_foreachStatement2304 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _RPAREN_in_foreachStatement2306 = new BitSet(new ulong[]{0x1073002040000000UL,0x79F50B100030UL});
		public static readonly BitSet _embeddedStatement_in_foreachStatement2308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_whileStatement2333 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _LPAREN_in_whileStatement2335 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _conditionalOrExpression_in_whileStatement2338 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _RPAREN_in_whileStatement2341 = new BitSet(new ulong[]{0x1073002040000000UL,0x79F50B100030UL});
		public static readonly BitSet _embeddedStatement_in_whileStatement2343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_switchStatement2409 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _LPAREN_in_switchStatement2411 = new BitSet(new ulong[]{0x5073002040000000UL,0x80800B100234UL});
		public static readonly BitSet _conditionalOrExpression_in_switchStatement2413 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _RPAREN_in_switchStatement2415 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _LCURLY_in_switchStatement2420 = new BitSet(new ulong[]{0x1073002040000000UL,0x7BFF0F108030UL});
		public static readonly BitSet _switchCaseStatementList_in_switchStatement2422 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _RCURLY_in_switchStatement2425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseCondition_in_switchCaseStatementList2451 = new BitSet(new ulong[]{0x1073002040000002UL,0x7BFF0F100030UL});
		public static readonly BitSet _97_in_switchCaseCondition2469 = new BitSet(new ulong[]{0x5073002040000000UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_switchCaseCondition2471 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _COLON_in_switchCaseCondition2473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_switchCaseCondition2488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _99_in_switchCaseCondition2502 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _COLON_in_switchCaseCondition2504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _returnStatement_in_terminalStatement2528 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _96_in_terminalStatement2537 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _98_in_terminalStatement2545 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _SEMI_in_terminalStatement2552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_returnStatement2563 = new BitSet(new ulong[]{0x5073002040000002UL,0x88800B100234UL});
		public static readonly BitSet _expression_in_returnStatement2565 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Unvell.ReoScript 
