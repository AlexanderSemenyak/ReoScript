//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\work\\ReoScript\\ReoScript.g 2013-03-24 10:26:20

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  Unvell.ReoScript 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class ReoScriptLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int AND=4;
	public const int ANONYMOUS_FUNCTION=5;
	public const int ARGUMENT_LIST=6;
	public const int ARRAY_ACCESS=7;
	public const int ARRAY_LITERAL=8;
	public const int ASSIGNMENT=9;
	public const int ASSIGN_AND=10;
	public const int ASSIGN_DIV=11;
	public const int ASSIGN_LSHIFT=12;
	public const int ASSIGN_MINUS=13;
	public const int ASSIGN_MUL=14;
	public const int ASSIGN_OR=15;
	public const int ASSIGN_PLUS=16;
	public const int ASSIGN_REM=17;
	public const int ASSIGN_REV=18;
	public const int ASSIGN_RSHIFT=19;
	public const int BINARY_LITERATE=20;
	public const int BLOCK=21;
	public const int BREAK=22;
	public const int CLASS=23;
	public const int COLON=24;
	public const int COMBINE_OBJECT=25;
	public const int COMMA=26;
	public const int COMMENT=27;
	public const int CONDITION=28;
	public const int CONTINUE=29;
	public const int CREATE=30;
	public const int DECLARATION=31;
	public const int DECREMENT=32;
	public const int DELETE=33;
	public const int DIV=34;
	public const int DOT=35;
	public const int ELSE=36;
	public const int EQUALS=37;
	public const int ESCAPE_SEQUENCE=38;
	public const int FALSE=39;
	public const int FOREACH_STATEMENT=40;
	public const int FOR_BODY=41;
	public const int FOR_CONDITION=42;
	public const int FOR_INIT=43;
	public const int FOR_ITERATOR=44;
	public const int FOR_STATEMENT=45;
	public const int FUNCTION_CALL=46;
	public const int FUNCTION_DEFINE=47;
	public const int GREAT_EQUALS=48;
	public const int GREAT_THAN=49;
	public const int HEX_LITERATE=50;
	public const int IDENTIFIER=51;
	public const int IF_STATEMENT=52;
	public const int IMPORT=53;
	public const int INCREMENT=54;
	public const int INSTANCEOF=55;
	public const int LAMBDA_FUNCTION=56;
	public const int LBRACE=57;
	public const int LCURLY=58;
	public const int LESS_EQUALS=59;
	public const int LESS_THAN=60;
	public const int LINE_COMMENT=61;
	public const int LOCAL_DECLARE_ASSIGNMENT=62;
	public const int LOGICAL_AND=63;
	public const int LOGICAL_OR=64;
	public const int LPAREN=65;
	public const int LSHIFT=66;
	public const int MEMBER_DECLARATION=67;
	public const int MINUS=68;
	public const int MOD=69;
	public const int MUL=70;
	public const int NEWLINE=71;
	public const int NOT=72;
	public const int NOT_EQUALS=73;
	public const int NULL=74;
	public const int NUMBER_LITERATE=75;
	public const int OBJECT_LITERAL=76;
	public const int OR=77;
	public const int PARAMETER_DEFINES=78;
	public const int PLUS=79;
	public const int POST_UNARY_STEP=80;
	public const int PRE_UNARY=81;
	public const int PRE_UNARY_STEP=82;
	public const int PROPERTY_ACCESS=83;
	public const int RBRACE=84;
	public const int RCURLY=85;
	public const int RETURN=86;
	public const int RPAREN=87;
	public const int RSHIFT=88;
	public const int SCOPE_MODIFIER=89;
	public const int SEMI=90;
	public const int STRING_LITERATE=91;
	public const int SWITCH=92;
	public const int SWITCH_CASE=93;
	public const int SWITCH_CASE_ELSE=94;
	public const int TAG=95;
	public const int TAG_ATTR=96;
	public const int TAG_ATTR_LIST=97;
	public const int TAG_NAME=98;
	public const int THIS=99;
	public const int TRUE=100;
	public const int TYPE=101;
	public const int TYPEOF=102;
	public const int UNDEFINED=103;
	public const int WHILE_STATEMENT=104;
	public const int WS=105;
	public const int XOR=106;

    // delegates
    // delegators

	public ReoScriptLexer()
	{
		OnCreated();
	}

	public ReoScriptLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public ReoScriptLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\work\\ReoScript\\ReoScript.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 1);
		TraceIn("AND", 1);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:10:5: ( '&' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:10:7: '&'
			{
			DebugLocation(10, 7);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 1);
			LeaveRule("AND", 1);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 2);
		TraceIn("DIV", 2);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:11:5: ( '/' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:11:7: '/'
			{
			DebugLocation(11, 7);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 2);
			LeaveRule("DIV", 2);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_EQUALS();
	partial void LeaveRule_EQUALS();

	// $ANTLR start "EQUALS"
	[GrammarRule("EQUALS")]
	private void mEQUALS()
	{
		EnterRule_EQUALS();
		EnterRule("EQUALS", 3);
		TraceIn("EQUALS", 3);
		try
		{
			int _type = EQUALS;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:12:8: ( '==' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:12:10: '=='
			{
			DebugLocation(12, 10);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUALS", 3);
			LeaveRule("EQUALS", 3);
			LeaveRule_EQUALS();
		}
	}
	// $ANTLR end "EQUALS"

	partial void EnterRule_GREAT_EQUALS();
	partial void LeaveRule_GREAT_EQUALS();

	// $ANTLR start "GREAT_EQUALS"
	[GrammarRule("GREAT_EQUALS")]
	private void mGREAT_EQUALS()
	{
		EnterRule_GREAT_EQUALS();
		EnterRule("GREAT_EQUALS", 4);
		TraceIn("GREAT_EQUALS", 4);
		try
		{
			int _type = GREAT_EQUALS;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:13:14: ( '>=' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:13:16: '>='
			{
			DebugLocation(13, 16);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREAT_EQUALS", 4);
			LeaveRule("GREAT_EQUALS", 4);
			LeaveRule_GREAT_EQUALS();
		}
	}
	// $ANTLR end "GREAT_EQUALS"

	partial void EnterRule_GREAT_THAN();
	partial void LeaveRule_GREAT_THAN();

	// $ANTLR start "GREAT_THAN"
	[GrammarRule("GREAT_THAN")]
	private void mGREAT_THAN()
	{
		EnterRule_GREAT_THAN();
		EnterRule("GREAT_THAN", 5);
		TraceIn("GREAT_THAN", 5);
		try
		{
			int _type = GREAT_THAN;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:14:12: ( '>' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:14:14: '>'
			{
			DebugLocation(14, 14);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREAT_THAN", 5);
			LeaveRule("GREAT_THAN", 5);
			LeaveRule_GREAT_THAN();
		}
	}
	// $ANTLR end "GREAT_THAN"

	partial void EnterRule_LESS_EQUALS();
	partial void LeaveRule_LESS_EQUALS();

	// $ANTLR start "LESS_EQUALS"
	[GrammarRule("LESS_EQUALS")]
	private void mLESS_EQUALS()
	{
		EnterRule_LESS_EQUALS();
		EnterRule("LESS_EQUALS", 6);
		TraceIn("LESS_EQUALS", 6);
		try
		{
			int _type = LESS_EQUALS;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:15:13: ( '<=' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:15:15: '<='
			{
			DebugLocation(15, 15);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS_EQUALS", 6);
			LeaveRule("LESS_EQUALS", 6);
			LeaveRule_LESS_EQUALS();
		}
	}
	// $ANTLR end "LESS_EQUALS"

	partial void EnterRule_LESS_THAN();
	partial void LeaveRule_LESS_THAN();

	// $ANTLR start "LESS_THAN"
	[GrammarRule("LESS_THAN")]
	private void mLESS_THAN()
	{
		EnterRule_LESS_THAN();
		EnterRule("LESS_THAN", 7);
		TraceIn("LESS_THAN", 7);
		try
		{
			int _type = LESS_THAN;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:16:11: ( '<' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:16:13: '<'
			{
			DebugLocation(16, 13);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS_THAN", 7);
			LeaveRule("LESS_THAN", 7);
			LeaveRule_LESS_THAN();
		}
	}
	// $ANTLR end "LESS_THAN"

	partial void EnterRule_LOGICAL_AND();
	partial void LeaveRule_LOGICAL_AND();

	// $ANTLR start "LOGICAL_AND"
	[GrammarRule("LOGICAL_AND")]
	private void mLOGICAL_AND()
	{
		EnterRule_LOGICAL_AND();
		EnterRule("LOGICAL_AND", 8);
		TraceIn("LOGICAL_AND", 8);
		try
		{
			int _type = LOGICAL_AND;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:17:13: ( '&&' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:17:15: '&&'
			{
			DebugLocation(17, 15);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LOGICAL_AND", 8);
			LeaveRule("LOGICAL_AND", 8);
			LeaveRule_LOGICAL_AND();
		}
	}
	// $ANTLR end "LOGICAL_AND"

	partial void EnterRule_LOGICAL_OR();
	partial void LeaveRule_LOGICAL_OR();

	// $ANTLR start "LOGICAL_OR"
	[GrammarRule("LOGICAL_OR")]
	private void mLOGICAL_OR()
	{
		EnterRule_LOGICAL_OR();
		EnterRule("LOGICAL_OR", 9);
		TraceIn("LOGICAL_OR", 9);
		try
		{
			int _type = LOGICAL_OR;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:18:12: ( '||' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:18:14: '||'
			{
			DebugLocation(18, 14);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LOGICAL_OR", 9);
			LeaveRule("LOGICAL_OR", 9);
			LeaveRule_LOGICAL_OR();
		}
	}
	// $ANTLR end "LOGICAL_OR"

	partial void EnterRule_LSHIFT();
	partial void LeaveRule_LSHIFT();

	// $ANTLR start "LSHIFT"
	[GrammarRule("LSHIFT")]
	private void mLSHIFT()
	{
		EnterRule_LSHIFT();
		EnterRule("LSHIFT", 10);
		TraceIn("LSHIFT", 10);
		try
		{
			int _type = LSHIFT;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:19:8: ( '<<' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:19:10: '<<'
			{
			DebugLocation(19, 10);
			Match("<<"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LSHIFT", 10);
			LeaveRule("LSHIFT", 10);
			LeaveRule_LSHIFT();
		}
	}
	// $ANTLR end "LSHIFT"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 11);
		TraceIn("MINUS", 11);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:20:7: ( '-' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:20:9: '-'
			{
			DebugLocation(20, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 11);
			LeaveRule("MINUS", 11);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_MOD();
	partial void LeaveRule_MOD();

	// $ANTLR start "MOD"
	[GrammarRule("MOD")]
	private void mMOD()
	{
		EnterRule_MOD();
		EnterRule("MOD", 12);
		TraceIn("MOD", 12);
		try
		{
			int _type = MOD;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:21:5: ( '%' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:21:7: '%'
			{
			DebugLocation(21, 7);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOD", 12);
			LeaveRule("MOD", 12);
			LeaveRule_MOD();
		}
	}
	// $ANTLR end "MOD"

	partial void EnterRule_MUL();
	partial void LeaveRule_MUL();

	// $ANTLR start "MUL"
	[GrammarRule("MUL")]
	private void mMUL()
	{
		EnterRule_MUL();
		EnterRule("MUL", 13);
		TraceIn("MUL", 13);
		try
		{
			int _type = MUL;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:22:5: ( '*' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:22:7: '*'
			{
			DebugLocation(22, 7);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MUL", 13);
			LeaveRule("MUL", 13);
			LeaveRule_MUL();
		}
	}
	// $ANTLR end "MUL"

	partial void EnterRule_NOT_EQUALS();
	partial void LeaveRule_NOT_EQUALS();

	// $ANTLR start "NOT_EQUALS"
	[GrammarRule("NOT_EQUALS")]
	private void mNOT_EQUALS()
	{
		EnterRule_NOT_EQUALS();
		EnterRule("NOT_EQUALS", 14);
		TraceIn("NOT_EQUALS", 14);
		try
		{
			int _type = NOT_EQUALS;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:23:12: ( '!=' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:23:14: '!='
			{
			DebugLocation(23, 14);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT_EQUALS", 14);
			LeaveRule("NOT_EQUALS", 14);
			LeaveRule_NOT_EQUALS();
		}
	}
	// $ANTLR end "NOT_EQUALS"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 15);
		TraceIn("OR", 15);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:24:4: ( '|' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:24:6: '|'
			{
			DebugLocation(24, 6);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 15);
			LeaveRule("OR", 15);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 16);
		TraceIn("PLUS", 16);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:25:6: ( '+' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:25:8: '+'
			{
			DebugLocation(25, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 16);
			LeaveRule("PLUS", 16);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_RSHIFT();
	partial void LeaveRule_RSHIFT();

	// $ANTLR start "RSHIFT"
	[GrammarRule("RSHIFT")]
	private void mRSHIFT()
	{
		EnterRule_RSHIFT();
		EnterRule("RSHIFT", 17);
		TraceIn("RSHIFT", 17);
		try
		{
			int _type = RSHIFT;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:26:8: ( '>>' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:26:10: '>>'
			{
			DebugLocation(26, 10);
			Match(">>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RSHIFT", 17);
			LeaveRule("RSHIFT", 17);
			LeaveRule_RSHIFT();
		}
	}
	// $ANTLR end "RSHIFT"

	partial void EnterRule_XOR();
	partial void LeaveRule_XOR();

	// $ANTLR start "XOR"
	[GrammarRule("XOR")]
	private void mXOR()
	{
		EnterRule_XOR();
		EnterRule("XOR", 18);
		TraceIn("XOR", 18);
		try
		{
			int _type = XOR;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:27:5: ( '^' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:27:7: '^'
			{
			DebugLocation(27, 7);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("XOR", 18);
			LeaveRule("XOR", 18);
			LeaveRule_XOR();
		}
	}
	// $ANTLR end "XOR"

	partial void EnterRule_T__107();
	partial void LeaveRule_T__107();

	// $ANTLR start "T__107"
	[GrammarRule("T__107")]
	private void mT__107()
	{
		EnterRule_T__107();
		EnterRule("T__107", 19);
		TraceIn("T__107", 19);
		try
		{
			int _type = T__107;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:28:8: ( '/>' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:28:10: '/>'
			{
			DebugLocation(28, 10);
			Match("/>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__107", 19);
			LeaveRule("T__107", 19);
			LeaveRule_T__107();
		}
	}
	// $ANTLR end "T__107"

	partial void EnterRule_T__108();
	partial void LeaveRule_T__108();

	// $ANTLR start "T__108"
	[GrammarRule("T__108")]
	private void mT__108()
	{
		EnterRule_T__108();
		EnterRule("T__108", 20);
		TraceIn("T__108", 20);
		try
		{
			int _type = T__108;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:29:8: ( '</' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:29:10: '</'
			{
			DebugLocation(29, 10);
			Match("</"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__108", 20);
			LeaveRule("T__108", 20);
			LeaveRule_T__108();
		}
	}
	// $ANTLR end "T__108"

	partial void EnterRule_T__109();
	partial void LeaveRule_T__109();

	// $ANTLR start "T__109"
	[GrammarRule("T__109")]
	private void mT__109()
	{
		EnterRule_T__109();
		EnterRule("T__109", 21);
		TraceIn("T__109", 21);
		try
		{
			int _type = T__109;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:30:8: ( '=>' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:30:10: '=>'
			{
			DebugLocation(30, 10);
			Match("=>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__109", 21);
			LeaveRule("T__109", 21);
			LeaveRule_T__109();
		}
	}
	// $ANTLR end "T__109"

	partial void EnterRule_T__110();
	partial void LeaveRule_T__110();

	// $ANTLR start "T__110"
	[GrammarRule("T__110")]
	private void mT__110()
	{
		EnterRule_T__110();
		EnterRule("T__110", 22);
		TraceIn("T__110", 22);
		try
		{
			int _type = T__110;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:31:8: ( 'break' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:31:10: 'break'
			{
			DebugLocation(31, 10);
			Match("break"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__110", 22);
			LeaveRule("T__110", 22);
			LeaveRule_T__110();
		}
	}
	// $ANTLR end "T__110"

	partial void EnterRule_T__111();
	partial void LeaveRule_T__111();

	// $ANTLR start "T__111"
	[GrammarRule("T__111")]
	private void mT__111()
	{
		EnterRule_T__111();
		EnterRule("T__111", 23);
		TraceIn("T__111", 23);
		try
		{
			int _type = T__111;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:32:8: ( 'case' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:32:10: 'case'
			{
			DebugLocation(32, 10);
			Match("case"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__111", 23);
			LeaveRule("T__111", 23);
			LeaveRule_T__111();
		}
	}
	// $ANTLR end "T__111"

	partial void EnterRule_T__112();
	partial void LeaveRule_T__112();

	// $ANTLR start "T__112"
	[GrammarRule("T__112")]
	private void mT__112()
	{
		EnterRule_T__112();
		EnterRule("T__112", 24);
		TraceIn("T__112", 24);
		try
		{
			int _type = T__112;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:33:8: ( 'class' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:33:10: 'class'
			{
			DebugLocation(33, 10);
			Match("class"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__112", 24);
			LeaveRule("T__112", 24);
			LeaveRule_T__112();
		}
	}
	// $ANTLR end "T__112"

	partial void EnterRule_T__113();
	partial void LeaveRule_T__113();

	// $ANTLR start "T__113"
	[GrammarRule("T__113")]
	private void mT__113()
	{
		EnterRule_T__113();
		EnterRule("T__113", 25);
		TraceIn("T__113", 25);
		try
		{
			int _type = T__113;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:34:8: ( 'continue' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:34:10: 'continue'
			{
			DebugLocation(34, 10);
			Match("continue"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__113", 25);
			LeaveRule("T__113", 25);
			LeaveRule_T__113();
		}
	}
	// $ANTLR end "T__113"

	partial void EnterRule_T__114();
	partial void LeaveRule_T__114();

	// $ANTLR start "T__114"
	[GrammarRule("T__114")]
	private void mT__114()
	{
		EnterRule_T__114();
		EnterRule("T__114", 26);
		TraceIn("T__114", 26);
		try
		{
			int _type = T__114;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:35:8: ( 'default' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:35:10: 'default'
			{
			DebugLocation(35, 10);
			Match("default"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__114", 26);
			LeaveRule("T__114", 26);
			LeaveRule_T__114();
		}
	}
	// $ANTLR end "T__114"

	partial void EnterRule_T__115();
	partial void LeaveRule_T__115();

	// $ANTLR start "T__115"
	[GrammarRule("T__115")]
	private void mT__115()
	{
		EnterRule_T__115();
		EnterRule("T__115", 27);
		TraceIn("T__115", 27);
		try
		{
			int _type = T__115;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:36:8: ( 'delete' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:36:10: 'delete'
			{
			DebugLocation(36, 10);
			Match("delete"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__115", 27);
			LeaveRule("T__115", 27);
			LeaveRule_T__115();
		}
	}
	// $ANTLR end "T__115"

	partial void EnterRule_T__116();
	partial void LeaveRule_T__116();

	// $ANTLR start "T__116"
	[GrammarRule("T__116")]
	private void mT__116()
	{
		EnterRule_T__116();
		EnterRule("T__116", 28);
		TraceIn("T__116", 28);
		try
		{
			int _type = T__116;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:37:8: ( 'for' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:37:10: 'for'
			{
			DebugLocation(37, 10);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__116", 28);
			LeaveRule("T__116", 28);
			LeaveRule_T__116();
		}
	}
	// $ANTLR end "T__116"

	partial void EnterRule_T__117();
	partial void LeaveRule_T__117();

	// $ANTLR start "T__117"
	[GrammarRule("T__117")]
	private void mT__117()
	{
		EnterRule_T__117();
		EnterRule("T__117", 29);
		TraceIn("T__117", 29);
		try
		{
			int _type = T__117;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:38:8: ( 'function' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:38:10: 'function'
			{
			DebugLocation(38, 10);
			Match("function"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__117", 29);
			LeaveRule("T__117", 29);
			LeaveRule_T__117();
		}
	}
	// $ANTLR end "T__117"

	partial void EnterRule_T__118();
	partial void LeaveRule_T__118();

	// $ANTLR start "T__118"
	[GrammarRule("T__118")]
	private void mT__118()
	{
		EnterRule_T__118();
		EnterRule("T__118", 30);
		TraceIn("T__118", 30);
		try
		{
			int _type = T__118;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:39:8: ( 'if' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:39:10: 'if'
			{
			DebugLocation(39, 10);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__118", 30);
			LeaveRule("T__118", 30);
			LeaveRule_T__118();
		}
	}
	// $ANTLR end "T__118"

	partial void EnterRule_T__119();
	partial void LeaveRule_T__119();

	// $ANTLR start "T__119"
	[GrammarRule("T__119")]
	private void mT__119()
	{
		EnterRule_T__119();
		EnterRule("T__119", 31);
		TraceIn("T__119", 31);
		try
		{
			int _type = T__119;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:40:8: ( 'import' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:40:10: 'import'
			{
			DebugLocation(40, 10);
			Match("import"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__119", 31);
			LeaveRule("T__119", 31);
			LeaveRule_T__119();
		}
	}
	// $ANTLR end "T__119"

	partial void EnterRule_T__120();
	partial void LeaveRule_T__120();

	// $ANTLR start "T__120"
	[GrammarRule("T__120")]
	private void mT__120()
	{
		EnterRule_T__120();
		EnterRule("T__120", 32);
		TraceIn("T__120", 32);
		try
		{
			int _type = T__120;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:41:8: ( 'in' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:41:10: 'in'
			{
			DebugLocation(41, 10);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__120", 32);
			LeaveRule("T__120", 32);
			LeaveRule_T__120();
		}
	}
	// $ANTLR end "T__120"

	partial void EnterRule_T__121();
	partial void LeaveRule_T__121();

	// $ANTLR start "T__121"
	[GrammarRule("T__121")]
	private void mT__121()
	{
		EnterRule_T__121();
		EnterRule("T__121", 33);
		TraceIn("T__121", 33);
		try
		{
			int _type = T__121;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:42:8: ( 'instanceof' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:42:10: 'instanceof'
			{
			DebugLocation(42, 10);
			Match("instanceof"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__121", 33);
			LeaveRule("T__121", 33);
			LeaveRule_T__121();
		}
	}
	// $ANTLR end "T__121"

	partial void EnterRule_T__122();
	partial void LeaveRule_T__122();

	// $ANTLR start "T__122"
	[GrammarRule("T__122")]
	private void mT__122()
	{
		EnterRule_T__122();
		EnterRule("T__122", 34);
		TraceIn("T__122", 34);
		try
		{
			int _type = T__122;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:43:8: ( 'new' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:43:10: 'new'
			{
			DebugLocation(43, 10);
			Match("new"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__122", 34);
			LeaveRule("T__122", 34);
			LeaveRule_T__122();
		}
	}
	// $ANTLR end "T__122"

	partial void EnterRule_T__123();
	partial void LeaveRule_T__123();

	// $ANTLR start "T__123"
	[GrammarRule("T__123")]
	private void mT__123()
	{
		EnterRule_T__123();
		EnterRule("T__123", 35);
		TraceIn("T__123", 35);
		try
		{
			int _type = T__123;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:44:8: ( 'return' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:44:10: 'return'
			{
			DebugLocation(44, 10);
			Match("return"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__123", 35);
			LeaveRule("T__123", 35);
			LeaveRule_T__123();
		}
	}
	// $ANTLR end "T__123"

	partial void EnterRule_T__124();
	partial void LeaveRule_T__124();

	// $ANTLR start "T__124"
	[GrammarRule("T__124")]
	private void mT__124()
	{
		EnterRule_T__124();
		EnterRule("T__124", 36);
		TraceIn("T__124", 36);
		try
		{
			int _type = T__124;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:45:8: ( 'switch' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:45:10: 'switch'
			{
			DebugLocation(45, 10);
			Match("switch"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__124", 36);
			LeaveRule("T__124", 36);
			LeaveRule_T__124();
		}
	}
	// $ANTLR end "T__124"

	partial void EnterRule_T__125();
	partial void LeaveRule_T__125();

	// $ANTLR start "T__125"
	[GrammarRule("T__125")]
	private void mT__125()
	{
		EnterRule_T__125();
		EnterRule("T__125", 37);
		TraceIn("T__125", 37);
		try
		{
			int _type = T__125;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:46:8: ( 'typeof' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:46:10: 'typeof'
			{
			DebugLocation(46, 10);
			Match("typeof"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__125", 37);
			LeaveRule("T__125", 37);
			LeaveRule_T__125();
		}
	}
	// $ANTLR end "T__125"

	partial void EnterRule_T__126();
	partial void LeaveRule_T__126();

	// $ANTLR start "T__126"
	[GrammarRule("T__126")]
	private void mT__126()
	{
		EnterRule_T__126();
		EnterRule("T__126", 38);
		TraceIn("T__126", 38);
		try
		{
			int _type = T__126;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:47:8: ( 'while' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:47:10: 'while'
			{
			DebugLocation(47, 10);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__126", 38);
			LeaveRule("T__126", 38);
			LeaveRule_T__126();
		}
	}
	// $ANTLR end "T__126"

	partial void EnterRule_T__127();
	partial void LeaveRule_T__127();

	// $ANTLR start "T__127"
	[GrammarRule("T__127")]
	private void mT__127()
	{
		EnterRule_T__127();
		EnterRule("T__127", 39);
		TraceIn("T__127", 39);
		try
		{
			int _type = T__127;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:48:8: ( '~' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:48:10: '~'
			{
			DebugLocation(48, 10);
			Match('~'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__127", 39);
			LeaveRule("T__127", 39);
			LeaveRule_T__127();
		}
	}
	// $ANTLR end "T__127"

	partial void EnterRule_NUMBER_LITERATE();
	partial void LeaveRule_NUMBER_LITERATE();

	// $ANTLR start "NUMBER_LITERATE"
	[GrammarRule("NUMBER_LITERATE")]
	private void mNUMBER_LITERATE()
	{
		EnterRule_NUMBER_LITERATE();
		EnterRule("NUMBER_LITERATE", 40);
		TraceIn("NUMBER_LITERATE", 40);
		try
		{
			int _type = NUMBER_LITERATE;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:436:2: ( ( ( '0' .. '9' )* '.' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:436:4: ( ( '0' .. '9' )* '.' )? ( '0' .. '9' )+
			{
			DebugLocation(436, 4);
			// C:\\work\\ReoScript\\ReoScript.g:436:4: ( ( '0' .. '9' )* '.' )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			try
			{
				alt2 = dfa2.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:436:5: ( '0' .. '9' )* '.'
				{
				DebugLocation(436, 5);
				// C:\\work\\ReoScript\\ReoScript.g:436:5: ( '0' .. '9' )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if (((LA1_0>='0' && LA1_0<='9')))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\work\\ReoScript\\ReoScript.g:
						{
						DebugLocation(436, 5);
						input.Consume();


						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }

				DebugLocation(436, 16);
				Match('.'); 

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(436, 21);
			// C:\\work\\ReoScript\\ReoScript.g:436:21: ( '0' .. '9' )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='0' && LA3_0<='9')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:
					{
					DebugLocation(436, 21);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUMBER_LITERATE", 40);
			LeaveRule("NUMBER_LITERATE", 40);
			LeaveRule_NUMBER_LITERATE();
		}
	}
	// $ANTLR end "NUMBER_LITERATE"

	partial void EnterRule_HEX_LITERATE();
	partial void LeaveRule_HEX_LITERATE();

	// $ANTLR start "HEX_LITERATE"
	[GrammarRule("HEX_LITERATE")]
	private void mHEX_LITERATE()
	{
		EnterRule_HEX_LITERATE();
		EnterRule("HEX_LITERATE", 41);
		TraceIn("HEX_LITERATE", 41);
		try
		{
			int _type = HEX_LITERATE;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:440:2: ( '0' 'x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+ )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:440:4: '0' 'x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
			{
			DebugLocation(440, 4);
			Match('0'); 
			DebugLocation(440, 8);
			Match('x'); 
			DebugLocation(440, 12);
			// C:\\work\\ReoScript\\ReoScript.g:440:12: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>='0' && LA4_0<='9')||(LA4_0>='A' && LA4_0<='F')||(LA4_0>='a' && LA4_0<='f')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:
					{
					DebugLocation(440, 12);
					input.Consume();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("HEX_LITERATE", 41);
			LeaveRule("HEX_LITERATE", 41);
			LeaveRule_HEX_LITERATE();
		}
	}
	// $ANTLR end "HEX_LITERATE"

	partial void EnterRule_BINARY_LITERATE();
	partial void LeaveRule_BINARY_LITERATE();

	// $ANTLR start "BINARY_LITERATE"
	[GrammarRule("BINARY_LITERATE")]
	private void mBINARY_LITERATE()
	{
		EnterRule_BINARY_LITERATE();
		EnterRule("BINARY_LITERATE", 42);
		TraceIn("BINARY_LITERATE", 42);
		try
		{
			int _type = BINARY_LITERATE;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:444:2: ( '0' 'b' ( '0' | '1' )+ )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:444:4: '0' 'b' ( '0' | '1' )+
			{
			DebugLocation(444, 4);
			Match('0'); 
			DebugLocation(444, 8);
			Match('b'); 
			DebugLocation(444, 12);
			// C:\\work\\ReoScript\\ReoScript.g:444:12: ( '0' | '1' )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if (((LA5_0>='0' && LA5_0<='1')))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:
					{
					DebugLocation(444, 12);
					input.Consume();


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BINARY_LITERATE", 42);
			LeaveRule("BINARY_LITERATE", 42);
			LeaveRule_BINARY_LITERATE();
		}
	}
	// $ANTLR end "BINARY_LITERATE"

	partial void EnterRule_STRING_LITERATE();
	partial void LeaveRule_STRING_LITERATE();

	// $ANTLR start "STRING_LITERATE"
	[GrammarRule("STRING_LITERATE")]
	private void mSTRING_LITERATE()
	{
		EnterRule_STRING_LITERATE();
		EnterRule("STRING_LITERATE", 43);
		TraceIn("STRING_LITERATE", 43);
		try
		{
			int _type = STRING_LITERATE;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:448:2: ( '\"' (~ '\"' )* '\"' | '\\'' (~ '\\'' )* '\\'' )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0=='\"'))
			{
				alt8 = 1;
			}
			else if ((LA8_0=='\''))
			{
				alt8 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:449:3: '\"' (~ '\"' )* '\"'
				{
				DebugLocation(449, 3);
				Match('\"'); 
				DebugLocation(449, 7);
				// C:\\work\\ReoScript\\ReoScript.g:449:7: (~ '\"' )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if (((LA6_0>='\u0000' && LA6_0<='!')||(LA6_0>='#' && LA6_0<='\uFFFF')))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\work\\ReoScript\\ReoScript.g:
						{
						DebugLocation(449, 7);
						input.Consume();


						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(449, 13);
				Match('\"'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:450:4: '\\'' (~ '\\'' )* '\\''
				{
				DebugLocation(450, 4);
				Match('\''); 
				DebugLocation(450, 9);
				// C:\\work\\ReoScript\\ReoScript.g:450:9: (~ '\\'' )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if (((LA7_0>='\u0000' && LA7_0<='&')||(LA7_0>='(' && LA7_0<='\uFFFF')))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\work\\ReoScript\\ReoScript.g:
						{
						DebugLocation(450, 9);
						input.Consume();


						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(450, 16);
				Match('\''); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_LITERATE", 43);
			LeaveRule("STRING_LITERATE", 43);
			LeaveRule_STRING_LITERATE();
		}
	}
	// $ANTLR end "STRING_LITERATE"

	partial void EnterRule_ESCAPE_SEQUENCE();
	partial void LeaveRule_ESCAPE_SEQUENCE();

	// $ANTLR start "ESCAPE_SEQUENCE"
	[GrammarRule("ESCAPE_SEQUENCE")]
	private void mESCAPE_SEQUENCE()
	{
		EnterRule_ESCAPE_SEQUENCE();
		EnterRule("ESCAPE_SEQUENCE", 44);
		TraceIn("ESCAPE_SEQUENCE", 44);
		try
		{
			// C:\\work\\ReoScript\\ReoScript.g:458:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:458:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
			{
			DebugLocation(458, 9);
			Match('\\'); 
			DebugLocation(458, 14);
			if (input.LA(1)=='\"'||input.LA(1)=='\''||input.LA(1)=='\\'||input.LA(1)=='b'||input.LA(1)=='f'||input.LA(1)=='n'||input.LA(1)=='r'||input.LA(1)=='t')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("ESCAPE_SEQUENCE", 44);
			LeaveRule("ESCAPE_SEQUENCE", 44);
			LeaveRule_ESCAPE_SEQUENCE();
		}
	}
	// $ANTLR end "ESCAPE_SEQUENCE"

	partial void EnterRule_ASSIGNMENT();
	partial void LeaveRule_ASSIGNMENT();

	// $ANTLR start "ASSIGNMENT"
	[GrammarRule("ASSIGNMENT")]
	private void mASSIGNMENT()
	{
		EnterRule_ASSIGNMENT();
		EnterRule("ASSIGNMENT", 45);
		TraceIn("ASSIGNMENT", 45);
		try
		{
			int _type = ASSIGNMENT;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:472:13: ( '=' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:472:15: '='
			{
			DebugLocation(472, 15);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGNMENT", 45);
			LeaveRule("ASSIGNMENT", 45);
			LeaveRule_ASSIGNMENT();
		}
	}
	// $ANTLR end "ASSIGNMENT"

	partial void EnterRule_ASSIGN_PLUS();
	partial void LeaveRule_ASSIGN_PLUS();

	// $ANTLR start "ASSIGN_PLUS"
	[GrammarRule("ASSIGN_PLUS")]
	private void mASSIGN_PLUS()
	{
		EnterRule_ASSIGN_PLUS();
		EnterRule("ASSIGN_PLUS", 46);
		TraceIn("ASSIGN_PLUS", 46);
		try
		{
			int _type = ASSIGN_PLUS;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:469:14: ( '+=' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:469:16: '+='
			{
			DebugLocation(469, 16);
			Match("+="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_PLUS", 46);
			LeaveRule("ASSIGN_PLUS", 46);
			LeaveRule_ASSIGN_PLUS();
		}
	}
	// $ANTLR end "ASSIGN_PLUS"

	partial void EnterRule_ASSIGN_MINUS();
	partial void LeaveRule_ASSIGN_MINUS();

	// $ANTLR start "ASSIGN_MINUS"
	[GrammarRule("ASSIGN_MINUS")]
	private void mASSIGN_MINUS()
	{
		EnterRule_ASSIGN_MINUS();
		EnterRule("ASSIGN_MINUS", 47);
		TraceIn("ASSIGN_MINUS", 47);
		try
		{
			int _type = ASSIGN_MINUS;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:470:14: ( '-=' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:470:16: '-='
			{
			DebugLocation(470, 16);
			Match("-="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_MINUS", 47);
			LeaveRule("ASSIGN_MINUS", 47);
			LeaveRule_ASSIGN_MINUS();
		}
	}
	// $ANTLR end "ASSIGN_MINUS"

	partial void EnterRule_ASSIGN_MUL();
	partial void LeaveRule_ASSIGN_MUL();

	// $ANTLR start "ASSIGN_MUL"
	[GrammarRule("ASSIGN_MUL")]
	private void mASSIGN_MUL()
	{
		EnterRule_ASSIGN_MUL();
		EnterRule("ASSIGN_MUL", 48);
		TraceIn("ASSIGN_MUL", 48);
		try
		{
			int _type = ASSIGN_MUL;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:471:13: ( '*=' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:471:15: '*='
			{
			DebugLocation(471, 15);
			Match("*="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_MUL", 48);
			LeaveRule("ASSIGN_MUL", 48);
			LeaveRule_ASSIGN_MUL();
		}
	}
	// $ANTLR end "ASSIGN_MUL"

	partial void EnterRule_ASSIGN_DIV();
	partial void LeaveRule_ASSIGN_DIV();

	// $ANTLR start "ASSIGN_DIV"
	[GrammarRule("ASSIGN_DIV")]
	private void mASSIGN_DIV()
	{
		EnterRule_ASSIGN_DIV();
		EnterRule("ASSIGN_DIV", 49);
		TraceIn("ASSIGN_DIV", 49);
		try
		{
			int _type = ASSIGN_DIV;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:472:13: ( '/=' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:472:15: '/='
			{
			DebugLocation(472, 15);
			Match("/="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_DIV", 49);
			LeaveRule("ASSIGN_DIV", 49);
			LeaveRule_ASSIGN_DIV();
		}
	}
	// $ANTLR end "ASSIGN_DIV"

	partial void EnterRule_ASSIGN_REM();
	partial void LeaveRule_ASSIGN_REM();

	// $ANTLR start "ASSIGN_REM"
	[GrammarRule("ASSIGN_REM")]
	private void mASSIGN_REM()
	{
		EnterRule_ASSIGN_REM();
		EnterRule("ASSIGN_REM", 50);
		TraceIn("ASSIGN_REM", 50);
		try
		{
			int _type = ASSIGN_REM;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:473:13: ( '%=' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:473:15: '%='
			{
			DebugLocation(473, 15);
			Match("%="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_REM", 50);
			LeaveRule("ASSIGN_REM", 50);
			LeaveRule_ASSIGN_REM();
		}
	}
	// $ANTLR end "ASSIGN_REM"

	partial void EnterRule_ASSIGN_AND();
	partial void LeaveRule_ASSIGN_AND();

	// $ANTLR start "ASSIGN_AND"
	[GrammarRule("ASSIGN_AND")]
	private void mASSIGN_AND()
	{
		EnterRule_ASSIGN_AND();
		EnterRule("ASSIGN_AND", 51);
		TraceIn("ASSIGN_AND", 51);
		try
		{
			int _type = ASSIGN_AND;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:474:13: ( '&=' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:474:15: '&='
			{
			DebugLocation(474, 15);
			Match("&="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_AND", 51);
			LeaveRule("ASSIGN_AND", 51);
			LeaveRule_ASSIGN_AND();
		}
	}
	// $ANTLR end "ASSIGN_AND"

	partial void EnterRule_ASSIGN_OR();
	partial void LeaveRule_ASSIGN_OR();

	// $ANTLR start "ASSIGN_OR"
	[GrammarRule("ASSIGN_OR")]
	private void mASSIGN_OR()
	{
		EnterRule_ASSIGN_OR();
		EnterRule("ASSIGN_OR", 52);
		TraceIn("ASSIGN_OR", 52);
		try
		{
			int _type = ASSIGN_OR;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:475:12: ( '|=' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:475:14: '|='
			{
			DebugLocation(475, 14);
			Match("|="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_OR", 52);
			LeaveRule("ASSIGN_OR", 52);
			LeaveRule_ASSIGN_OR();
		}
	}
	// $ANTLR end "ASSIGN_OR"

	partial void EnterRule_ASSIGN_REV();
	partial void LeaveRule_ASSIGN_REV();

	// $ANTLR start "ASSIGN_REV"
	[GrammarRule("ASSIGN_REV")]
	private void mASSIGN_REV()
	{
		EnterRule_ASSIGN_REV();
		EnterRule("ASSIGN_REV", 53);
		TraceIn("ASSIGN_REV", 53);
		try
		{
			int _type = ASSIGN_REV;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:476:13: ( '^=' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:476:15: '^='
			{
			DebugLocation(476, 15);
			Match("^="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_REV", 53);
			LeaveRule("ASSIGN_REV", 53);
			LeaveRule_ASSIGN_REV();
		}
	}
	// $ANTLR end "ASSIGN_REV"

	partial void EnterRule_ASSIGN_LSHIFT();
	partial void LeaveRule_ASSIGN_LSHIFT();

	// $ANTLR start "ASSIGN_LSHIFT"
	[GrammarRule("ASSIGN_LSHIFT")]
	private void mASSIGN_LSHIFT()
	{
		EnterRule_ASSIGN_LSHIFT();
		EnterRule("ASSIGN_LSHIFT", 54);
		TraceIn("ASSIGN_LSHIFT", 54);
		try
		{
			int _type = ASSIGN_LSHIFT;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:477:15: ( '<<=' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:477:17: '<<='
			{
			DebugLocation(477, 17);
			Match("<<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_LSHIFT", 54);
			LeaveRule("ASSIGN_LSHIFT", 54);
			LeaveRule_ASSIGN_LSHIFT();
		}
	}
	// $ANTLR end "ASSIGN_LSHIFT"

	partial void EnterRule_ASSIGN_RSHIFT();
	partial void LeaveRule_ASSIGN_RSHIFT();

	// $ANTLR start "ASSIGN_RSHIFT"
	[GrammarRule("ASSIGN_RSHIFT")]
	private void mASSIGN_RSHIFT()
	{
		EnterRule_ASSIGN_RSHIFT();
		EnterRule("ASSIGN_RSHIFT", 55);
		TraceIn("ASSIGN_RSHIFT", 55);
		try
		{
			int _type = ASSIGN_RSHIFT;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:478:15: ( '>>=' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:478:17: '>>='
			{
			DebugLocation(478, 17);
			Match(">>="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_RSHIFT", 55);
			LeaveRule("ASSIGN_RSHIFT", 55);
			LeaveRule_ASSIGN_RSHIFT();
		}
	}
	// $ANTLR end "ASSIGN_RSHIFT"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 56);
		TraceIn("COMMA", 56);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:480:9: ( ',' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:480:11: ','
			{
			DebugLocation(480, 11);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 56);
			LeaveRule("COMMA", 56);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_LPAREN();
	partial void LeaveRule_LPAREN();

	// $ANTLR start "LPAREN"
	[GrammarRule("LPAREN")]
	private void mLPAREN()
	{
		EnterRule_LPAREN();
		EnterRule("LPAREN", 57);
		TraceIn("LPAREN", 57);
		try
		{
			int _type = LPAREN;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:481:10: ( '(' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:481:12: '('
			{
			DebugLocation(481, 12);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPAREN", 57);
			LeaveRule("LPAREN", 57);
			LeaveRule_LPAREN();
		}
	}
	// $ANTLR end "LPAREN"

	partial void EnterRule_RPAREN();
	partial void LeaveRule_RPAREN();

	// $ANTLR start "RPAREN"
	[GrammarRule("RPAREN")]
	private void mRPAREN()
	{
		EnterRule_RPAREN();
		EnterRule("RPAREN", 58);
		TraceIn("RPAREN", 58);
		try
		{
			int _type = RPAREN;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:482:10: ( ')' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:482:12: ')'
			{
			DebugLocation(482, 12);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPAREN", 58);
			LeaveRule("RPAREN", 58);
			LeaveRule_RPAREN();
		}
	}
	// $ANTLR end "RPAREN"

	partial void EnterRule_LBRACE();
	partial void LeaveRule_LBRACE();

	// $ANTLR start "LBRACE"
	[GrammarRule("LBRACE")]
	private void mLBRACE()
	{
		EnterRule_LBRACE();
		EnterRule("LBRACE", 59);
		TraceIn("LBRACE", 59);
		try
		{
			int _type = LBRACE;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:483:10: ( '[' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:483:12: '['
			{
			DebugLocation(483, 12);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LBRACE", 59);
			LeaveRule("LBRACE", 59);
			LeaveRule_LBRACE();
		}
	}
	// $ANTLR end "LBRACE"

	partial void EnterRule_RBRACE();
	partial void LeaveRule_RBRACE();

	// $ANTLR start "RBRACE"
	[GrammarRule("RBRACE")]
	private void mRBRACE()
	{
		EnterRule_RBRACE();
		EnterRule("RBRACE", 60);
		TraceIn("RBRACE", 60);
		try
		{
			int _type = RBRACE;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:484:10: ( ']' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:484:12: ']'
			{
			DebugLocation(484, 12);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RBRACE", 60);
			LeaveRule("RBRACE", 60);
			LeaveRule_RBRACE();
		}
	}
	// $ANTLR end "RBRACE"

	partial void EnterRule_LCURLY();
	partial void LeaveRule_LCURLY();

	// $ANTLR start "LCURLY"
	[GrammarRule("LCURLY")]
	private void mLCURLY()
	{
		EnterRule_LCURLY();
		EnterRule("LCURLY", 61);
		TraceIn("LCURLY", 61);
		try
		{
			int _type = LCURLY;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:485:10: ( '{' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:485:12: '{'
			{
			DebugLocation(485, 12);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LCURLY", 61);
			LeaveRule("LCURLY", 61);
			LeaveRule_LCURLY();
		}
	}
	// $ANTLR end "LCURLY"

	partial void EnterRule_RCURLY();
	partial void LeaveRule_RCURLY();

	// $ANTLR start "RCURLY"
	[GrammarRule("RCURLY")]
	private void mRCURLY()
	{
		EnterRule_RCURLY();
		EnterRule("RCURLY", 62);
		TraceIn("RCURLY", 62);
		try
		{
			int _type = RCURLY;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:486:10: ( '}' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:486:12: '}'
			{
			DebugLocation(486, 12);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RCURLY", 62);
			LeaveRule("RCURLY", 62);
			LeaveRule_RCURLY();
		}
	}
	// $ANTLR end "RCURLY"

	partial void EnterRule_COLON();
	partial void LeaveRule_COLON();

	// $ANTLR start "COLON"
	[GrammarRule("COLON")]
	private void mCOLON()
	{
		EnterRule_COLON();
		EnterRule("COLON", 63);
		TraceIn("COLON", 63);
		try
		{
			int _type = COLON;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:487:9: ( ':' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:487:11: ':'
			{
			DebugLocation(487, 11);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLON", 63);
			LeaveRule("COLON", 63);
			LeaveRule_COLON();
		}
	}
	// $ANTLR end "COLON"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 64);
		TraceIn("DOT", 64);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:488:8: ( '.' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:488:10: '.'
			{
			DebugLocation(488, 10);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 64);
			LeaveRule("DOT", 64);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 65);
		TraceIn("NOT", 65);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:489:8: ( '!' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:489:10: '!'
			{
			DebugLocation(489, 10);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 65);
			LeaveRule("NOT", 65);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_INCREMENT();
	partial void LeaveRule_INCREMENT();

	// $ANTLR start "INCREMENT"
	[GrammarRule("INCREMENT")]
	private void mINCREMENT()
	{
		EnterRule_INCREMENT();
		EnterRule("INCREMENT", 66);
		TraceIn("INCREMENT", 66);
		try
		{
			int _type = INCREMENT;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:491:12: ( '++' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:491:14: '++'
			{
			DebugLocation(491, 14);
			Match("++"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INCREMENT", 66);
			LeaveRule("INCREMENT", 66);
			LeaveRule_INCREMENT();
		}
	}
	// $ANTLR end "INCREMENT"

	partial void EnterRule_DECREMENT();
	partial void LeaveRule_DECREMENT();

	// $ANTLR start "DECREMENT"
	[GrammarRule("DECREMENT")]
	private void mDECREMENT()
	{
		EnterRule_DECREMENT();
		EnterRule("DECREMENT", 67);
		TraceIn("DECREMENT", 67);
		try
		{
			int _type = DECREMENT;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:492:12: ( '--' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:492:14: '--'
			{
			DebugLocation(492, 14);
			Match("--"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DECREMENT", 67);
			LeaveRule("DECREMENT", 67);
			LeaveRule_DECREMENT();
		}
	}
	// $ANTLR end "DECREMENT"

	partial void EnterRule_CONDITION();
	partial void LeaveRule_CONDITION();

	// $ANTLR start "CONDITION"
	[GrammarRule("CONDITION")]
	private void mCONDITION()
	{
		EnterRule_CONDITION();
		EnterRule("CONDITION", 68);
		TraceIn("CONDITION", 68);
		try
		{
			int _type = CONDITION;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:494:12: ( '?' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:494:14: '?'
			{
			DebugLocation(494, 14);
			Match('?'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CONDITION", 68);
			LeaveRule("CONDITION", 68);
			LeaveRule_CONDITION();
		}
	}
	// $ANTLR end "CONDITION"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 69);
		TraceIn("ELSE", 69);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:495:8: ( 'else' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:495:10: 'else'
			{
			DebugLocation(495, 10);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 69);
			LeaveRule("ELSE", 69);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_SCOPE_MODIFIER();
	partial void LeaveRule_SCOPE_MODIFIER();

	// $ANTLR start "SCOPE_MODIFIER"
	[GrammarRule("SCOPE_MODIFIER")]
	private void mSCOPE_MODIFIER()
	{
		EnterRule_SCOPE_MODIFIER();
		EnterRule("SCOPE_MODIFIER", 70);
		TraceIn("SCOPE_MODIFIER", 70);
		try
		{
			int _type = SCOPE_MODIFIER;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:497:18: ( 'private' | 'protected' | 'public' )
			int alt9=3;
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0=='p'))
			{
				int LA9_1 = input.LA(2);

				if ((LA9_1=='r'))
				{
					int LA9_2 = input.LA(3);

					if ((LA9_2=='i'))
					{
						alt9 = 1;
					}
					else if ((LA9_2=='o'))
					{
						alt9 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 9, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA9_1=='u'))
				{
					alt9 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:497:20: 'private'
				{
				DebugLocation(497, 20);
				Match("private"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\work\\ReoScript\\ReoScript.g:497:32: 'protected'
				{
				DebugLocation(497, 32);
				Match("protected"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\work\\ReoScript\\ReoScript.g:497:46: 'public'
				{
				DebugLocation(497, 46);
				Match("public"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SCOPE_MODIFIER", 70);
			LeaveRule("SCOPE_MODIFIER", 70);
			LeaveRule_SCOPE_MODIFIER();
		}
	}
	// $ANTLR end "SCOPE_MODIFIER"

	partial void EnterRule_TYPE();
	partial void LeaveRule_TYPE();

	// $ANTLR start "TYPE"
	[GrammarRule("TYPE")]
	private void mTYPE()
	{
		EnterRule_TYPE();
		EnterRule("TYPE", 71);
		TraceIn("TYPE", 71);
		try
		{
			int _type = TYPE;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:498:8: ( 'var' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:498:10: 'var'
			{
			DebugLocation(498, 10);
			Match("var"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPE", 71);
			LeaveRule("TYPE", 71);
			LeaveRule_TYPE();
		}
	}
	// $ANTLR end "TYPE"

	partial void EnterRule_TRUE();
	partial void LeaveRule_TRUE();

	// $ANTLR start "TRUE"
	[GrammarRule("TRUE")]
	private void mTRUE()
	{
		EnterRule_TRUE();
		EnterRule("TRUE", 72);
		TraceIn("TRUE", 72);
		try
		{
			int _type = TRUE;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:499:8: ( 'true' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:499:10: 'true'
			{
			DebugLocation(499, 10);
			Match("true"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRUE", 72);
			LeaveRule("TRUE", 72);
			LeaveRule_TRUE();
		}
	}
	// $ANTLR end "TRUE"

	partial void EnterRule_FALSE();
	partial void LeaveRule_FALSE();

	// $ANTLR start "FALSE"
	[GrammarRule("FALSE")]
	private void mFALSE()
	{
		EnterRule_FALSE();
		EnterRule("FALSE", 73);
		TraceIn("FALSE", 73);
		try
		{
			int _type = FALSE;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:500:9: ( 'false' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:500:11: 'false'
			{
			DebugLocation(500, 11);
			Match("false"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FALSE", 73);
			LeaveRule("FALSE", 73);
			LeaveRule_FALSE();
		}
	}
	// $ANTLR end "FALSE"

	partial void EnterRule_THIS();
	partial void LeaveRule_THIS();

	// $ANTLR start "THIS"
	[GrammarRule("THIS")]
	private void mTHIS()
	{
		EnterRule_THIS();
		EnterRule("THIS", 74);
		TraceIn("THIS", 74);
		try
		{
			int _type = THIS;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:501:8: ( 'this' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:501:10: 'this'
			{
			DebugLocation(501, 10);
			Match("this"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THIS", 74);
			LeaveRule("THIS", 74);
			LeaveRule_THIS();
		}
	}
	// $ANTLR end "THIS"

	partial void EnterRule_NULL();
	partial void LeaveRule_NULL();

	// $ANTLR start "NULL"
	[GrammarRule("NULL")]
	private void mNULL()
	{
		EnterRule_NULL();
		EnterRule("NULL", 75);
		TraceIn("NULL", 75);
		try
		{
			int _type = NULL;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:502:8: ( 'null' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:502:10: 'null'
			{
			DebugLocation(502, 10);
			Match("null"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NULL", 75);
			LeaveRule("NULL", 75);
			LeaveRule_NULL();
		}
	}
	// $ANTLR end "NULL"

	partial void EnterRule_UNDEFINED();
	partial void LeaveRule_UNDEFINED();

	// $ANTLR start "UNDEFINED"
	[GrammarRule("UNDEFINED")]
	private void mUNDEFINED()
	{
		EnterRule_UNDEFINED();
		EnterRule("UNDEFINED", 76);
		TraceIn("UNDEFINED", 76);
		try
		{
			int _type = UNDEFINED;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:503:13: ( 'undefined' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:503:15: 'undefined'
			{
			DebugLocation(503, 15);
			Match("undefined"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("UNDEFINED", 76);
			LeaveRule("UNDEFINED", 76);
			LeaveRule_UNDEFINED();
		}
	}
	// $ANTLR end "UNDEFINED"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 77);
		TraceIn("COMMENT", 77);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:505:11: ( '/*' ( options {greedy=false; } : . )* '*/' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:505:13: '/*' ( options {greedy=false; } : . )* '*/'
			{
			DebugLocation(505, 13);
			Match("/*"); 

			DebugLocation(505, 18);
			// C:\\work\\ReoScript\\ReoScript.g:505:18: ( options {greedy=false; } : . )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0=='*'))
				{
					int LA10_1 = input.LA(2);

					if ((LA10_1=='/'))
					{
						alt10 = 2;
					}
					else if (((LA10_1>='\u0000' && LA10_1<='.')||(LA10_1>='0' && LA10_1<='\uFFFF')))
					{
						alt10 = 1;
					}


				}
				else if (((LA10_0>='\u0000' && LA10_0<=')')||(LA10_0>='+' && LA10_0<='\uFFFF')))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:505:45: .
					{
					DebugLocation(505, 45);
					MatchAny(); 

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(505, 49);
			Match("*/"); 

			DebugLocation(505, 54);
			 _channel=HIDDEN; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 77);
			LeaveRule("COMMENT", 77);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_LINE_COMMENT();
	partial void LeaveRule_LINE_COMMENT();

	// $ANTLR start "LINE_COMMENT"
	[GrammarRule("LINE_COMMENT")]
	private void mLINE_COMMENT()
	{
		EnterRule_LINE_COMMENT();
		EnterRule("LINE_COMMENT", 78);
		TraceIn("LINE_COMMENT", 78);
		try
		{
			int _type = LINE_COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:506:14: ( '//' (~ ( '\\r' | '\\n' ) )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:506:16: '//' (~ ( '\\r' | '\\n' ) )*
			{
			DebugLocation(506, 16);
			Match("//"); 

			DebugLocation(506, 21);
			// C:\\work\\ReoScript\\ReoScript.g:506:21: (~ ( '\\r' | '\\n' ) )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if (((LA11_0>='\u0000' && LA11_0<='\t')||(LA11_0>='\u000B' && LA11_0<='\f')||(LA11_0>='\u000E' && LA11_0<='\uFFFF')))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:
					{
					DebugLocation(506, 21);
					input.Consume();


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(506, 35);
			 _channel=HIDDEN; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINE_COMMENT", 78);
			LeaveRule("LINE_COMMENT", 78);
			LeaveRule_LINE_COMMENT();
		}
	}
	// $ANTLR end "LINE_COMMENT"

	partial void EnterRule_IDENTIFIER();
	partial void LeaveRule_IDENTIFIER();

	// $ANTLR start "IDENTIFIER"
	[GrammarRule("IDENTIFIER")]
	private void mIDENTIFIER()
	{
		EnterRule_IDENTIFIER();
		EnterRule("IDENTIFIER", 79);
		TraceIn("IDENTIFIER", 79);
		try
		{
			int _type = IDENTIFIER;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:508:14: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' | '_' )* )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:508:16: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' | '_' )*
			{
			DebugLocation(508, 16);
			if (input.LA(1)=='$'||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(508, 44);
			// C:\\work\\ReoScript\\ReoScript.g:508:44: ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' | '_' )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if (((LA12_0>='0' && LA12_0<='9')||(LA12_0>='A' && LA12_0<='Z')||LA12_0=='_'||(LA12_0>='a' && LA12_0<='z')))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:
					{
					DebugLocation(508, 44);
					input.Consume();


					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENTIFIER", 79);
			LeaveRule("IDENTIFIER", 79);
			LeaveRule_IDENTIFIER();
		}
	}
	// $ANTLR end "IDENTIFIER"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 80);
		TraceIn("NEWLINE", 80);
		try
		{
			int _type = NEWLINE;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:509:11: ( ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:509:13: ( '\\r' )? '\\n'
			{
			DebugLocation(509, 13);
			// C:\\work\\ReoScript\\ReoScript.g:509:13: ( '\\r' )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0=='\r'))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\work\\ReoScript\\ReoScript.g:509:13: '\\r'
				{
				DebugLocation(509, 13);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(509, 19);
			Match('\n'); 
			DebugLocation(509, 24);
			 _channel=HIDDEN; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEWLINE", 80);
			LeaveRule("NEWLINE", 80);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 81);
		TraceIn("WS", 81);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:510:7: ( ( ' ' | '\\t' | NEWLINE )+ )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:510:9: ( ' ' | '\\t' | NEWLINE )+
			{
			DebugLocation(510, 9);
			// C:\\work\\ReoScript\\ReoScript.g:510:9: ( ' ' | '\\t' | NEWLINE )+
			int cnt14=0;
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=4;
				try { DebugEnterDecision(14, false);
				switch (input.LA(1))
				{
				case ' ':
					{
					alt14 = 1;
					}
					break;
				case '\t':
					{
					alt14 = 2;
					}
					break;
				case '\n':
				case '\r':
					{
					alt14 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\work\\ReoScript\\ReoScript.g:510:10: ' '
					{
					DebugLocation(510, 10);
					Match(' '); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\work\\ReoScript\\ReoScript.g:510:14: '\\t'
					{
					DebugLocation(510, 14);
					Match('\t'); 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\work\\ReoScript\\ReoScript.g:510:21: NEWLINE
					{
					DebugLocation(510, 21);
					mNEWLINE(); 

					}
					break;

				default:
					if (cnt14 >= 1)
						goto loop14;

					EarlyExitException eee14 = new EarlyExitException( 14, input );
					DebugRecognitionException(eee14);
					throw eee14;
				}
				cnt14++;
			}
			loop14:
				;

			} finally { DebugExitSubRule(14); }

			DebugLocation(510, 32);
			 _channel=HIDDEN; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 81);
			LeaveRule("WS", 81);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_SEMI();
	partial void LeaveRule_SEMI();

	// $ANTLR start "SEMI"
	[GrammarRule("SEMI")]
	private void mSEMI()
	{
		EnterRule_SEMI();
		EnterRule("SEMI", 82);
		TraceIn("SEMI", 82);
		try
		{
			int _type = SEMI;
			int _channel = DefaultTokenChannel;
			// C:\\work\\ReoScript\\ReoScript.g:511:8: ( ';' )
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:511:10: ';'
			{
			DebugLocation(511, 10);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMI", 82);
			LeaveRule("SEMI", 82);
			LeaveRule_SEMI();
		}
	}
	// $ANTLR end "SEMI"

	public override void mTokens()
	{
		// C:\\work\\ReoScript\\ReoScript.g:1:8: ( AND | DIV | EQUALS | GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN | LOGICAL_AND | LOGICAL_OR | LSHIFT | MINUS | MOD | MUL | NOT_EQUALS | OR | PLUS | RSHIFT | XOR | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | NUMBER_LITERATE | HEX_LITERATE | BINARY_LITERATE | STRING_LITERATE | ASSIGNMENT | ASSIGN_PLUS | ASSIGN_MINUS | ASSIGN_MUL | ASSIGN_DIV | ASSIGN_REM | ASSIGN_AND | ASSIGN_OR | ASSIGN_REV | ASSIGN_LSHIFT | ASSIGN_RSHIFT | COMMA | LPAREN | RPAREN | LBRACE | RBRACE | LCURLY | RCURLY | COLON | DOT | NOT | INCREMENT | DECREMENT | CONDITION | ELSE | SCOPE_MODIFIER | TYPE | TRUE | FALSE | THIS | NULL | UNDEFINED | COMMENT | LINE_COMMENT | IDENTIFIER | NEWLINE | WS | SEMI )
		int alt15=81;
		try { DebugEnterDecision(15, false);
		try
		{
			alt15 = dfa15.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(15); }
		switch (alt15)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\work\\ReoScript\\ReoScript.g:1:10: AND
			{
			DebugLocation(1, 10);
			mAND(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\work\\ReoScript\\ReoScript.g:1:14: DIV
			{
			DebugLocation(1, 14);
			mDIV(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\work\\ReoScript\\ReoScript.g:1:18: EQUALS
			{
			DebugLocation(1, 18);
			mEQUALS(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\work\\ReoScript\\ReoScript.g:1:25: GREAT_EQUALS
			{
			DebugLocation(1, 25);
			mGREAT_EQUALS(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\work\\ReoScript\\ReoScript.g:1:38: GREAT_THAN
			{
			DebugLocation(1, 38);
			mGREAT_THAN(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\work\\ReoScript\\ReoScript.g:1:49: LESS_EQUALS
			{
			DebugLocation(1, 49);
			mLESS_EQUALS(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\work\\ReoScript\\ReoScript.g:1:61: LESS_THAN
			{
			DebugLocation(1, 61);
			mLESS_THAN(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\work\\ReoScript\\ReoScript.g:1:71: LOGICAL_AND
			{
			DebugLocation(1, 71);
			mLOGICAL_AND(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\work\\ReoScript\\ReoScript.g:1:83: LOGICAL_OR
			{
			DebugLocation(1, 83);
			mLOGICAL_OR(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\work\\ReoScript\\ReoScript.g:1:94: LSHIFT
			{
			DebugLocation(1, 94);
			mLSHIFT(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\work\\ReoScript\\ReoScript.g:1:101: MINUS
			{
			DebugLocation(1, 101);
			mMINUS(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\work\\ReoScript\\ReoScript.g:1:107: MOD
			{
			DebugLocation(1, 107);
			mMOD(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\work\\ReoScript\\ReoScript.g:1:111: MUL
			{
			DebugLocation(1, 111);
			mMUL(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\work\\ReoScript\\ReoScript.g:1:115: NOT_EQUALS
			{
			DebugLocation(1, 115);
			mNOT_EQUALS(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\work\\ReoScript\\ReoScript.g:1:126: OR
			{
			DebugLocation(1, 126);
			mOR(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\work\\ReoScript\\ReoScript.g:1:129: PLUS
			{
			DebugLocation(1, 129);
			mPLUS(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\work\\ReoScript\\ReoScript.g:1:134: RSHIFT
			{
			DebugLocation(1, 134);
			mRSHIFT(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\work\\ReoScript\\ReoScript.g:1:141: XOR
			{
			DebugLocation(1, 141);
			mXOR(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\work\\ReoScript\\ReoScript.g:1:145: T__107
			{
			DebugLocation(1, 145);
			mT__107(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\work\\ReoScript\\ReoScript.g:1:152: T__108
			{
			DebugLocation(1, 152);
			mT__108(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\work\\ReoScript\\ReoScript.g:1:159: T__109
			{
			DebugLocation(1, 159);
			mT__109(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\work\\ReoScript\\ReoScript.g:1:166: T__110
			{
			DebugLocation(1, 166);
			mT__110(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// C:\\work\\ReoScript\\ReoScript.g:1:173: T__111
			{
			DebugLocation(1, 173);
			mT__111(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// C:\\work\\ReoScript\\ReoScript.g:1:180: T__112
			{
			DebugLocation(1, 180);
			mT__112(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// C:\\work\\ReoScript\\ReoScript.g:1:187: T__113
			{
			DebugLocation(1, 187);
			mT__113(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// C:\\work\\ReoScript\\ReoScript.g:1:194: T__114
			{
			DebugLocation(1, 194);
			mT__114(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// C:\\work\\ReoScript\\ReoScript.g:1:201: T__115
			{
			DebugLocation(1, 201);
			mT__115(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// C:\\work\\ReoScript\\ReoScript.g:1:208: T__116
			{
			DebugLocation(1, 208);
			mT__116(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// C:\\work\\ReoScript\\ReoScript.g:1:215: T__117
			{
			DebugLocation(1, 215);
			mT__117(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// C:\\work\\ReoScript\\ReoScript.g:1:222: T__118
			{
			DebugLocation(1, 222);
			mT__118(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// C:\\work\\ReoScript\\ReoScript.g:1:229: T__119
			{
			DebugLocation(1, 229);
			mT__119(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// C:\\work\\ReoScript\\ReoScript.g:1:236: T__120
			{
			DebugLocation(1, 236);
			mT__120(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// C:\\work\\ReoScript\\ReoScript.g:1:243: T__121
			{
			DebugLocation(1, 243);
			mT__121(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// C:\\work\\ReoScript\\ReoScript.g:1:250: T__122
			{
			DebugLocation(1, 250);
			mT__122(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// C:\\work\\ReoScript\\ReoScript.g:1:257: T__123
			{
			DebugLocation(1, 257);
			mT__123(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// C:\\work\\ReoScript\\ReoScript.g:1:264: T__124
			{
			DebugLocation(1, 264);
			mT__124(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// C:\\work\\ReoScript\\ReoScript.g:1:271: T__125
			{
			DebugLocation(1, 271);
			mT__125(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// C:\\work\\ReoScript\\ReoScript.g:1:278: T__126
			{
			DebugLocation(1, 278);
			mT__126(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// C:\\work\\ReoScript\\ReoScript.g:1:285: T__127
			{
			DebugLocation(1, 285);
			mT__127(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// C:\\work\\ReoScript\\ReoScript.g:1:292: NUMBER_LITERATE
			{
			DebugLocation(1, 292);
			mNUMBER_LITERATE(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// C:\\work\\ReoScript\\ReoScript.g:1:308: HEX_LITERATE
			{
			DebugLocation(1, 308);
			mHEX_LITERATE(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// C:\\work\\ReoScript\\ReoScript.g:1:321: BINARY_LITERATE
			{
			DebugLocation(1, 321);
			mBINARY_LITERATE(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// C:\\work\\ReoScript\\ReoScript.g:1:337: STRING_LITERATE
			{
			DebugLocation(1, 337);
			mSTRING_LITERATE(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// C:\\work\\ReoScript\\ReoScript.g:1:353: ASSIGNMENT
			{
			DebugLocation(1, 353);
			mASSIGNMENT(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// C:\\work\\ReoScript\\ReoScript.g:1:364: ASSIGN_PLUS
			{
			DebugLocation(1, 364);
			mASSIGN_PLUS(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// C:\\work\\ReoScript\\ReoScript.g:1:376: ASSIGN_MINUS
			{
			DebugLocation(1, 376);
			mASSIGN_MINUS(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// C:\\work\\ReoScript\\ReoScript.g:1:389: ASSIGN_MUL
			{
			DebugLocation(1, 389);
			mASSIGN_MUL(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// C:\\work\\ReoScript\\ReoScript.g:1:400: ASSIGN_DIV
			{
			DebugLocation(1, 400);
			mASSIGN_DIV(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// C:\\work\\ReoScript\\ReoScript.g:1:411: ASSIGN_REM
			{
			DebugLocation(1, 411);
			mASSIGN_REM(); 

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// C:\\work\\ReoScript\\ReoScript.g:1:422: ASSIGN_AND
			{
			DebugLocation(1, 422);
			mASSIGN_AND(); 

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// C:\\work\\ReoScript\\ReoScript.g:1:433: ASSIGN_OR
			{
			DebugLocation(1, 433);
			mASSIGN_OR(); 

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// C:\\work\\ReoScript\\ReoScript.g:1:443: ASSIGN_REV
			{
			DebugLocation(1, 443);
			mASSIGN_REV(); 

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// C:\\work\\ReoScript\\ReoScript.g:1:454: ASSIGN_LSHIFT
			{
			DebugLocation(1, 454);
			mASSIGN_LSHIFT(); 

			}
			break;
		case 54:
			DebugEnterAlt(54);
			// C:\\work\\ReoScript\\ReoScript.g:1:468: ASSIGN_RSHIFT
			{
			DebugLocation(1, 468);
			mASSIGN_RSHIFT(); 

			}
			break;
		case 55:
			DebugEnterAlt(55);
			// C:\\work\\ReoScript\\ReoScript.g:1:482: COMMA
			{
			DebugLocation(1, 482);
			mCOMMA(); 

			}
			break;
		case 56:
			DebugEnterAlt(56);
			// C:\\work\\ReoScript\\ReoScript.g:1:488: LPAREN
			{
			DebugLocation(1, 488);
			mLPAREN(); 

			}
			break;
		case 57:
			DebugEnterAlt(57);
			// C:\\work\\ReoScript\\ReoScript.g:1:495: RPAREN
			{
			DebugLocation(1, 495);
			mRPAREN(); 

			}
			break;
		case 58:
			DebugEnterAlt(58);
			// C:\\work\\ReoScript\\ReoScript.g:1:502: LBRACE
			{
			DebugLocation(1, 502);
			mLBRACE(); 

			}
			break;
		case 59:
			DebugEnterAlt(59);
			// C:\\work\\ReoScript\\ReoScript.g:1:509: RBRACE
			{
			DebugLocation(1, 509);
			mRBRACE(); 

			}
			break;
		case 60:
			DebugEnterAlt(60);
			// C:\\work\\ReoScript\\ReoScript.g:1:516: LCURLY
			{
			DebugLocation(1, 516);
			mLCURLY(); 

			}
			break;
		case 61:
			DebugEnterAlt(61);
			// C:\\work\\ReoScript\\ReoScript.g:1:523: RCURLY
			{
			DebugLocation(1, 523);
			mRCURLY(); 

			}
			break;
		case 62:
			DebugEnterAlt(62);
			// C:\\work\\ReoScript\\ReoScript.g:1:530: COLON
			{
			DebugLocation(1, 530);
			mCOLON(); 

			}
			break;
		case 63:
			DebugEnterAlt(63);
			// C:\\work\\ReoScript\\ReoScript.g:1:536: DOT
			{
			DebugLocation(1, 536);
			mDOT(); 

			}
			break;
		case 64:
			DebugEnterAlt(64);
			// C:\\work\\ReoScript\\ReoScript.g:1:540: NOT
			{
			DebugLocation(1, 540);
			mNOT(); 

			}
			break;
		case 65:
			DebugEnterAlt(65);
			// C:\\work\\ReoScript\\ReoScript.g:1:544: INCREMENT
			{
			DebugLocation(1, 544);
			mINCREMENT(); 

			}
			break;
		case 66:
			DebugEnterAlt(66);
			// C:\\work\\ReoScript\\ReoScript.g:1:554: DECREMENT
			{
			DebugLocation(1, 554);
			mDECREMENT(); 

			}
			break;
		case 67:
			DebugEnterAlt(67);
			// C:\\work\\ReoScript\\ReoScript.g:1:564: CONDITION
			{
			DebugLocation(1, 564);
			mCONDITION(); 

			}
			break;
		case 68:
			DebugEnterAlt(68);
			// C:\\work\\ReoScript\\ReoScript.g:1:574: ELSE
			{
			DebugLocation(1, 574);
			mELSE(); 

			}
			break;
		case 69:
			DebugEnterAlt(69);
			// C:\\work\\ReoScript\\ReoScript.g:1:579: SCOPE_MODIFIER
			{
			DebugLocation(1, 579);
			mSCOPE_MODIFIER(); 

			}
			break;
		case 70:
			DebugEnterAlt(70);
			// C:\\work\\ReoScript\\ReoScript.g:1:594: TYPE
			{
			DebugLocation(1, 594);
			mTYPE(); 

			}
			break;
		case 71:
			DebugEnterAlt(71);
			// C:\\work\\ReoScript\\ReoScript.g:1:599: TRUE
			{
			DebugLocation(1, 599);
			mTRUE(); 

			}
			break;
		case 72:
			DebugEnterAlt(72);
			// C:\\work\\ReoScript\\ReoScript.g:1:604: FALSE
			{
			DebugLocation(1, 604);
			mFALSE(); 

			}
			break;
		case 73:
			DebugEnterAlt(73);
			// C:\\work\\ReoScript\\ReoScript.g:1:610: THIS
			{
			DebugLocation(1, 610);
			mTHIS(); 

			}
			break;
		case 74:
			DebugEnterAlt(74);
			// C:\\work\\ReoScript\\ReoScript.g:1:615: NULL
			{
			DebugLocation(1, 615);
			mNULL(); 

			}
			break;
		case 75:
			DebugEnterAlt(75);
			// C:\\work\\ReoScript\\ReoScript.g:1:620: UNDEFINED
			{
			DebugLocation(1, 620);
			mUNDEFINED(); 

			}
			break;
		case 76:
			DebugEnterAlt(76);
			// C:\\work\\ReoScript\\ReoScript.g:1:630: COMMENT
			{
			DebugLocation(1, 630);
			mCOMMENT(); 

			}
			break;
		case 77:
			DebugEnterAlt(77);
			// C:\\work\\ReoScript\\ReoScript.g:1:638: LINE_COMMENT
			{
			DebugLocation(1, 638);
			mLINE_COMMENT(); 

			}
			break;
		case 78:
			DebugEnterAlt(78);
			// C:\\work\\ReoScript\\ReoScript.g:1:651: IDENTIFIER
			{
			DebugLocation(1, 651);
			mIDENTIFIER(); 

			}
			break;
		case 79:
			DebugEnterAlt(79);
			// C:\\work\\ReoScript\\ReoScript.g:1:662: NEWLINE
			{
			DebugLocation(1, 662);
			mNEWLINE(); 

			}
			break;
		case 80:
			DebugEnterAlt(80);
			// C:\\work\\ReoScript\\ReoScript.g:1:670: WS
			{
			DebugLocation(1, 670);
			mWS(); 

			}
			break;
		case 81:
			DebugEnterAlt(81);
			// C:\\work\\ReoScript\\ReoScript.g:1:673: SEMI
			{
			DebugLocation(1, 673);
			mSEMI(); 

			}
			break;

		}

	}


	#region DFA
	DFA2 dfa2;
	DFA15 dfa15;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa2 = new DFA2(this);
		dfa15 = new DFA15(this);
	}

	private class DFA2 : DFA
	{
		private const string DFA2_eotS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA2_eofS =
			"\x4\xFFFF";
		private const string DFA2_minS =
			"\x2\x2E\x2\xFFFF";
		private const string DFA2_maxS =
			"\x2\x39\x2\xFFFF";
		private const string DFA2_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA2_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA2_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x2\x1\xFFFF\xA\x1",
				"",
				""
			};

		private static readonly short[] DFA2_eot = DFA.UnpackEncodedString(DFA2_eotS);
		private static readonly short[] DFA2_eof = DFA.UnpackEncodedString(DFA2_eofS);
		private static readonly char[] DFA2_min = DFA.UnpackEncodedStringToUnsignedChars(DFA2_minS);
		private static readonly char[] DFA2_max = DFA.UnpackEncodedStringToUnsignedChars(DFA2_maxS);
		private static readonly short[] DFA2_accept = DFA.UnpackEncodedString(DFA2_acceptS);
		private static readonly short[] DFA2_special = DFA.UnpackEncodedString(DFA2_specialS);
		private static readonly short[][] DFA2_transition;

		static DFA2()
		{
			int numStates = DFA2_transitionS.Length;
			DFA2_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA2_transition[i] = DFA.UnpackEncodedString(DFA2_transitionS[i]);
			}
		}

		public DFA2( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 2;
			this.eot = DFA2_eot;
			this.eof = DFA2_eof;
			this.min = DFA2_min;
			this.max = DFA2_max;
			this.accept = DFA2_accept;
			this.special = DFA2_special;
			this.transition = DFA2_transition;
		}

		public override string Description { get { return "436:4: ( ( '0' .. '9' )* '.' )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA15 : DFA
	{
		private const string DFA15_eotS =
			"\x1\xFFFF\x1\x30\x1\x35\x1\x38\x1\x3B\x1\x3F\x1\x42\x1\x45\x1\x47\x1"+
			"\x49\x1\x4B\x1\x4E\x1\x50\xA\x29\x1\xFFFF\x1\x1A\x1\x66\xB\xFFFF\x4\x29"+
			"\x2\xFFFF\x1\x6C\xE\xFFFF\x1\x6E\x2\xFFFF\x1\x70\x13\xFFFF\x8\x29\x1"+
			"\x7A\x1\x29\x1\x7D\x8\x29\x3\xFFFF\x5\x29\x5\xFFFF\x6\x29\x1\x92\x2\x29"+
			"\x1\xFFFF\x2\x29\x1\xFFFF\x1\x97\xB\x29\x1\xA3\x2\x29\x1\xA6\x4\x29\x1"+
			"\xFFFF\x4\x29\x1\xFFFF\x1\xAF\x3\x29\x1\xB3\x1\xB4\x1\x29\x1\xB6\x3\x29"+
			"\x1\xFFFF\x1\x29\x1\xBB\x1\xFFFF\x1\xBC\x4\x29\x1\xC1\x2\x29\x1\xFFFF"+
			"\x3\x29\x2\xFFFF\x1\xC7\x1\xFFFF\x4\x29\x2\xFFFF\x2\x29\x1\xCE\x1\x29"+
			"\x1\xFFFF\x1\xD0\x1\x29\x1\xD2\x1\xD3\x1\xD4\x1\xFFFF\x2\x29\x1\xD7\x2"+
			"\x29\x1\xDA\x1\xFFFF\x1\x29\x1\xFFFF\x1\x29\x3\xFFFF\x1\xD7\x1\x29\x1"+
			"\xFFFF\x1\x29\x1\xDF\x1\xFFFF\x1\xE0\x3\x29\x2\xFFFF\x1\x29\x1\xD7\x1"+
			"\xE5\x1\xE6\x2\xFFFF";
		private const string DFA15_eofS =
			"\xE7\xFFFF";
		private const string DFA15_minS =
			"\x1\x9\x1\x26\x1\x2A\x2\x3D\x1\x2F\x1\x3D\x1\x2D\x3\x3D\x1\x2B\x1\x3D"+
			"\x1\x72\x1\x61\x1\x65\x1\x61\x1\x66\x2\x65\x1\x77\x2\x68\x1\xFFFF\x1"+
			"\x62\x1\x30\xB\xFFFF\x1\x6C\x1\x72\x1\x61\x1\x6E\x1\xFFFF\x1\xA\x1\x9"+
			"\xE\xFFFF\x1\x3D\x2\xFFFF\x1\x3D\x13\xFFFF\x1\x65\x1\x73\x1\x61\x1\x6E"+
			"\x1\x66\x1\x72\x1\x6E\x1\x6C\x1\x30\x1\x70\x1\x30\x1\x77\x1\x6C\x1\x74"+
			"\x1\x69\x1\x70\x1\x75\x2\x69\x3\xFFFF\x1\x73\x1\x69\x1\x62\x1\x72\x1"+
			"\x64\x5\xFFFF\x1\x61\x1\x65\x1\x73\x1\x74\x1\x61\x1\x65\x1\x30\x1\x63"+
			"\x1\x73\x1\xFFFF\x1\x6F\x1\x74\x1\xFFFF\x1\x30\x1\x6C\x1\x75\x1\x74\x2"+
			"\x65\x1\x73\x1\x6C\x1\x65\x1\x76\x1\x74\x1\x6C\x1\x30\x1\x65\x1\x6B\x1"+
			"\x30\x1\x73\x1\x69\x1\x75\x1\x74\x1\xFFFF\x1\x74\x1\x65\x1\x72\x1\x61"+
			"\x1\xFFFF\x1\x30\x1\x72\x1\x63\x1\x6F\x2\x30\x1\x65\x1\x30\x1\x61\x1"+
			"\x65\x1\x69\x1\xFFFF\x1\x66\x1\x30\x1\xFFFF\x1\x30\x1\x6E\x1\x6C\x1\x65"+
			"\x1\x69\x1\x30\x1\x74\x1\x6E\x1\xFFFF\x1\x6E\x1\x68\x1\x66\x2\xFFFF\x1"+
			"\x30\x1\xFFFF\x1\x74\x2\x63\x1\x69\x2\xFFFF\x1\x75\x1\x74\x1\x30\x1\x6F"+
			"\x1\xFFFF\x1\x30\x1\x63\x3\x30\x1\xFFFF\x1\x65\x1\x74\x1\x30\x1\x6E\x1"+
			"\x65\x1\x30\x1\xFFFF\x1\x6E\x1\xFFFF\x1\x65\x3\xFFFF\x1\x30\x1\x65\x1"+
			"\xFFFF\x1\x65\x1\x30\x1\xFFFF\x1\x30\x1\x6F\x2\x64\x2\xFFFF\x1\x66\x3"+
			"\x30\x2\xFFFF";
		private const string DFA15_maxS =
			"\x1\x7E\x1\x3D\x3\x3E\x1\x3D\x1\x7C\x6\x3D\x1\x72\x1\x6F\x1\x65\x1\x75"+
			"\x1\x6E\x1\x75\x1\x65\x1\x77\x1\x79\x1\x68\x1\xFFFF\x1\x78\x1\x39\xB"+
			"\xFFFF\x1\x6C\x1\x75\x1\x61\x1\x6E\x1\xFFFF\x1\xA\x1\x20\xE\xFFFF\x1"+
			"\x3D\x2\xFFFF\x1\x3D\x13\xFFFF\x1\x65\x1\x73\x1\x61\x1\x6E\x1\x6C\x1"+
			"\x72\x1\x6E\x1\x6C\x1\x7A\x1\x70\x1\x7A\x1\x77\x1\x6C\x1\x74\x1\x69\x1"+
			"\x70\x1\x75\x2\x69\x3\xFFFF\x1\x73\x1\x6F\x1\x62\x1\x72\x1\x64\x5\xFFFF"+
			"\x1\x61\x1\x65\x1\x73\x1\x74\x1\x61\x1\x65\x1\x7A\x1\x63\x1\x73\x1\xFFFF"+
			"\x1\x6F\x1\x74\x1\xFFFF\x1\x7A\x1\x6C\x1\x75\x1\x74\x2\x65\x1\x73\x1"+
			"\x6C\x1\x65\x1\x76\x1\x74\x1\x6C\x1\x7A\x1\x65\x1\x6B\x1\x7A\x1\x73\x1"+
			"\x69\x1\x75\x1\x74\x1\xFFFF\x1\x74\x1\x65\x1\x72\x1\x61\x1\xFFFF\x1\x7A"+
			"\x1\x72\x1\x63\x1\x6F\x2\x7A\x1\x65\x1\x7A\x1\x61\x1\x65\x1\x69\x1\xFFFF"+
			"\x1\x66\x1\x7A\x1\xFFFF\x1\x7A\x1\x6E\x1\x6C\x1\x65\x1\x69\x1\x7A\x1"+
			"\x74\x1\x6E\x1\xFFFF\x1\x6E\x1\x68\x1\x66\x2\xFFFF\x1\x7A\x1\xFFFF\x1"+
			"\x74\x2\x63\x1\x69\x2\xFFFF\x1\x75\x1\x74\x1\x7A\x1\x6F\x1\xFFFF\x1\x7A"+
			"\x1\x63\x3\x7A\x1\xFFFF\x1\x65\x1\x74\x1\x7A\x1\x6E\x1\x65\x1\x7A\x1"+
			"\xFFFF\x1\x6E\x1\xFFFF\x1\x65\x3\xFFFF\x1\x7A\x1\x65\x1\xFFFF\x1\x65"+
			"\x1\x7A\x1\xFFFF\x1\x7A\x1\x6F\x2\x64\x2\xFFFF\x1\x66\x3\x7A\x2\xFFFF";
		private const string DFA15_acceptS =
			"\x17\xFFFF\x1\x27\x2\xFFFF\x1\x28\x1\x2B\x1\x37\x1\x38\x1\x39\x1\x3A"+
			"\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x43\x4\xFFFF\x1\x4E\x2\xFFFF\x1\x50\x1"+
			"\x51\x1\x8\x1\x32\x1\x1\x1\x13\x1\x30\x1\x4C\x1\x4D\x1\x2\x1\x3\x1\x15"+
			"\x1\x2C\x1\x4\x1\xFFFF\x1\x5\x1\x6\x1\xFFFF\x1\x14\x1\x7\x1\x9\x1\x33"+
			"\x1\xF\x1\x2E\x1\x42\x1\xB\x1\x31\x1\xC\x1\x2F\x1\xD\x1\xE\x1\x40\x1"+
			"\x2D\x1\x41\x1\x10\x1\x34\x1\x12\x13\xFFFF\x1\x29\x1\x2A\x1\x3F\x5\xFFFF"+
			"\x1\x4F\x1\x36\x1\x11\x1\x35\x1\xA\x9\xFFFF\x1\x1E\x2\xFFFF\x1\x20\x14"+
			"\xFFFF\x1\x1C\x4\xFFFF\x1\x22\xB\xFFFF\x1\x46\x2\xFFFF\x1\x17\x8\xFFFF"+
			"\x1\x4A\x3\xFFFF\x1\x47\x1\x49\x1\xFFFF\x1\x44\x4\xFFFF\x1\x16\x1\x18"+
			"\x4\xFFFF\x1\x48\x5\xFFFF\x1\x26\x6\xFFFF\x1\x1B\x1\xFFFF\x1\x1F\x1\xFFFF"+
			"\x1\x23\x1\x24\x1\x25\x2\xFFFF\x1\x45\x2\xFFFF\x1\x1A\x4\xFFFF\x1\x19"+
			"\x1\x1D\x4\xFFFF\x1\x4B\x1\x21";
		private const string DFA15_specialS =
			"\xE7\xFFFF}>";
		private static readonly string[] DFA15_transitionS =
			{
				"\x1\x2C\x1\x2B\x2\xFFFF\x1\x2A\x12\xFFFF\x1\x2C\x1\xA\x1\x1B\x1\xFFFF"+
				"\x1\x29\x1\x8\x1\x1\x1\x1B\x1\x1D\x1\x1E\x1\x9\x1\xB\x1\x1C\x1\x7\x1"+
				"\x19\x1\x2\x1\x18\x9\x1A\x1\x23\x1\x2D\x1\x5\x1\x3\x1\x4\x1\x24\x1\xFFFF"+
				"\x1A\x29\x1\x1F\x1\xFFFF\x1\x20\x1\xC\x1\x29\x1\xFFFF\x1\x29\x1\xD\x1"+
				"\xE\x1\xF\x1\x25\x1\x10\x2\x29\x1\x11\x4\x29\x1\x12\x1\x29\x1\x26\x1"+
				"\x29\x1\x13\x1\x14\x1\x15\x1\x28\x1\x27\x1\x16\x3\x29\x1\x21\x1\x6\x1"+
				"\x22\x1\x17",
				"\x1\x2E\x16\xFFFF\x1\x2F",
				"\x1\x33\x4\xFFFF\x1\x34\xD\xFFFF\x1\x32\x1\x31",
				"\x1\x36\x1\x37",
				"\x1\x39\x1\x3A",
				"\x1\x3E\xC\xFFFF\x1\x3D\x1\x3C",
				"\x1\x41\x3E\xFFFF\x1\x40",
				"\x1\x44\xF\xFFFF\x1\x43",
				"\x1\x46",
				"\x1\x48",
				"\x1\x4A",
				"\x1\x4D\x11\xFFFF\x1\x4C",
				"\x1\x4F",
				"\x1\x51",
				"\x1\x52\xA\xFFFF\x1\x53\x2\xFFFF\x1\x54",
				"\x1\x55",
				"\x1\x58\xD\xFFFF\x1\x56\x5\xFFFF\x1\x57",
				"\x1\x59\x6\xFFFF\x1\x5A\x1\x5B",
				"\x1\x5C\xF\xFFFF\x1\x5D",
				"\x1\x5E",
				"\x1\x5F",
				"\x1\x62\x9\xFFFF\x1\x61\x6\xFFFF\x1\x60",
				"\x1\x63",
				"",
				"\x1\x65\x15\xFFFF\x1\x64",
				"\xA\x1A",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x67",
				"\x1\x68\x2\xFFFF\x1\x69",
				"\x1\x6A",
				"\x1\x6B",
				"",
				"\x1\x2B",
				"\x2\x2C\x2\xFFFF\x1\x2C\x12\xFFFF\x1\x2C",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x6D",
				"",
				"",
				"\x1\x6F",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x71",
				"\x1\x72",
				"\x1\x73",
				"\x1\x74",
				"\x1\x75\x5\xFFFF\x1\x76",
				"\x1\x77",
				"\x1\x78",
				"\x1\x79",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\x7B",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x12\x29\x1\x7C\x7"+
				"\x29",
				"\x1\x7E",
				"\x1\x7F",
				"\x1\x80",
				"\x1\x81",
				"\x1\x82",
				"\x1\x83",
				"\x1\x84",
				"\x1\x85",
				"",
				"",
				"",
				"\x1\x86",
				"\x1\x87\x5\xFFFF\x1\x88",
				"\x1\x89",
				"\x1\x8A",
				"\x1\x8B",
				"",
				"",
				"",
				"",
				"",
				"\x1\x8C",
				"\x1\x8D",
				"\x1\x8E",
				"\x1\x8F",
				"\x1\x90",
				"\x1\x91",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\x93",
				"\x1\x94",
				"",
				"\x1\x95",
				"\x1\x96",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\x98",
				"\x1\x99",
				"\x1\x9A",
				"\x1\x9B",
				"\x1\x9C",
				"\x1\x9D",
				"\x1\x9E",
				"\x1\x9F",
				"\x1\xA0",
				"\x1\xA1",
				"\x1\xA2",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xA4",
				"\x1\xA5",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xA7",
				"\x1\xA8",
				"\x1\xA9",
				"\x1\xAA",
				"",
				"\x1\xAB",
				"\x1\xAC",
				"\x1\xAD",
				"\x1\xAE",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xB0",
				"\x1\xB1",
				"\x1\xB2",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xB5",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xB7",
				"\x1\xB8",
				"\x1\xB9",
				"",
				"\x1\xBA",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xBD",
				"\x1\xBE",
				"\x1\xBF",
				"\x1\xC0",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xC2",
				"\x1\xC3",
				"",
				"\x1\xC4",
				"\x1\xC5",
				"\x1\xC6",
				"",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"\x1\xC8",
				"\x1\xC9",
				"\x1\xCA",
				"\x1\xCB",
				"",
				"",
				"\x1\xCC",
				"\x1\xCD",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xCF",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xD1",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"\x1\xD5",
				"\x1\xD6",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xD8",
				"\x1\xD9",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"\x1\xDB",
				"",
				"\x1\xDC",
				"",
				"",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xDD",
				"",
				"\x1\xDE",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\xE1",
				"\x1\xE2",
				"\x1\xE3",
				"",
				"",
				"\x1\xE4",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				""
			};

		private static readonly short[] DFA15_eot = DFA.UnpackEncodedString(DFA15_eotS);
		private static readonly short[] DFA15_eof = DFA.UnpackEncodedString(DFA15_eofS);
		private static readonly char[] DFA15_min = DFA.UnpackEncodedStringToUnsignedChars(DFA15_minS);
		private static readonly char[] DFA15_max = DFA.UnpackEncodedStringToUnsignedChars(DFA15_maxS);
		private static readonly short[] DFA15_accept = DFA.UnpackEncodedString(DFA15_acceptS);
		private static readonly short[] DFA15_special = DFA.UnpackEncodedString(DFA15_specialS);
		private static readonly short[][] DFA15_transition;

		static DFA15()
		{
			int numStates = DFA15_transitionS.Length;
			DFA15_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA15_transition[i] = DFA.UnpackEncodedString(DFA15_transitionS[i]);
			}
		}

		public DFA15( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 15;
			this.eot = DFA15_eot;
			this.eof = DFA15_eof;
			this.min = DFA15_min;
			this.max = DFA15_max;
			this.accept = DFA15_accept;
			this.special = DFA15_special;
			this.transition = DFA15_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( AND | DIV | EQUALS | GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN | LOGICAL_AND | LOGICAL_OR | LSHIFT | MINUS | MOD | MUL | NOT_EQUALS | OR | PLUS | RSHIFT | XOR | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | NUMBER_LITERATE | HEX_LITERATE | BINARY_LITERATE | STRING_LITERATE | ASSIGNMENT | ASSIGN_PLUS | ASSIGN_MINUS | ASSIGN_MUL | ASSIGN_DIV | ASSIGN_REM | ASSIGN_AND | ASSIGN_OR | ASSIGN_REV | ASSIGN_LSHIFT | ASSIGN_RSHIFT | COMMA | LPAREN | RPAREN | LBRACE | RBRACE | LCURLY | RCURLY | COLON | DOT | NOT | INCREMENT | DECREMENT | CONDITION | ELSE | SCOPE_MODIFIER | TYPE | TRUE | FALSE | THIS | NULL | UNDEFINED | COMMENT | LINE_COMMENT | IDENTIFIER | NEWLINE | WS | SEMI );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  Unvell.ReoScript 
