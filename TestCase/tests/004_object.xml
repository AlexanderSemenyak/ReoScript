<?xml version="1.0" encoding="utf-8" ?>

<test-suite id="004" name="object">
  
  <test-case id="001">
    <script>
      var t = debug.assert;

      var obj = { a : 10 };
      
      t( obj != null );
      t( obj.a == 10 );
      
      obj.b = 20;
      t( obj.b == 20 );
      
      t( obj.a + obj.b == 30 );
    </script>
  </test-case>

  <test-case id="002">
    <script>
      var t = debug.assert;

      var obj = { a : 10, b: 20, 'c': 30 };

      var s = '';
      for(key in obj){
        if(key == 'a' || key =='b' || key=='c') {
          if(s.length>0) s+=', ';
          s+=key;
        }
      }
      
      t( s == "a, b, c" );
      
    </script>
  </test-case>

	<test-case id="003" name="index access">
		<script>
      var t = debug.assert;

      var obj = { a : 10, b: 20, 'c': 30 };

      t( obj['a'] == 10 );
      t( obj['b'] == 20 );
      t( obj['c'] == 30 );
      
      var key = 'd';
      obj[key] = obj.a - obj.b;
      t( obj.d == -10 );

    </script>
  </test-case>

  <test-case id="004" name="standard iterator">
    <script>
      var t = debug.assert;

      function dump() {
        var o = '';
        for(key in obj){
          if(o.length>0) o+=', ';
          o+=key;
        }
        return o;
      }
      
      var obj = { a : 10, b: 20, 'c': 30 };
      t(dump(o) == 'a, b, c');
      
      obj += { d: 40 };
      t(dump(o) == 'a, b, c, d');
      
    </script>
  </test-case>

  <test-case id="010" name="new">
    <script>
      var t = debug.assert;
      
      function A() {
        this.a = 10;
      }
      
      t( new A().a == 10 );
    </script>
  </test-case>

  <test-case id="011" desc="Initializer">
    <script>
      var t = debug.assert;

      function A() {
        this.a = 10;
      }

      var a = new A() {
        b : 20,
      };

      t( a.a == 10 );
      t( a.b == 20 );

    </script>
  </test-case>

  <test-case id="012">
    <script>
      var t = debug.assert;

      function A() {
        this.a = 10;
      }

      var obj = {
        b: { Con: A }
      };

      var c = [null, obj];

      var inst = new c[1].b.Con();
      t( inst != null );
      t( inst.a == 10 );

    </script>
  </test-case>

  <test-case id="013" name="combine">
    <script>
      var t = debug.assert;

      var a = { x: 10 };
      var b = { y: 20 };

      var c = a + b;
      t( c.x == 10 );
      t( c.y == 20 );

      var d = { z: 3.14 };
      t( (a + b + d).z == 3.14 );

      var e = a;
      e += d;

      t( e.z == 3.14 );

    </script>
  </test-case>

  <test-case id="020" name="delete property">
    <script>
      var t = debug.assert;

      var a = { hello: 'world', b:function() {} };
      t( a.hello != null );
      t( a.b != 10 );

      delete a.hello;
      t( a.hello == null );
      
      delete a.b;
      t( a.b == null );

    </script>
  </test-case>

  <test-case id="021" name="delete property in iteration">
    <script>
      var t = debug.assert;

      var obj = { a:10, b:20, c:30, d:40 };
      
      for(key in obj) {
        if( key == 'b' )
          delete obj.c;
      }
      
      t( obj != null );
      t( obj.a == 10 );
      t( obj.b == 20 );
      t( obj.c == null );
      t( obj.d == 40 );

    </script>
  </test-case>

  <test-case id="031" name="self call">
    <script>
      var t = debug.assert;

      var a = function() { return a; }

      t( a()()()()()()() == a );

    </script>
  </test-case>

</test-suite>